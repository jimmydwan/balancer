
motorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb94  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  0800fd78  0800fd78  00010d78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010230  08010230  00012258  2**0
                  CONTENTS
  4 .ARM          00000008  08010230  08010230  00011230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010238  08010238  00012258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010238  08010238  00011238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801023c  0801023c  0001123c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000258  20000000  08010240  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000898  20000258  08010498  00012258  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000af0  08010498  00012af0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012258  2**0
                  CONTENTS, READONLY
 12 .debug_info   000231ab  00000000  00000000  00012288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005376  00000000  00000000  00035433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c28  00000000  00000000  0003a7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001578  00000000  00000000  0003c3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a97  00000000  00000000  0003d950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027c12  00000000  00000000  000643e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4c9a  00000000  00000000  0008bff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00170c93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008864  00000000  00000000  00170cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0017953c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000258 	.word	0x20000258
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800fd5c 	.word	0x0800fd5c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000025c 	.word	0x2000025c
 800021c:	0800fd5c 	.word	0x0800fd5c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b09a      	sub	sp, #104	@ 0x68
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800104a:	2220      	movs	r2, #32
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00c f8b6 	bl	800d1c0 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	223c      	movs	r2, #60	@ 0x3c
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f00c f8b0 	bl	800d1c0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001060:	4b4d      	ldr	r3, [pc, #308]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001062:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001066:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001068:	4b4b      	ldr	r3, [pc, #300]	@ (8001198 <MX_ADC1_Init+0x164>)
 800106a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800106e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001070:	4b49      	ldr	r3, [pc, #292]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	4b48      	ldr	r3, [pc, #288]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800107c:	4b46      	ldr	r3, [pc, #280]	@ (8001198 <MX_ADC1_Init+0x164>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001082:	4b45      	ldr	r3, [pc, #276]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001084:	2201      	movs	r2, #1
 8001086:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001088:	4b43      	ldr	r3, [pc, #268]	@ (8001198 <MX_ADC1_Init+0x164>)
 800108a:	2204      	movs	r2, #4
 800108c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800108e:	4b42      	ldr	r3, [pc, #264]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001090:	2200      	movs	r2, #0
 8001092:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001094:	4b40      	ldr	r3, [pc, #256]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001096:	2200      	movs	r2, #0
 8001098:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800109a:	4b3f      	ldr	r3, [pc, #252]	@ (8001198 <MX_ADC1_Init+0x164>)
 800109c:	2201      	movs	r2, #1
 800109e:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b4:	4b38      	ldr	r3, [pc, #224]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010bc:	4b36      	ldr	r3, [pc, #216]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010be:	2200      	movs	r2, #0
 80010c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010c2:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ca:	4833      	ldr	r0, [pc, #204]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010cc:	f001 fc6a 	bl	80029a4 <HAL_ADC_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010d6:	f000 fba8 	bl	800182a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010da:	2300      	movs	r3, #0
 80010dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010e2:	4619      	mov	r1, r3
 80010e4:	482c      	ldr	r0, [pc, #176]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010e6:	f003 fd93 	bl	8004c10 <HAL_ADCEx_MultiModeConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80010f0:	f000 fb9b 	bl	800182a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010f4:	4b29      	ldr	r3, [pc, #164]	@ (800119c <MX_ADC1_Init+0x168>)
 80010f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f8:	2306      	movs	r3, #6
 80010fa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010fc:	2300      	movs	r3, #0
 80010fe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001100:	237f      	movs	r3, #127	@ 0x7f
 8001102:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001104:	2304      	movs	r3, #4
 8001106:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfig.Offset = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001110:	4619      	mov	r1, r3
 8001112:	4821      	ldr	r0, [pc, #132]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001114:	f002 f802 	bl	800311c <HAL_ADC_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800111e:	f000 fb84 	bl	800182a <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8001122:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <MX_ADC1_Init+0x16c>)
 8001124:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001126:	2309      	movs	r3, #9
 8001128:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800112a:	2301      	movs	r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800112e:	237f      	movs	r3, #127	@ 0x7f
 8001130:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001132:	2304      	movs	r3, #4
 8001134:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800113a:	2302      	movs	r3, #2
 800113c:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001150:	2384      	movs	r3, #132	@ 0x84
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001154:	2380      	movs	r3, #128	@ 0x80
 8001156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001164:	f003 f874 	bl	8004250 <HAL_ADCEx_InjectedConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 800116e:	f000 fb5c 	bl	800182a <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8001172:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <MX_ADC1_Init+0x168>)
 8001174:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001176:	f240 130f 	movw	r3, #271	@ 0x10f
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001182:	f003 f865 	bl	8004250 <HAL_ADCEx_InjectedConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 800118c:	f000 fb4d 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3768      	adds	r7, #104	@ 0x68
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000274 	.word	0x20000274
 800119c:	2e300800 	.word	0x2e300800
 80011a0:	14f00020 	.word	0x14f00020

080011a4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b090      	sub	sp, #64	@ 0x40
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	223c      	movs	r2, #60	@ 0x3c
 80011ae:	2100      	movs	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f00c f805 	bl	800d1c0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011b6:	4b38      	ldr	r3, [pc, #224]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011b8:	4a38      	ldr	r2, [pc, #224]	@ (800129c <MX_ADC2_Init+0xf8>)
 80011ba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80011bc:	4b36      	ldr	r3, [pc, #216]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011be:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011c2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011c4:	4b34      	ldr	r3, [pc, #208]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ca:	4b33      	ldr	r3, [pc, #204]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80011d0:	4b31      	ldr	r3, [pc, #196]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011d6:	4b30      	ldr	r3, [pc, #192]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011d8:	2201      	movs	r2, #1
 80011da:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011de:	2204      	movs	r2, #4
 80011e0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80011e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80011ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011f4:	4b28      	ldr	r3, [pc, #160]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011fc:	4b26      	ldr	r3, [pc, #152]	@ (8001298 <MX_ADC2_Init+0xf4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001204:	4b24      	ldr	r3, [pc, #144]	@ (8001298 <MX_ADC2_Init+0xf4>)
 8001206:	2200      	movs	r2, #0
 8001208:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800120a:	4b23      	ldr	r3, [pc, #140]	@ (8001298 <MX_ADC2_Init+0xf4>)
 800120c:	2200      	movs	r2, #0
 800120e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001212:	4821      	ldr	r0, [pc, #132]	@ (8001298 <MX_ADC2_Init+0xf4>)
 8001214:	f001 fbc6 	bl	80029a4 <HAL_ADC_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800121e:	f000 fb04 	bl	800182a <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_15;
 8001222:	4b1f      	ldr	r3, [pc, #124]	@ (80012a0 <MX_ADC2_Init+0xfc>)
 8001224:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001226:	2309      	movs	r3, #9
 8001228:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800122a:	2301      	movs	r3, #1
 800122c:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800122e:	237f      	movs	r3, #127	@ 0x7f
 8001230:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001232:	2304      	movs	r3, #4
 8001234:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800123a:	2302      	movs	r3, #2
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T8_CC4;
 8001250:	239c      	movs	r3, #156	@ 0x9c
 8001252:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001254:	2380      	movs	r3, #128	@ 0x80
 8001256:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	4619      	mov	r1, r3
 8001262:	480d      	ldr	r0, [pc, #52]	@ (8001298 <MX_ADC2_Init+0xf4>)
 8001264:	f002 fff4 	bl	8004250 <HAL_ADCEx_InjectedConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 800126e:	f000 fadc 	bl	800182a <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8001272:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <MX_ADC2_Init+0x100>)
 8001274:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001276:	f240 130f 	movw	r3, #271	@ 0x10f
 800127a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	4619      	mov	r1, r3
 8001280:	4805      	ldr	r0, [pc, #20]	@ (8001298 <MX_ADC2_Init+0xf4>)
 8001282:	f002 ffe5 	bl	8004250 <HAL_ADCEx_InjectedConfigChannel>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_ADC2_Init+0xec>
  {
    Error_Handler();
 800128c:	f000 facd 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	3740      	adds	r7, #64	@ 0x40
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200002e0 	.word	0x200002e0
 800129c:	50000100 	.word	0x50000100
 80012a0:	3ef08000 	.word	0x3ef08000
 80012a4:	32601000 	.word	0x32601000

080012a8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b09e      	sub	sp, #120	@ 0x78
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c0:	f107 0320 	add.w	r3, r7, #32
 80012c4:	2244      	movs	r2, #68	@ 0x44
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f00b ff79 	bl	800d1c0 <memset>
  if(adcHandle->Instance==ADC1)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012d6:	d15f      	bne.n	8001398 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012dc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012de:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80012e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e4:	f107 0320 	add.w	r3, r7, #32
 80012e8:	4618      	mov	r0, r3
 80012ea:	f005 facd 	bl	8006888 <HAL_RCCEx_PeriphCLKConfig>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80012f4:	f000 fa99 	bl	800182a <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012f8:	4b4f      	ldr	r3, [pc, #316]	@ (8001438 <HAL_ADC_MspInit+0x190>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	4a4e      	ldr	r2, [pc, #312]	@ (8001438 <HAL_ADC_MspInit+0x190>)
 8001300:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001302:	4b4d      	ldr	r3, [pc, #308]	@ (8001438 <HAL_ADC_MspInit+0x190>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d10b      	bne.n	8001322 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800130a:	4b4c      	ldr	r3, [pc, #304]	@ (800143c <HAL_ADC_MspInit+0x194>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130e:	4a4b      	ldr	r2, [pc, #300]	@ (800143c <HAL_ADC_MspInit+0x194>)
 8001310:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001314:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001316:	4b49      	ldr	r3, [pc, #292]	@ (800143c <HAL_ADC_MspInit+0x194>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800131e:	61fb      	str	r3, [r7, #28]
 8001320:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	4b46      	ldr	r3, [pc, #280]	@ (800143c <HAL_ADC_MspInit+0x194>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001326:	4a45      	ldr	r2, [pc, #276]	@ (800143c <HAL_ADC_MspInit+0x194>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800132e:	4b43      	ldr	r3, [pc, #268]	@ (800143c <HAL_ADC_MspInit+0x194>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	61bb      	str	r3, [r7, #24]
 8001338:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	4b40      	ldr	r3, [pc, #256]	@ (800143c <HAL_ADC_MspInit+0x194>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133e:	4a3f      	ldr	r2, [pc, #252]	@ (800143c <HAL_ADC_MspInit+0x194>)
 8001340:	f043 0302 	orr.w	r3, r3, #2
 8001344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001346:	4b3d      	ldr	r3, [pc, #244]	@ (800143c <HAL_ADC_MspInit+0x194>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001352:	2302      	movs	r3, #2
 8001354:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001356:	2303      	movs	r3, #3
 8001358:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001362:	4619      	mov	r1, r3
 8001364:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001368:	f004 fb12 	bl	8005990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800136c:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001370:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001372:	2303      	movs	r3, #3
 8001374:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800137e:	4619      	mov	r1, r3
 8001380:	482f      	ldr	r0, [pc, #188]	@ (8001440 <HAL_ADC_MspInit+0x198>)
 8001382:	f004 fb05 	bl	8005990 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	2012      	movs	r0, #18
 800138c:	f003 fdbf 	bl	8004f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001390:	2012      	movs	r0, #18
 8001392:	f003 fdd6 	bl	8004f42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001396:	e04a      	b.n	800142e <HAL_ADC_MspInit+0x186>
  else if(adcHandle->Instance==ADC2)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a29      	ldr	r2, [pc, #164]	@ (8001444 <HAL_ADC_MspInit+0x19c>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d145      	bne.n	800142e <HAL_ADC_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013a6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013a8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80013ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ae:	f107 0320 	add.w	r3, r7, #32
 80013b2:	4618      	mov	r0, r3
 80013b4:	f005 fa68 	bl	8006888 <HAL_RCCEx_PeriphCLKConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_ADC_MspInit+0x11a>
      Error_Handler();
 80013be:	f000 fa34 	bl	800182a <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001438 <HAL_ADC_MspInit+0x190>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001438 <HAL_ADC_MspInit+0x190>)
 80013ca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001438 <HAL_ADC_MspInit+0x190>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d10b      	bne.n	80013ec <HAL_ADC_MspInit+0x144>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013d4:	4b19      	ldr	r3, [pc, #100]	@ (800143c <HAL_ADC_MspInit+0x194>)
 80013d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d8:	4a18      	ldr	r2, [pc, #96]	@ (800143c <HAL_ADC_MspInit+0x194>)
 80013da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e0:	4b16      	ldr	r3, [pc, #88]	@ (800143c <HAL_ADC_MspInit+0x194>)
 80013e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ec:	4b13      	ldr	r3, [pc, #76]	@ (800143c <HAL_ADC_MspInit+0x194>)
 80013ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f0:	4a12      	ldr	r2, [pc, #72]	@ (800143c <HAL_ADC_MspInit+0x194>)
 80013f2:	f043 0302 	orr.w	r3, r3, #2
 80013f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f8:	4b10      	ldr	r3, [pc, #64]	@ (800143c <HAL_ADC_MspInit+0x194>)
 80013fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001404:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001408:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800140a:	2303      	movs	r3, #3
 800140c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001412:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001416:	4619      	mov	r1, r3
 8001418:	4809      	ldr	r0, [pc, #36]	@ (8001440 <HAL_ADC_MspInit+0x198>)
 800141a:	f004 fab9 	bl	8005990 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	2012      	movs	r0, #18
 8001424:	f003 fd73 	bl	8004f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001428:	2012      	movs	r0, #18
 800142a:	f003 fd8a 	bl	8004f42 <HAL_NVIC_EnableIRQ>
}
 800142e:	bf00      	nop
 8001430:	3778      	adds	r7, #120	@ 0x78
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	2000034c 	.word	0x2000034c
 800143c:	40021000 	.word	0x40021000
 8001440:	48000400 	.word	0x48000400
 8001444:	50000100 	.word	0x50000100

08001448 <MX_DAC3_Init>:

DAC_HandleTypeDef hdac3;

/* DAC3 init function */
void MX_DAC3_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08c      	sub	sp, #48	@ 0x30
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800144e:	463b      	mov	r3, r7
 8001450:	2230      	movs	r2, #48	@ 0x30
 8001452:	2100      	movs	r1, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f00b feb3 	bl	800d1c0 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 800145a:	4b16      	ldr	r3, [pc, #88]	@ (80014b4 <MX_DAC3_Init+0x6c>)
 800145c:	4a16      	ldr	r2, [pc, #88]	@ (80014b8 <MX_DAC3_Init+0x70>)
 800145e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8001460:	4814      	ldr	r0, [pc, #80]	@ (80014b4 <MX_DAC3_Init+0x6c>)
 8001462:	f003 fd88 	bl	8004f76 <HAL_DAC_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 800146c:	f000 f9dd 	bl	800182a <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001470:	2302      	movs	r3, #2
 8001472:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001484:	2300      	movs	r3, #0
 8001486:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001488:	2302      	movs	r3, #2
 800148a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 800148c:	2302      	movs	r3, #2
 800148e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001494:	463b      	mov	r3, r7
 8001496:	2200      	movs	r2, #0
 8001498:	4619      	mov	r1, r3
 800149a:	4806      	ldr	r0, [pc, #24]	@ (80014b4 <MX_DAC3_Init+0x6c>)
 800149c:	f003 fd8e 	bl	8004fbc <HAL_DAC_ConfigChannel>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 80014a6:	f000 f9c0 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	3730      	adds	r7, #48	@ 0x30
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000350 	.word	0x20000350
 80014b8:	50001000 	.word	0x50001000

080014bc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC3)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0a      	ldr	r2, [pc, #40]	@ (80014f4 <HAL_DAC_MspInit+0x38>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d10b      	bne.n	80014e6 <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* DAC3 clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 80014ce:	4b0a      	ldr	r3, [pc, #40]	@ (80014f8 <HAL_DAC_MspInit+0x3c>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d2:	4a09      	ldr	r2, [pc, #36]	@ (80014f8 <HAL_DAC_MspInit+0x3c>)
 80014d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014da:	4b07      	ldr	r3, [pc, #28]	@ (80014f8 <HAL_DAC_MspInit+0x3c>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }
}
 80014e6:	bf00      	nop
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	50001000 	.word	0x50001000
 80014f8:	40021000 	.word	0x40021000

080014fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001502:	4b16      	ldr	r3, [pc, #88]	@ (800155c <MX_DMA_Init+0x60>)
 8001504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <MX_DMA_Init+0x60>)
 8001508:	f043 0304 	orr.w	r3, r3, #4
 800150c:	6493      	str	r3, [r2, #72]	@ 0x48
 800150e:	4b13      	ldr	r3, [pc, #76]	@ (800155c <MX_DMA_Init+0x60>)
 8001510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <MX_DMA_Init+0x60>)
 800151c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800151e:	4a0f      	ldr	r2, [pc, #60]	@ (800155c <MX_DMA_Init+0x60>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6493      	str	r3, [r2, #72]	@ 0x48
 8001526:	4b0d      	ldr	r3, [pc, #52]	@ (800155c <MX_DMA_Init+0x60>)
 8001528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2101      	movs	r1, #1
 8001536:	200b      	movs	r0, #11
 8001538:	f003 fce9 	bl	8004f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800153c:	200b      	movs	r0, #11
 800153e:	f003 fd00 	bl	8004f42 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 1, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2101      	movs	r1, #1
 8001546:	200c      	movs	r0, #12
 8001548:	f003 fce1 	bl	8004f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800154c:	200c      	movs	r0, #12
 800154e:	f003 fcf8 	bl	8004f42 <HAL_NVIC_EnableIRQ>

}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40021000 	.word	0x40021000

08001560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	@ 0x28
 8001564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
 8001574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001576:	4b4d      	ldr	r3, [pc, #308]	@ (80016ac <MX_GPIO_Init+0x14c>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157a:	4a4c      	ldr	r2, [pc, #304]	@ (80016ac <MX_GPIO_Init+0x14c>)
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001582:	4b4a      	ldr	r3, [pc, #296]	@ (80016ac <MX_GPIO_Init+0x14c>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001586:	f003 0304 	and.w	r3, r3, #4
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800158e:	4b47      	ldr	r3, [pc, #284]	@ (80016ac <MX_GPIO_Init+0x14c>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001592:	4a46      	ldr	r2, [pc, #280]	@ (80016ac <MX_GPIO_Init+0x14c>)
 8001594:	f043 0320 	orr.w	r3, r3, #32
 8001598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800159a:	4b44      	ldr	r3, [pc, #272]	@ (80016ac <MX_GPIO_Init+0x14c>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159e:	f003 0320 	and.w	r3, r3, #32
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	4b41      	ldr	r3, [pc, #260]	@ (80016ac <MX_GPIO_Init+0x14c>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015aa:	4a40      	ldr	r2, [pc, #256]	@ (80016ac <MX_GPIO_Init+0x14c>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015b2:	4b3e      	ldr	r3, [pc, #248]	@ (80016ac <MX_GPIO_Init+0x14c>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	4b3b      	ldr	r3, [pc, #236]	@ (80016ac <MX_GPIO_Init+0x14c>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c2:	4a3a      	ldr	r2, [pc, #232]	@ (80016ac <MX_GPIO_Init+0x14c>)
 80015c4:	f043 0302 	orr.w	r3, r3, #2
 80015c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ca:	4b38      	ldr	r3, [pc, #224]	@ (80016ac <MX_GPIO_Init+0x14c>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|TEST_Pin, GPIO_PIN_SET);
 80015d6:	2201      	movs	r2, #1
 80015d8:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 80015dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015e0:	f004 fb58 	bl	8005c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS2_GPIO_Port, NSS2_Pin, GPIO_PIN_SET);
 80015e4:	2201      	movs	r2, #1
 80015e6:	2110      	movs	r1, #16
 80015e8:	4831      	ldr	r0, [pc, #196]	@ (80016b0 <MX_GPIO_Init+0x150>)
 80015ea:	f004 fb53 	bl	8005c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|NSS1_Pin, GPIO_PIN_SET);
 80015ee:	2201      	movs	r2, #1
 80015f0:	2109      	movs	r1, #9
 80015f2:	4830      	ldr	r0, [pc, #192]	@ (80016b4 <MX_GPIO_Init+0x154>)
 80015f4:	f004 fb4e 	bl	8005c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	4828      	ldr	r0, [pc, #160]	@ (80016b0 <MX_GPIO_Init+0x150>)
 800160e:	f004 f9bf 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001612:	2310      	movs	r3, #16
 8001614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001616:	2301      	movs	r3, #1
 8001618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800162c:	f004 f9b0 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS2_Pin;
 8001630:	2310      	movs	r3, #16
 8001632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001634:	2301      	movs	r3, #1
 8001636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800163c:	2302      	movs	r3, #2
 800163e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS2_GPIO_Port, &GPIO_InitStruct);
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	481a      	ldr	r0, [pc, #104]	@ (80016b0 <MX_GPIO_Init+0x150>)
 8001648:	f004 f9a2 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800164c:	2301      	movs	r3, #1
 800164e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001650:	2301      	movs	r3, #1
 8001652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4619      	mov	r1, r3
 8001662:	4814      	ldr	r0, [pc, #80]	@ (80016b4 <MX_GPIO_Init+0x154>)
 8001664:	f004 f994 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8001668:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800166c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166e:	2301      	movs	r3, #1
 8001670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001676:	2302      	movs	r3, #2
 8001678:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001684:	f004 f984 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS1_Pin;
 8001688:	2308      	movs	r3, #8
 800168a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001694:	2302      	movs	r3, #2
 8001696:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS1_GPIO_Port, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	4805      	ldr	r0, [pc, #20]	@ (80016b4 <MX_GPIO_Init+0x154>)
 80016a0:	f004 f976 	bl	8005990 <HAL_GPIO_Init>

}
 80016a4:	bf00      	nop
 80016a6:	3728      	adds	r7, #40	@ 0x28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40021000 	.word	0x40021000
 80016b0:	48000800 	.word	0x48000800
 80016b4:	48000400 	.word	0x48000400

080016b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016bc:	f000 feaf 	bl	800241e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c0:	f000 f86a 	bl	8001798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c4:	f7ff ff4c 	bl	8001560 <MX_GPIO_Init>
  MX_DMA_Init();
 80016c8:	f7ff ff18 	bl	80014fc <MX_DMA_Init>
  MX_USART3_UART_Init();
 80016cc:	f000 fd74 	bl	80021b8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80016d0:	f7ff fcb0 	bl	8001034 <MX_ADC1_Init>
  MX_ADC2_Init();
 80016d4:	f7ff fd66 	bl	80011a4 <MX_ADC2_Init>
  MX_TIM1_Init();
 80016d8:	f000 fb16 	bl	8001d08 <MX_TIM1_Init>
  MX_DAC3_Init();
 80016dc:	f7ff feb4 	bl	8001448 <MX_DAC3_Init>
  MX_SPI1_Init();
 80016e0:	f000 f8aa 	bl	8001838 <MX_SPI1_Init>
  MX_TIM8_Init();
 80016e4:	f000 fbec 	bl	8001ec0 <MX_TIM8_Init>
  MX_SPI3_Init();
 80016e8:	f000 f8e4 	bl	80018b4 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  appInit();
 80016ec:	f009 fb78 	bl	800ade0 <appInit>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 80016f0:	2264      	movs	r2, #100	@ 0x64
 80016f2:	4923      	ldr	r1, [pc, #140]	@ (8001780 <main+0xc8>)
 80016f4:	4823      	ldr	r0, [pc, #140]	@ (8001784 <main+0xcc>)
 80016f6:	f008 fe1a 	bl	800a32e <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80016fa:	217f      	movs	r1, #127	@ 0x7f
 80016fc:	4822      	ldr	r0, [pc, #136]	@ (8001788 <main+0xd0>)
 80016fe:	f002 fb87 	bl	8003e10 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001702:	217f      	movs	r1, #127	@ 0x7f
 8001704:	4821      	ldr	r0, [pc, #132]	@ (800178c <main+0xd4>)
 8001706:	f002 fb83 	bl	8003e10 <HAL_ADCEx_Calibration_Start>
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_JEOC);
 800170a:	4b1f      	ldr	r3, [pc, #124]	@ (8001788 <main+0xd0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2220      	movs	r2, #32
 8001710:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOC);
 8001712:	4b1d      	ldr	r3, [pc, #116]	@ (8001788 <main+0xd0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2204      	movs	r2, #4
 8001718:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_JEOC);
 800171a:	4b1c      	ldr	r3, [pc, #112]	@ (800178c <main+0xd4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2220      	movs	r2, #32
 8001720:	601a      	str	r2, [r3, #0]
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001722:	4819      	ldr	r0, [pc, #100]	@ (8001788 <main+0xd0>)
 8001724:	f002 fc86 	bl	8004034 <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart(&hadc2);
 8001728:	4818      	ldr	r0, [pc, #96]	@ (800178c <main+0xd4>)
 800172a:	f002 fbd3 	bl	8003ed4 <HAL_ADCEx_InjectedStart>
  HAL_TIM_Base_Start(&htim8);
 800172e:	4818      	ldr	r0, [pc, #96]	@ (8001790 <main+0xd8>)
 8001730:	f005 ff32 	bl	8007598 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001734:	210c      	movs	r1, #12
 8001736:	4816      	ldr	r0, [pc, #88]	@ (8001790 <main+0xd8>)
 8001738:	f005 fff2 	bl	8007720 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800173c:	2100      	movs	r1, #0
 800173e:	4814      	ldr	r0, [pc, #80]	@ (8001790 <main+0xd8>)
 8001740:	f005 ffee 	bl	8007720 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001744:	2104      	movs	r1, #4
 8001746:	4812      	ldr	r0, [pc, #72]	@ (8001790 <main+0xd8>)
 8001748:	f005 ffea 	bl	8007720 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800174c:	2108      	movs	r1, #8
 800174e:	4810      	ldr	r0, [pc, #64]	@ (8001790 <main+0xd8>)
 8001750:	f005 ffe6 	bl	8007720 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim1);
 8001754:	480f      	ldr	r0, [pc, #60]	@ (8001794 <main+0xdc>)
 8001756:	f005 ff1f 	bl	8007598 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800175a:	210c      	movs	r1, #12
 800175c:	480d      	ldr	r0, [pc, #52]	@ (8001794 <main+0xdc>)
 800175e:	f005 ffdf 	bl	8007720 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001762:	2100      	movs	r1, #0
 8001764:	480b      	ldr	r0, [pc, #44]	@ (8001794 <main+0xdc>)
 8001766:	f005 ffdb 	bl	8007720 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800176a:	2104      	movs	r1, #4
 800176c:	4809      	ldr	r0, [pc, #36]	@ (8001794 <main+0xdc>)
 800176e:	f005 ffd7 	bl	8007720 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001772:	2108      	movs	r1, #8
 8001774:	4807      	ldr	r0, [pc, #28]	@ (8001794 <main+0xdc>)
 8001776:	f005 ffd3 	bl	8007720 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    userMain();
 800177a:	f009 fe53 	bl	800b424 <userMain>
 800177e:	e7fc      	b.n	800177a <main+0xc2>
 8001780:	2000090c 	.word	0x2000090c
 8001784:	200004c8 	.word	0x200004c8
 8001788:	20000274 	.word	0x20000274
 800178c:	200002e0 	.word	0x200002e0
 8001790:	2000047c 	.word	0x2000047c
 8001794:	20000430 	.word	0x20000430

08001798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b094      	sub	sp, #80	@ 0x50
 800179c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800179e:	f107 0318 	add.w	r3, r7, #24
 80017a2:	2238      	movs	r2, #56	@ 0x38
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f00b fd0a 	bl	800d1c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
 80017b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80017ba:	2000      	movs	r0, #0
 80017bc:	f004 fa82 	bl	8005cc4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017c0:	2301      	movs	r3, #1
 80017c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017c8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ca:	2302      	movs	r3, #2
 80017cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017ce:	2303      	movs	r3, #3
 80017d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 80017d2:	2303      	movs	r3, #3
 80017d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80017d6:	2328      	movs	r3, #40	@ 0x28
 80017d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017da:	2302      	movs	r3, #2
 80017dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017de:	2302      	movs	r3, #2
 80017e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017e2:	2302      	movs	r3, #2
 80017e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e6:	f107 0318 	add.w	r3, r7, #24
 80017ea:	4618      	mov	r0, r3
 80017ec:	f004 fb1e 	bl	8005e2c <HAL_RCC_OscConfig>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <SystemClock_Config+0x62>
  {
    Error_Handler();
 80017f6:	f000 f818 	bl	800182a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017fa:	230f      	movs	r3, #15
 80017fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017fe:	2303      	movs	r3, #3
 8001800:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	2104      	movs	r1, #4
 8001812:	4618      	mov	r0, r3
 8001814:	f004 fe1c 	bl	8006450 <HAL_RCC_ClockConfig>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800181e:	f000 f804 	bl	800182a <Error_Handler>
  }
}
 8001822:	bf00      	nop
 8001824:	3750      	adds	r7, #80	@ 0x50
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800182e:	b672      	cpsid	i
}
 8001830:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001832:	bf00      	nop
 8001834:	e7fd      	b.n	8001832 <Error_Handler+0x8>
	...

08001838 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800183c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <MX_SPI1_Init+0x74>)
 800183e:	4a1c      	ldr	r2, [pc, #112]	@ (80018b0 <MX_SPI1_Init+0x78>)
 8001840:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001842:	4b1a      	ldr	r3, [pc, #104]	@ (80018ac <MX_SPI1_Init+0x74>)
 8001844:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001848:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800184a:	4b18      	ldr	r3, [pc, #96]	@ (80018ac <MX_SPI1_Init+0x74>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001850:	4b16      	ldr	r3, [pc, #88]	@ (80018ac <MX_SPI1_Init+0x74>)
 8001852:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001856:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001858:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <MX_SPI1_Init+0x74>)
 800185a:	2202      	movs	r2, #2
 800185c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800185e:	4b13      	ldr	r3, [pc, #76]	@ (80018ac <MX_SPI1_Init+0x74>)
 8001860:	2201      	movs	r2, #1
 8001862:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001864:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <MX_SPI1_Init+0x74>)
 8001866:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800186a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800186c:	4b0f      	ldr	r3, [pc, #60]	@ (80018ac <MX_SPI1_Init+0x74>)
 800186e:	2238      	movs	r2, #56	@ 0x38
 8001870:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001872:	4b0e      	ldr	r3, [pc, #56]	@ (80018ac <MX_SPI1_Init+0x74>)
 8001874:	2200      	movs	r2, #0
 8001876:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001878:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <MX_SPI1_Init+0x74>)
 800187a:	2200      	movs	r2, #0
 800187c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800187e:	4b0b      	ldr	r3, [pc, #44]	@ (80018ac <MX_SPI1_Init+0x74>)
 8001880:	2200      	movs	r2, #0
 8001882:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001884:	4b09      	ldr	r3, [pc, #36]	@ (80018ac <MX_SPI1_Init+0x74>)
 8001886:	2207      	movs	r2, #7
 8001888:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800188a:	4b08      	ldr	r3, [pc, #32]	@ (80018ac <MX_SPI1_Init+0x74>)
 800188c:	2200      	movs	r2, #0
 800188e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001890:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <MX_SPI1_Init+0x74>)
 8001892:	2200      	movs	r2, #0
 8001894:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001896:	4805      	ldr	r0, [pc, #20]	@ (80018ac <MX_SPI1_Init+0x74>)
 8001898:	f005 f9e6 	bl	8006c68 <HAL_SPI_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80018a2:	f7ff ffc2 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000364 	.word	0x20000364
 80018b0:	40013000 	.word	0x40013000

080018b4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80018b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001928 <MX_SPI3_Init+0x74>)
 80018ba:	4a1c      	ldr	r2, [pc, #112]	@ (800192c <MX_SPI3_Init+0x78>)
 80018bc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018be:	4b1a      	ldr	r3, [pc, #104]	@ (8001928 <MX_SPI3_Init+0x74>)
 80018c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018c4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80018c6:	4b18      	ldr	r3, [pc, #96]	@ (8001928 <MX_SPI3_Init+0x74>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80018cc:	4b16      	ldr	r3, [pc, #88]	@ (8001928 <MX_SPI3_Init+0x74>)
 80018ce:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80018d2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018d4:	4b14      	ldr	r3, [pc, #80]	@ (8001928 <MX_SPI3_Init+0x74>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80018da:	4b13      	ldr	r3, [pc, #76]	@ (8001928 <MX_SPI3_Init+0x74>)
 80018dc:	2201      	movs	r2, #1
 80018de:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80018e0:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <MX_SPI3_Init+0x74>)
 80018e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018e6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80018e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001928 <MX_SPI3_Init+0x74>)
 80018ea:	2210      	movs	r2, #16
 80018ec:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <MX_SPI3_Init+0x74>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80018f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <MX_SPI3_Init+0x74>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <MX_SPI3_Init+0x74>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001900:	4b09      	ldr	r3, [pc, #36]	@ (8001928 <MX_SPI3_Init+0x74>)
 8001902:	2207      	movs	r2, #7
 8001904:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001906:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <MX_SPI3_Init+0x74>)
 8001908:	2200      	movs	r2, #0
 800190a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800190c:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <MX_SPI3_Init+0x74>)
 800190e:	2200      	movs	r2, #0
 8001910:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001912:	4805      	ldr	r0, [pc, #20]	@ (8001928 <MX_SPI3_Init+0x74>)
 8001914:	f005 f9a8 	bl	8006c68 <HAL_SPI_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800191e:	f7ff ff84 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200003c8 	.word	0x200003c8
 800192c:	40003c00 	.word	0x40003c00

08001930 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08c      	sub	sp, #48	@ 0x30
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 031c 	add.w	r3, r7, #28
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a3d      	ldr	r2, [pc, #244]	@ (8001a44 <HAL_SPI_MspInit+0x114>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d129      	bne.n	80019a6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001952:	4b3d      	ldr	r3, [pc, #244]	@ (8001a48 <HAL_SPI_MspInit+0x118>)
 8001954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001956:	4a3c      	ldr	r2, [pc, #240]	@ (8001a48 <HAL_SPI_MspInit+0x118>)
 8001958:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800195c:	6613      	str	r3, [r2, #96]	@ 0x60
 800195e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a48 <HAL_SPI_MspInit+0x118>)
 8001960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001962:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001966:	61bb      	str	r3, [r7, #24]
 8001968:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196a:	4b37      	ldr	r3, [pc, #220]	@ (8001a48 <HAL_SPI_MspInit+0x118>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196e:	4a36      	ldr	r2, [pc, #216]	@ (8001a48 <HAL_SPI_MspInit+0x118>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001976:	4b34      	ldr	r3, [pc, #208]	@ (8001a48 <HAL_SPI_MspInit+0x118>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001982:	23e0      	movs	r3, #224	@ 0xe0
 8001984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001992:	2305      	movs	r3, #5
 8001994:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001996:	f107 031c 	add.w	r3, r7, #28
 800199a:	4619      	mov	r1, r3
 800199c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019a0:	f003 fff6 	bl	8005990 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80019a4:	e049      	b.n	8001a3a <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a28      	ldr	r2, [pc, #160]	@ (8001a4c <HAL_SPI_MspInit+0x11c>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d144      	bne.n	8001a3a <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019b0:	4b25      	ldr	r3, [pc, #148]	@ (8001a48 <HAL_SPI_MspInit+0x118>)
 80019b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b4:	4a24      	ldr	r2, [pc, #144]	@ (8001a48 <HAL_SPI_MspInit+0x118>)
 80019b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80019bc:	4b22      	ldr	r3, [pc, #136]	@ (8001a48 <HAL_SPI_MspInit+0x118>)
 80019be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a48 <HAL_SPI_MspInit+0x118>)
 80019ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019cc:	4a1e      	ldr	r2, [pc, #120]	@ (8001a48 <HAL_SPI_MspInit+0x118>)
 80019ce:	f043 0304 	orr.w	r3, r3, #4
 80019d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a48 <HAL_SPI_MspInit+0x118>)
 80019d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e0:	4b19      	ldr	r3, [pc, #100]	@ (8001a48 <HAL_SPI_MspInit+0x118>)
 80019e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e4:	4a18      	ldr	r2, [pc, #96]	@ (8001a48 <HAL_SPI_MspInit+0x118>)
 80019e6:	f043 0302 	orr.w	r3, r3, #2
 80019ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ec:	4b16      	ldr	r3, [pc, #88]	@ (8001a48 <HAL_SPI_MspInit+0x118>)
 80019ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019f8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80019fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a0a:	2306      	movs	r3, #6
 8001a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	4619      	mov	r1, r3
 8001a14:	480e      	ldr	r0, [pc, #56]	@ (8001a50 <HAL_SPI_MspInit+0x120>)
 8001a16:	f003 ffbb 	bl	8005990 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a1a:	2320      	movs	r3, #32
 8001a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a2a:	2306      	movs	r3, #6
 8001a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	4619      	mov	r1, r3
 8001a34:	4807      	ldr	r0, [pc, #28]	@ (8001a54 <HAL_SPI_MspInit+0x124>)
 8001a36:	f003 ffab 	bl	8005990 <HAL_GPIO_Init>
}
 8001a3a:	bf00      	nop
 8001a3c:	3730      	adds	r7, #48	@ 0x30
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40013000 	.word	0x40013000
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40003c00 	.word	0x40003c00
 8001a50:	48000800 	.word	0x48000800
 8001a54:	48000400 	.word	0x48000400

08001a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a9c <HAL_MspInit+0x44>)
 8001a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a62:	4a0e      	ldr	r2, [pc, #56]	@ (8001a9c <HAL_MspInit+0x44>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a9c <HAL_MspInit+0x44>)
 8001a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a76:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <HAL_MspInit+0x44>)
 8001a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a7a:	4a08      	ldr	r2, [pc, #32]	@ (8001a9c <HAL_MspInit+0x44>)
 8001a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a80:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a82:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <HAL_MspInit+0x44>)
 8001a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a8e:	f004 f9bd 	bl	8005e0c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40021000 	.word	0x40021000

08001aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <NMI_Handler+0x4>

08001aa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <HardFault_Handler+0x4>

08001ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <MemManage_Handler+0x4>

08001ab8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <BusFault_Handler+0x4>

08001ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <UsageFault_Handler+0x4>

08001ac8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af6:	f000 fce5 	bl	80024c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001b04:	4802      	ldr	r0, [pc, #8]	@ (8001b10 <DMA1_Channel1_IRQHandler+0x10>)
 8001b06:	f003 fdf4 	bl	80056f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	2000055c 	.word	0x2000055c

08001b14 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001b18:	4802      	ldr	r0, [pc, #8]	@ (8001b24 <DMA1_Channel2_IRQHandler+0x10>)
 8001b1a:	f003 fdea 	bl	80056f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200005bc 	.word	0x200005bc

08001b28 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b2c:	4803      	ldr	r0, [pc, #12]	@ (8001b3c <ADC1_2_IRQHandler+0x14>)
 8001b2e:	f001 f8bd 	bl	8002cac <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001b32:	4803      	ldr	r0, [pc, #12]	@ (8001b40 <ADC1_2_IRQHandler+0x18>)
 8001b34:	f001 f8ba 	bl	8002cac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000274 	.word	0x20000274
 8001b40:	200002e0 	.word	0x200002e0

08001b44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b48:	4802      	ldr	r0, [pc, #8]	@ (8001b54 <USART3_IRQHandler+0x10>)
 8001b4a:	f007 f84d 	bl	8008be8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200004c8 	.word	0x200004c8

08001b58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return 1;
 8001b5c:	2301      	movs	r3, #1
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <_kill>:

int _kill(int pid, int sig)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b72:	f00b fb89 	bl	800d288 <__errno>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2216      	movs	r2, #22
 8001b7a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <_exit>:

void _exit (int status)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b90:	f04f 31ff 	mov.w	r1, #4294967295
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff ffe7 	bl	8001b68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b9a:	bf00      	nop
 8001b9c:	e7fd      	b.n	8001b9a <_exit+0x12>

08001b9e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b086      	sub	sp, #24
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	60f8      	str	r0, [r7, #12]
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	e00a      	b.n	8001bc6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bb0:	f3af 8000 	nop.w
 8001bb4:	4601      	mov	r1, r0
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	60ba      	str	r2, [r7, #8]
 8001bbc:	b2ca      	uxtb	r2, r1
 8001bbe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	dbf0      	blt.n	8001bb0 <_read+0x12>
  }

  return len;
 8001bce:	687b      	ldr	r3, [r7, #4]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	e009      	b.n	8001bfe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	60ba      	str	r2, [r7, #8]
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	dbf1      	blt.n	8001bea <_write+0x12>
  }
  return len;
 8001c06:	687b      	ldr	r3, [r7, #4]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <_close>:

int _close(int file)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c38:	605a      	str	r2, [r3, #4]
  return 0;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <_isatty>:

int _isatty(int file)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c50:	2301      	movs	r3, #1
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b085      	sub	sp, #20
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c80:	4a14      	ldr	r2, [pc, #80]	@ (8001cd4 <_sbrk+0x5c>)
 8001c82:	4b15      	ldr	r3, [pc, #84]	@ (8001cd8 <_sbrk+0x60>)
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c8c:	4b13      	ldr	r3, [pc, #76]	@ (8001cdc <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d102      	bne.n	8001c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c94:	4b11      	ldr	r3, [pc, #68]	@ (8001cdc <_sbrk+0x64>)
 8001c96:	4a12      	ldr	r2, [pc, #72]	@ (8001ce0 <_sbrk+0x68>)
 8001c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c9a:	4b10      	ldr	r3, [pc, #64]	@ (8001cdc <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d207      	bcs.n	8001cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca8:	f00b faee 	bl	800d288 <__errno>
 8001cac:	4603      	mov	r3, r0
 8001cae:	220c      	movs	r2, #12
 8001cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb6:	e009      	b.n	8001ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb8:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <_sbrk+0x64>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cbe:	4b07      	ldr	r3, [pc, #28]	@ (8001cdc <_sbrk+0x64>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4a05      	ldr	r2, [pc, #20]	@ (8001cdc <_sbrk+0x64>)
 8001cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cca:	68fb      	ldr	r3, [r7, #12]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20008000 	.word	0x20008000
 8001cd8:	00000400 	.word	0x00000400
 8001cdc:	2000042c 	.word	0x2000042c
 8001ce0:	20000af0 	.word	0x20000af0

08001ce4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ce8:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <SystemInit+0x20>)
 8001cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cee:	4a05      	ldr	r2, [pc, #20]	@ (8001d04 <SystemInit+0x20>)
 8001cf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b09c      	sub	sp, #112	@ 0x70
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d0e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d1c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d28:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
 8001d38:	615a      	str	r2, [r3, #20]
 8001d3a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	2234      	movs	r2, #52	@ 0x34
 8001d40:	2100      	movs	r1, #0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f00b fa3c 	bl	800d1c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d48:	4b5b      	ldr	r3, [pc, #364]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001d4a:	4a5c      	ldr	r2, [pc, #368]	@ (8001ebc <MX_TIM1_Init+0x1b4>)
 8001d4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8001d4e:	4b5a      	ldr	r3, [pc, #360]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001d54:	4b58      	ldr	r3, [pc, #352]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001d56:	2220      	movs	r2, #32
 8001d58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 8001d5a:	4b57      	ldr	r3, [pc, #348]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001d5c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001d60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001d62:	4b55      	ldr	r3, [pc, #340]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001d64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d68:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8001d6a:	4b53      	ldr	r3, [pc, #332]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d70:	4b51      	ldr	r3, [pc, #324]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d76:	4850      	ldr	r0, [pc, #320]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001d78:	f005 fbb6 	bl	80074e8 <HAL_TIM_Base_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001d82:	f7ff fd52 	bl	800182a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d8a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d8c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d90:	4619      	mov	r1, r3
 8001d92:	4849      	ldr	r0, [pc, #292]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001d94:	f005 ff6e 	bl	8007c74 <HAL_TIM_ConfigClockSource>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001d9e:	f7ff fd44 	bl	800182a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001da2:	4845      	ldr	r0, [pc, #276]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001da4:	f005 fc5a 	bl	800765c <HAL_TIM_PWM_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001dae:	f7ff fd3c 	bl	800182a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001db2:	2370      	movs	r3, #112	@ 0x70
 8001db4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001db6:	2300      	movs	r3, #0
 8001db8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dbe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	483c      	ldr	r0, [pc, #240]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001dc6:	f006 fca3 	bl	8008710 <HAL_TIMEx_MasterConfigSynchronization>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001dd0:	f7ff fd2b 	bl	800182a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dd4:	2360      	movs	r3, #96	@ 0x60
 8001dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001de0:	2300      	movs	r3, #0
 8001de2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001de8:	2300      	movs	r3, #0
 8001dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dec:	2300      	movs	r3, #0
 8001dee:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001df0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001df4:	2200      	movs	r2, #0
 8001df6:	4619      	mov	r1, r3
 8001df8:	482f      	ldr	r0, [pc, #188]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001dfa:	f005 fe27 	bl	8007a4c <HAL_TIM_PWM_ConfigChannel>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001e04:	f7ff fd11 	bl	800182a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e08:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4829      	ldr	r0, [pc, #164]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001e12:	f005 fe1b 	bl	8007a4c <HAL_TIM_PWM_ConfigChannel>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001e1c:	f7ff fd05 	bl	800182a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e20:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e24:	2208      	movs	r2, #8
 8001e26:	4619      	mov	r1, r3
 8001e28:	4823      	ldr	r0, [pc, #140]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001e2a:	f005 fe0f 	bl	8007a4c <HAL_TIM_PWM_ConfigChannel>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001e34:	f7ff fcf9 	bl	800182a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001e38:	2370      	movs	r3, #112	@ 0x70
 8001e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 7998;
 8001e3c:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 8001e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e42:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e46:	220c      	movs	r2, #12
 8001e48:	4619      	mov	r1, r3
 8001e4a:	481b      	ldr	r0, [pc, #108]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001e4c:	f005 fdfe 	bl	8007a4c <HAL_TIM_PWM_ConfigChannel>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8001e56:	f7ff fce8 	bl	800182a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001e6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e6e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e74:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 2;
 8001e76:	2302      	movs	r3, #2
 8001e78:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e86:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e94:	1d3b      	adds	r3, r7, #4
 8001e96:	4619      	mov	r1, r3
 8001e98:	4807      	ldr	r0, [pc, #28]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001e9a:	f006 fcbb 	bl	8008814 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_TIM1_Init+0x1a0>
  {
    Error_Handler();
 8001ea4:	f7ff fcc1 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ea8:	4803      	ldr	r0, [pc, #12]	@ (8001eb8 <MX_TIM1_Init+0x1b0>)
 8001eaa:	f000 f917 	bl	80020dc <HAL_TIM_MspPostInit>

}
 8001eae:	bf00      	nop
 8001eb0:	3770      	adds	r7, #112	@ 0x70
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000430 	.word	0x20000430
 8001ebc:	40012c00 	.word	0x40012c00

08001ec0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b09c      	sub	sp, #112	@ 0x70
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ec6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ee0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
 8001ef0:	615a      	str	r2, [r3, #20]
 8001ef2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	2234      	movs	r2, #52	@ 0x34
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f00b f960 	bl	800d1c0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001f00:	4b5a      	ldr	r3, [pc, #360]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8001f02:	4a5b      	ldr	r2, [pc, #364]	@ (8002070 <MX_TIM8_Init+0x1b0>)
 8001f04:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001f06:	4b59      	ldr	r3, [pc, #356]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001f0c:	4b57      	ldr	r3, [pc, #348]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8001f0e:	2220      	movs	r2, #32
 8001f10:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7999;
 8001f12:	4b56      	ldr	r3, [pc, #344]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8001f14:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001f18:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001f1a:	4b54      	ldr	r3, [pc, #336]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8001f1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f20:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 1;
 8001f22:	4b52      	ldr	r3, [pc, #328]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f28:	4b50      	ldr	r3, [pc, #320]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001f2e:	484f      	ldr	r0, [pc, #316]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8001f30:	f005 fada 	bl	80074e8 <HAL_TIM_Base_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8001f3a:	f7ff fc76 	bl	800182a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f42:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001f44:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4848      	ldr	r0, [pc, #288]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8001f4c:	f005 fe92 	bl	8007c74 <HAL_TIM_ConfigClockSource>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8001f56:	f7ff fc68 	bl	800182a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001f5a:	4844      	ldr	r0, [pc, #272]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8001f5c:	f005 fb7e 	bl	800765c <HAL_TIM_PWM_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8001f66:	f7ff fc60 	bl	800182a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001f6a:	2370      	movs	r3, #112	@ 0x70
 8001f6c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f72:	2300      	movs	r3, #0
 8001f74:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f76:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	483b      	ldr	r0, [pc, #236]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8001f7e:	f006 fbc7 	bl	8008710 <HAL_TIMEx_MasterConfigSynchronization>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8001f88:	f7ff fc4f 	bl	800182a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f8c:	2360      	movs	r3, #96	@ 0x60
 8001f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f94:	2300      	movs	r3, #0
 8001f96:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fa8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001fac:	2200      	movs	r2, #0
 8001fae:	4619      	mov	r1, r3
 8001fb0:	482e      	ldr	r0, [pc, #184]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8001fb2:	f005 fd4b 	bl	8007a4c <HAL_TIM_PWM_ConfigChannel>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001fbc:	f7ff fc35 	bl	800182a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fc0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4828      	ldr	r0, [pc, #160]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8001fca:	f005 fd3f 	bl	8007a4c <HAL_TIM_PWM_ConfigChannel>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8001fd4:	f7ff fc29 	bl	800182a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fd8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001fdc:	2208      	movs	r2, #8
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4822      	ldr	r0, [pc, #136]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8001fe2:	f005 fd33 	bl	8007a4c <HAL_TIM_PWM_ConfigChannel>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8001fec:	f7ff fc1d 	bl	800182a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001ff0:	2370      	movs	r3, #112	@ 0x70
 8001ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 7998;
 8001ff4:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 8001ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ffa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ffe:	220c      	movs	r2, #12
 8002000:	4619      	mov	r1, r3
 8002002:	481a      	ldr	r0, [pc, #104]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8002004:	f005 fd22 	bl	8007a4c <HAL_TIM_PWM_ConfigChannel>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_TIM8_Init+0x152>
  {
    Error_Handler();
 800200e:	f7ff fc0c 	bl	800182a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002016:	2300      	movs	r3, #0
 8002018:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002026:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800202a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002030:	2300      	movs	r3, #0
 8002032:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002034:	2300      	movs	r3, #0
 8002036:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002038:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800203c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002042:	2300      	movs	r3, #0
 8002044:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002046:	2300      	movs	r3, #0
 8002048:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800204a:	1d3b      	adds	r3, r7, #4
 800204c:	4619      	mov	r1, r3
 800204e:	4807      	ldr	r0, [pc, #28]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8002050:	f006 fbe0 	bl	8008814 <HAL_TIMEx_ConfigBreakDeadTime>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM8_Init+0x19e>
  {
    Error_Handler();
 800205a:	f7ff fbe6 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800205e:	4803      	ldr	r0, [pc, #12]	@ (800206c <MX_TIM8_Init+0x1ac>)
 8002060:	f000 f83c 	bl	80020dc <HAL_TIM_MspPostInit>

}
 8002064:	bf00      	nop
 8002066:	3770      	adds	r7, #112	@ 0x70
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	2000047c 	.word	0x2000047c
 8002070:	40013400 	.word	0x40013400

08002074 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a13      	ldr	r2, [pc, #76]	@ (80020d0 <HAL_TIM_Base_MspInit+0x5c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d10c      	bne.n	80020a0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002086:	4b13      	ldr	r3, [pc, #76]	@ (80020d4 <HAL_TIM_Base_MspInit+0x60>)
 8002088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800208a:	4a12      	ldr	r2, [pc, #72]	@ (80020d4 <HAL_TIM_Base_MspInit+0x60>)
 800208c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002090:	6613      	str	r3, [r2, #96]	@ 0x60
 8002092:	4b10      	ldr	r3, [pc, #64]	@ (80020d4 <HAL_TIM_Base_MspInit+0x60>)
 8002094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002096:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800209e:	e010      	b.n	80020c2 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM8)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a0c      	ldr	r2, [pc, #48]	@ (80020d8 <HAL_TIM_Base_MspInit+0x64>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d10b      	bne.n	80020c2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80020aa:	4b0a      	ldr	r3, [pc, #40]	@ (80020d4 <HAL_TIM_Base_MspInit+0x60>)
 80020ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ae:	4a09      	ldr	r2, [pc, #36]	@ (80020d4 <HAL_TIM_Base_MspInit+0x60>)
 80020b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80020b6:	4b07      	ldr	r3, [pc, #28]	@ (80020d4 <HAL_TIM_Base_MspInit+0x60>)
 80020b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	68bb      	ldr	r3, [r7, #8]
}
 80020c2:	bf00      	nop
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40012c00 	.word	0x40012c00
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40013400 	.word	0x40013400

080020dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	@ 0x28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a2b      	ldr	r2, [pc, #172]	@ (80021a8 <HAL_TIM_MspPostInit+0xcc>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d11e      	bne.n	800213c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fe:	4b2b      	ldr	r3, [pc, #172]	@ (80021ac <HAL_TIM_MspPostInit+0xd0>)
 8002100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002102:	4a2a      	ldr	r2, [pc, #168]	@ (80021ac <HAL_TIM_MspPostInit+0xd0>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800210a:	4b28      	ldr	r3, [pc, #160]	@ (80021ac <HAL_TIM_MspPostInit+0xd0>)
 800210c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002116:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800211a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211c:	2302      	movs	r3, #2
 800211e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002124:	2300      	movs	r3, #0
 8002126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002128:	2306      	movs	r3, #6
 800212a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	4619      	mov	r1, r3
 8002132:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002136:	f003 fc2b 	bl	8005990 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800213a:	e031      	b.n	80021a0 <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM8)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a1b      	ldr	r2, [pc, #108]	@ (80021b0 <HAL_TIM_MspPostInit+0xd4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d12c      	bne.n	80021a0 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002146:	4b19      	ldr	r3, [pc, #100]	@ (80021ac <HAL_TIM_MspPostInit+0xd0>)
 8002148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800214a:	4a18      	ldr	r2, [pc, #96]	@ (80021ac <HAL_TIM_MspPostInit+0xd0>)
 800214c:	f043 0302 	orr.w	r3, r3, #2
 8002150:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002152:	4b16      	ldr	r3, [pc, #88]	@ (80021ac <HAL_TIM_MspPostInit+0xd0>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800215e:	2340      	movs	r3, #64	@ 0x40
 8002160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2302      	movs	r3, #2
 8002164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216a:	2300      	movs	r3, #0
 800216c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 800216e:	2305      	movs	r3, #5
 8002170:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002172:	f107 0314 	add.w	r3, r7, #20
 8002176:	4619      	mov	r1, r3
 8002178:	480e      	ldr	r0, [pc, #56]	@ (80021b4 <HAL_TIM_MspPostInit+0xd8>)
 800217a:	f003 fc09 	bl	8005990 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800217e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002184:	2302      	movs	r3, #2
 8002186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218c:	2300      	movs	r3, #0
 800218e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8002190:	230a      	movs	r3, #10
 8002192:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002194:	f107 0314 	add.w	r3, r7, #20
 8002198:	4619      	mov	r1, r3
 800219a:	4806      	ldr	r0, [pc, #24]	@ (80021b4 <HAL_TIM_MspPostInit+0xd8>)
 800219c:	f003 fbf8 	bl	8005990 <HAL_GPIO_Init>
}
 80021a0:	bf00      	nop
 80021a2:	3728      	adds	r7, #40	@ 0x28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40012c00 	.word	0x40012c00
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40013400 	.word	0x40013400
 80021b4:	48000400 	.word	0x48000400

080021b8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021bc:	4b22      	ldr	r3, [pc, #136]	@ (8002248 <MX_USART3_UART_Init+0x90>)
 80021be:	4a23      	ldr	r2, [pc, #140]	@ (800224c <MX_USART3_UART_Init+0x94>)
 80021c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 80021c2:	4b21      	ldr	r3, [pc, #132]	@ (8002248 <MX_USART3_UART_Init+0x90>)
 80021c4:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80021c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002248 <MX_USART3_UART_Init+0x90>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002248 <MX_USART3_UART_Init+0x90>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002248 <MX_USART3_UART_Init+0x90>)
 80021d8:	2200      	movs	r2, #0
 80021da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002248 <MX_USART3_UART_Init+0x90>)
 80021de:	220c      	movs	r2, #12
 80021e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021e2:	4b19      	ldr	r3, [pc, #100]	@ (8002248 <MX_USART3_UART_Init+0x90>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021e8:	4b17      	ldr	r3, [pc, #92]	@ (8002248 <MX_USART3_UART_Init+0x90>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021ee:	4b16      	ldr	r3, [pc, #88]	@ (8002248 <MX_USART3_UART_Init+0x90>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021f4:	4b14      	ldr	r3, [pc, #80]	@ (8002248 <MX_USART3_UART_Init+0x90>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021fa:	4b13      	ldr	r3, [pc, #76]	@ (8002248 <MX_USART3_UART_Init+0x90>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002200:	4811      	ldr	r0, [pc, #68]	@ (8002248 <MX_USART3_UART_Init+0x90>)
 8002202:	f006 fb93 	bl	800892c <HAL_UART_Init>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800220c:	f7ff fb0d 	bl	800182a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002210:	2100      	movs	r1, #0
 8002212:	480d      	ldr	r0, [pc, #52]	@ (8002248 <MX_USART3_UART_Init+0x90>)
 8002214:	f008 f80f 	bl	800a236 <HAL_UARTEx_SetTxFifoThreshold>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800221e:	f7ff fb04 	bl	800182a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002222:	2100      	movs	r1, #0
 8002224:	4808      	ldr	r0, [pc, #32]	@ (8002248 <MX_USART3_UART_Init+0x90>)
 8002226:	f008 f844 	bl	800a2b2 <HAL_UARTEx_SetRxFifoThreshold>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002230:	f7ff fafb 	bl	800182a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002234:	4804      	ldr	r0, [pc, #16]	@ (8002248 <MX_USART3_UART_Init+0x90>)
 8002236:	f007 ffc5 	bl	800a1c4 <HAL_UARTEx_DisableFifoMode>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002240:	f7ff faf3 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002244:	bf00      	nop
 8002246:	bd80      	pop	{r7, pc}
 8002248:	200004c8 	.word	0x200004c8
 800224c:	40004800 	.word	0x40004800

08002250 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b09a      	sub	sp, #104	@ 0x68
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002258:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002268:	f107 0310 	add.w	r3, r7, #16
 800226c:	2244      	movs	r2, #68	@ 0x44
 800226e:	2100      	movs	r1, #0
 8002270:	4618      	mov	r0, r3
 8002272:	f00a ffa5 	bl	800d1c0 <memset>
  if(uartHandle->Instance==USART3)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a4d      	ldr	r2, [pc, #308]	@ (80023b0 <HAL_UART_MspInit+0x160>)
 800227c:	4293      	cmp	r3, r2
 800227e:	f040 8092 	bne.w	80023a6 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002282:	2304      	movs	r3, #4
 8002284:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800228a:	f107 0310 	add.w	r3, r7, #16
 800228e:	4618      	mov	r0, r3
 8002290:	f004 fafa 	bl	8006888 <HAL_RCCEx_PeriphCLKConfig>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800229a:	f7ff fac6 	bl	800182a <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800229e:	4b45      	ldr	r3, [pc, #276]	@ (80023b4 <HAL_UART_MspInit+0x164>)
 80022a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a2:	4a44      	ldr	r2, [pc, #272]	@ (80023b4 <HAL_UART_MspInit+0x164>)
 80022a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80022aa:	4b42      	ldr	r3, [pc, #264]	@ (80023b4 <HAL_UART_MspInit+0x164>)
 80022ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b6:	4b3f      	ldr	r3, [pc, #252]	@ (80023b4 <HAL_UART_MspInit+0x164>)
 80022b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ba:	4a3e      	ldr	r2, [pc, #248]	@ (80023b4 <HAL_UART_MspInit+0x164>)
 80022bc:	f043 0302 	orr.w	r3, r3, #2
 80022c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022c2:	4b3c      	ldr	r3, [pc, #240]	@ (80023b4 <HAL_UART_MspInit+0x164>)
 80022c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022ce:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80022d2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d4:	2302      	movs	r3, #2
 80022d6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022dc:	2300      	movs	r3, #0
 80022de:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022e0:	2307      	movs	r3, #7
 80022e2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022e8:	4619      	mov	r1, r3
 80022ea:	4833      	ldr	r0, [pc, #204]	@ (80023b8 <HAL_UART_MspInit+0x168>)
 80022ec:	f003 fb50 	bl	8005990 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel1;
 80022f0:	4b32      	ldr	r3, [pc, #200]	@ (80023bc <HAL_UART_MspInit+0x16c>)
 80022f2:	4a33      	ldr	r2, [pc, #204]	@ (80023c0 <HAL_UART_MspInit+0x170>)
 80022f4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80022f6:	4b31      	ldr	r3, [pc, #196]	@ (80023bc <HAL_UART_MspInit+0x16c>)
 80022f8:	221d      	movs	r2, #29
 80022fa:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022fc:	4b2f      	ldr	r3, [pc, #188]	@ (80023bc <HAL_UART_MspInit+0x16c>)
 80022fe:	2210      	movs	r2, #16
 8002300:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002302:	4b2e      	ldr	r3, [pc, #184]	@ (80023bc <HAL_UART_MspInit+0x16c>)
 8002304:	2200      	movs	r2, #0
 8002306:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002308:	4b2c      	ldr	r3, [pc, #176]	@ (80023bc <HAL_UART_MspInit+0x16c>)
 800230a:	2280      	movs	r2, #128	@ 0x80
 800230c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800230e:	4b2b      	ldr	r3, [pc, #172]	@ (80023bc <HAL_UART_MspInit+0x16c>)
 8002310:	2200      	movs	r2, #0
 8002312:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002314:	4b29      	ldr	r3, [pc, #164]	@ (80023bc <HAL_UART_MspInit+0x16c>)
 8002316:	2200      	movs	r2, #0
 8002318:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800231a:	4b28      	ldr	r3, [pc, #160]	@ (80023bc <HAL_UART_MspInit+0x16c>)
 800231c:	2200      	movs	r2, #0
 800231e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002320:	4b26      	ldr	r3, [pc, #152]	@ (80023bc <HAL_UART_MspInit+0x16c>)
 8002322:	2200      	movs	r2, #0
 8002324:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002326:	4825      	ldr	r0, [pc, #148]	@ (80023bc <HAL_UART_MspInit+0x16c>)
 8002328:	f003 f800 	bl	800532c <HAL_DMA_Init>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8002332:	f7ff fa7a 	bl	800182a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a20      	ldr	r2, [pc, #128]	@ (80023bc <HAL_UART_MspInit+0x16c>)
 800233a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800233c:	4a1f      	ldr	r2, [pc, #124]	@ (80023bc <HAL_UART_MspInit+0x16c>)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel2;
 8002342:	4b20      	ldr	r3, [pc, #128]	@ (80023c4 <HAL_UART_MspInit+0x174>)
 8002344:	4a20      	ldr	r2, [pc, #128]	@ (80023c8 <HAL_UART_MspInit+0x178>)
 8002346:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002348:	4b1e      	ldr	r3, [pc, #120]	@ (80023c4 <HAL_UART_MspInit+0x174>)
 800234a:	221c      	movs	r2, #28
 800234c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800234e:	4b1d      	ldr	r3, [pc, #116]	@ (80023c4 <HAL_UART_MspInit+0x174>)
 8002350:	2200      	movs	r2, #0
 8002352:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002354:	4b1b      	ldr	r3, [pc, #108]	@ (80023c4 <HAL_UART_MspInit+0x174>)
 8002356:	2200      	movs	r2, #0
 8002358:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800235a:	4b1a      	ldr	r3, [pc, #104]	@ (80023c4 <HAL_UART_MspInit+0x174>)
 800235c:	2280      	movs	r2, #128	@ 0x80
 800235e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002360:	4b18      	ldr	r3, [pc, #96]	@ (80023c4 <HAL_UART_MspInit+0x174>)
 8002362:	2200      	movs	r2, #0
 8002364:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002366:	4b17      	ldr	r3, [pc, #92]	@ (80023c4 <HAL_UART_MspInit+0x174>)
 8002368:	2200      	movs	r2, #0
 800236a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800236c:	4b15      	ldr	r3, [pc, #84]	@ (80023c4 <HAL_UART_MspInit+0x174>)
 800236e:	2200      	movs	r2, #0
 8002370:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002372:	4b14      	ldr	r3, [pc, #80]	@ (80023c4 <HAL_UART_MspInit+0x174>)
 8002374:	2200      	movs	r2, #0
 8002376:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002378:	4812      	ldr	r0, [pc, #72]	@ (80023c4 <HAL_UART_MspInit+0x174>)
 800237a:	f002 ffd7 	bl	800532c <HAL_DMA_Init>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8002384:	f7ff fa51 	bl	800182a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a0e      	ldr	r2, [pc, #56]	@ (80023c4 <HAL_UART_MspInit+0x174>)
 800238c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002390:	4a0c      	ldr	r2, [pc, #48]	@ (80023c4 <HAL_UART_MspInit+0x174>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8002396:	2200      	movs	r2, #0
 8002398:	2101      	movs	r1, #1
 800239a:	2027      	movs	r0, #39	@ 0x27
 800239c:	f002 fdb7 	bl	8004f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80023a0:	2027      	movs	r0, #39	@ 0x27
 80023a2:	f002 fdce 	bl	8004f42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80023a6:	bf00      	nop
 80023a8:	3768      	adds	r7, #104	@ 0x68
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40004800 	.word	0x40004800
 80023b4:	40021000 	.word	0x40021000
 80023b8:	48000400 	.word	0x48000400
 80023bc:	2000055c 	.word	0x2000055c
 80023c0:	40020008 	.word	0x40020008
 80023c4:	200005bc 	.word	0x200005bc
 80023c8:	4002001c 	.word	0x4002001c

080023cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023cc:	480d      	ldr	r0, [pc, #52]	@ (8002404 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023ce:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80023d0:	f7ff fc88 	bl	8001ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023d4:	480c      	ldr	r0, [pc, #48]	@ (8002408 <LoopForever+0x6>)
  ldr r1, =_edata
 80023d6:	490d      	ldr	r1, [pc, #52]	@ (800240c <LoopForever+0xa>)
  ldr r2, =_sidata
 80023d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002410 <LoopForever+0xe>)
  movs r3, #0
 80023da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80023dc:	e002      	b.n	80023e4 <LoopCopyDataInit>

080023de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023e2:	3304      	adds	r3, #4

080023e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e8:	d3f9      	bcc.n	80023de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002414 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002418 <LoopForever+0x16>)
  movs r3, #0
 80023ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f0:	e001      	b.n	80023f6 <LoopFillZerobss>

080023f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f4:	3204      	adds	r2, #4

080023f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f8:	d3fb      	bcc.n	80023f2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80023fa:	f00a ff4b 	bl	800d294 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023fe:	f7ff f95b 	bl	80016b8 <main>

08002402 <LoopForever>:

LoopForever:
    b LoopForever
 8002402:	e7fe      	b.n	8002402 <LoopForever>
  ldr   r0, =_estack
 8002404:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800240c:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 8002410:	08010240 	.word	0x08010240
  ldr r2, =_sbss
 8002414:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8002418:	20000af0 	.word	0x20000af0

0800241c <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800241c:	e7fe      	b.n	800241c <COMP1_2_3_IRQHandler>

0800241e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002428:	2003      	movs	r0, #3
 800242a:	f002 fd65 	bl	8004ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800242e:	200f      	movs	r0, #15
 8002430:	f000 f80e 	bl	8002450 <HAL_InitTick>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d002      	beq.n	8002440 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	71fb      	strb	r3, [r7, #7]
 800243e:	e001      	b.n	8002444 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002440:	f7ff fb0a 	bl	8001a58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002444:	79fb      	ldrb	r3, [r7, #7]

}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002458:	2300      	movs	r3, #0
 800245a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800245c:	4b16      	ldr	r3, [pc, #88]	@ (80024b8 <HAL_InitTick+0x68>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d022      	beq.n	80024aa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002464:	4b15      	ldr	r3, [pc, #84]	@ (80024bc <HAL_InitTick+0x6c>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4b13      	ldr	r3, [pc, #76]	@ (80024b8 <HAL_InitTick+0x68>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002470:	fbb1 f3f3 	udiv	r3, r1, r3
 8002474:	fbb2 f3f3 	udiv	r3, r2, r3
 8002478:	4618      	mov	r0, r3
 800247a:	f002 fd70 	bl	8004f5e <HAL_SYSTICK_Config>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10f      	bne.n	80024a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b0f      	cmp	r3, #15
 8002488:	d809      	bhi.n	800249e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800248a:	2200      	movs	r2, #0
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	f04f 30ff 	mov.w	r0, #4294967295
 8002492:	f002 fd3c 	bl	8004f0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002496:	4a0a      	ldr	r2, [pc, #40]	@ (80024c0 <HAL_InitTick+0x70>)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	e007      	b.n	80024ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	73fb      	strb	r3, [r7, #15]
 80024a2:	e004      	b.n	80024ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
 80024a8:	e001      	b.n	80024ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000008 	.word	0x20000008
 80024bc:	20000000 	.word	0x20000000
 80024c0:	20000004 	.word	0x20000004

080024c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024c8:	4b05      	ldr	r3, [pc, #20]	@ (80024e0 <HAL_IncTick+0x1c>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	4b05      	ldr	r3, [pc, #20]	@ (80024e4 <HAL_IncTick+0x20>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4413      	add	r3, r2
 80024d2:	4a03      	ldr	r2, [pc, #12]	@ (80024e0 <HAL_IncTick+0x1c>)
 80024d4:	6013      	str	r3, [r2, #0]
}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	2000061c 	.word	0x2000061c
 80024e4:	20000008 	.word	0x20000008

080024e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  return uwTick;
 80024ec:	4b03      	ldr	r3, [pc, #12]	@ (80024fc <HAL_GetTick+0x14>)
 80024ee:	681b      	ldr	r3, [r3, #0]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	2000061c 	.word	0x2000061c

08002500 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	609a      	str	r2, [r3, #8]
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	609a      	str	r2, [r3, #8]
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	3360      	adds	r3, #96	@ 0x60
 800257a:	461a      	mov	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b08      	ldr	r3, [pc, #32]	@ (80025ac <LL_ADC_SetOffset+0x44>)
 800258a:	4013      	ands	r3, r2
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	4313      	orrs	r3, r2
 8002598:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80025a0:	bf00      	nop
 80025a2:	371c      	adds	r7, #28
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	03fff000 	.word	0x03fff000

080025b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3360      	adds	r3, #96	@ 0x60
 80025be:	461a      	mov	r2, r3
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80025dc:	b480      	push	{r7}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	3360      	adds	r3, #96	@ 0x60
 80025ec:	461a      	mov	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	431a      	orrs	r2, r3
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002606:	bf00      	nop
 8002608:	371c      	adds	r7, #28
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002612:	b480      	push	{r7}
 8002614:	b087      	sub	sp, #28
 8002616:	af00      	add	r7, sp, #0
 8002618:	60f8      	str	r0, [r7, #12]
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	3360      	adds	r3, #96	@ 0x60
 8002622:	461a      	mov	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	431a      	orrs	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800263c:	bf00      	nop
 800263e:	371c      	adds	r7, #28
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002648:	b480      	push	{r7}
 800264a:	b087      	sub	sp, #28
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	3360      	adds	r3, #96	@ 0x60
 8002658:	461a      	mov	r2, r3
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	431a      	orrs	r2, r3
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002672:	bf00      	nop
 8002674:	371c      	adds	r7, #28
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	615a      	str	r2, [r3, #20]
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b087      	sub	sp, #28
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	60f8      	str	r0, [r7, #12]
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	3330      	adds	r3, #48	@ 0x30
 80026da:	461a      	mov	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	0a1b      	lsrs	r3, r3, #8
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	f003 030c 	and.w	r3, r3, #12
 80026e6:	4413      	add	r3, r2
 80026e8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	211f      	movs	r1, #31
 80026f6:	fa01 f303 	lsl.w	r3, r1, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	401a      	ands	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	0e9b      	lsrs	r3, r3, #26
 8002702:	f003 011f 	and.w	r1, r3, #31
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	fa01 f303 	lsl.w	r3, r1, r3
 8002710:	431a      	orrs	r2, r3
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002716:	bf00      	nop
 8002718:	371c      	adds	r7, #28
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002748:	b480      	push	{r7}
 800274a:	b087      	sub	sp, #28
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	3314      	adds	r3, #20
 8002758:	461a      	mov	r2, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	0e5b      	lsrs	r3, r3, #25
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	4413      	add	r3, r2
 8002766:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	0d1b      	lsrs	r3, r3, #20
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	2107      	movs	r1, #7
 8002776:	fa01 f303 	lsl.w	r3, r1, r3
 800277a:	43db      	mvns	r3, r3
 800277c:	401a      	ands	r2, r3
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	0d1b      	lsrs	r3, r3, #20
 8002782:	f003 031f 	and.w	r3, r3, #31
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	fa01 f303 	lsl.w	r3, r1, r3
 800278c:	431a      	orrs	r2, r3
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002792:	bf00      	nop
 8002794:	371c      	adds	r7, #28
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b8:	43db      	mvns	r3, r3
 80027ba:	401a      	ands	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f003 0318 	and.w	r3, r3, #24
 80027c2:	4908      	ldr	r1, [pc, #32]	@ (80027e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80027c4:	40d9      	lsrs	r1, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	400b      	ands	r3, r1
 80027ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ce:	431a      	orrs	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80027d6:	bf00      	nop
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	0007ffff 	.word	0x0007ffff

080027e8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 031f 	and.w	r3, r3, #31
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002830:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6093      	str	r3, [r2, #8]
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002854:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002858:	d101      	bne.n	800285e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800287c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002880:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028a8:	d101      	bne.n	80028ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028d0:	f043 0201 	orr.w	r2, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028f8:	f043 0202 	orr.w	r2, r3, #2
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <LL_ADC_IsEnabled+0x18>
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <LL_ADC_IsEnabled+0x1a>
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b02      	cmp	r3, #2
 8002944:	d101      	bne.n	800294a <LL_ADC_IsDisableOngoing+0x18>
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <LL_ADC_IsDisableOngoing+0x1a>
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b04      	cmp	r3, #4
 800296a:	d101      	bne.n	8002970 <LL_ADC_REG_IsConversionOngoing+0x18>
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b08      	cmp	r3, #8
 8002990:	d101      	bne.n	8002996 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029a4:	b590      	push	{r4, r7, lr}
 80029a6:	b089      	sub	sp, #36	@ 0x24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e167      	b.n	8002c8e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d109      	bne.n	80029e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7fe fc6b 	bl	80012a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff ff2d 	bl	8002844 <LL_ADC_IsDeepPowerDownEnabled>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d004      	beq.n	80029fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff13 	bl	8002820 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff ff48 	bl	8002894 <LL_ADC_IsInternalRegulatorEnabled>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d115      	bne.n	8002a36 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff ff2c 	bl	800286c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a14:	4ba0      	ldr	r3, [pc, #640]	@ (8002c98 <HAL_ADC_Init+0x2f4>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	099b      	lsrs	r3, r3, #6
 8002a1a:	4aa0      	ldr	r2, [pc, #640]	@ (8002c9c <HAL_ADC_Init+0x2f8>)
 8002a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a20:	099b      	lsrs	r3, r3, #6
 8002a22:	3301      	adds	r3, #1
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a28:	e002      	b.n	8002a30 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f9      	bne.n	8002a2a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff ff2a 	bl	8002894 <LL_ADC_IsInternalRegulatorEnabled>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10d      	bne.n	8002a62 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a4a:	f043 0210 	orr.w	r2, r3, #16
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a56:	f043 0201 	orr.w	r2, r3, #1
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff ff76 	bl	8002958 <LL_ADC_REG_IsConversionOngoing>
 8002a6c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a72:	f003 0310 	and.w	r3, r3, #16
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f040 8100 	bne.w	8002c7c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f040 80fc 	bne.w	8002c7c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a88:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002a8c:	f043 0202 	orr.w	r2, r3, #2
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff ff37 	bl	800290c <LL_ADC_IsEnabled>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d111      	bne.n	8002ac8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aa4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002aa8:	f7ff ff30 	bl	800290c <LL_ADC_IsEnabled>
 8002aac:	4604      	mov	r4, r0
 8002aae:	487c      	ldr	r0, [pc, #496]	@ (8002ca0 <HAL_ADC_Init+0x2fc>)
 8002ab0:	f7ff ff2c 	bl	800290c <LL_ADC_IsEnabled>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	4323      	orrs	r3, r4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d105      	bne.n	8002ac8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4878      	ldr	r0, [pc, #480]	@ (8002ca4 <HAL_ADC_Init+0x300>)
 8002ac4:	f7ff fd1c 	bl	8002500 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	7f5b      	ldrb	r3, [r3, #29]
 8002acc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ad2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002ad8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002ade:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ae6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d106      	bne.n	8002b04 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002afa:	3b01      	subs	r3, #1
 8002afc:	045b      	lsls	r3, r3, #17
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d009      	beq.n	8002b20 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b10:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b18:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	4b60      	ldr	r3, [pc, #384]	@ (8002ca8 <HAL_ADC_Init+0x304>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	69b9      	ldr	r1, [r7, #24]
 8002b30:	430b      	orrs	r3, r1
 8002b32:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff ff15 	bl	800297e <LL_ADC_INJ_IsConversionOngoing>
 8002b54:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d16d      	bne.n	8002c38 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d16a      	bne.n	8002c38 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b66:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b6e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b7e:	f023 0302 	bic.w	r3, r3, #2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6812      	ldr	r2, [r2, #0]
 8002b86:	69b9      	ldr	r1, [r7, #24]
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d017      	beq.n	8002bc4 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691a      	ldr	r2, [r3, #16]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002ba2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002bac:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002bb0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6911      	ldr	r1, [r2, #16]
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	430b      	orrs	r3, r1
 8002bbe:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002bc2:	e013      	b.n	8002bec <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691a      	ldr	r2, [r3, #16]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002bd2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002be4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002be8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d118      	bne.n	8002c28 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002c00:	f023 0304 	bic.w	r3, r3, #4
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c0c:	4311      	orrs	r1, r2
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002c12:	4311      	orrs	r1, r2
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f042 0201 	orr.w	r2, r2, #1
 8002c24:	611a      	str	r2, [r3, #16]
 8002c26:	e007      	b.n	8002c38 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691a      	ldr	r2, [r3, #16]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0201 	bic.w	r2, r2, #1
 8002c36:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d10c      	bne.n	8002c5a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c46:	f023 010f 	bic.w	r1, r3, #15
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	1e5a      	subs	r2, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c58:	e007      	b.n	8002c6a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 020f 	bic.w	r2, r2, #15
 8002c68:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6e:	f023 0303 	bic.w	r3, r3, #3
 8002c72:	f043 0201 	orr.w	r2, r3, #1
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c7a:	e007      	b.n	8002c8c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c80:	f043 0210 	orr.w	r2, r3, #16
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3724      	adds	r7, #36	@ 0x24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd90      	pop	{r4, r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000000 	.word	0x20000000
 8002c9c:	053e2d63 	.word	0x053e2d63
 8002ca0:	50000100 	.word	0x50000100
 8002ca4:	50000300 	.word	0x50000300
 8002ca8:	fff04007 	.word	0xfff04007

08002cac <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08a      	sub	sp, #40	@ 0x28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cc8:	4883      	ldr	r0, [pc, #524]	@ (8002ed8 <HAL_ADC_IRQHandler+0x22c>)
 8002cca:	f7ff fd8d 	bl	80027e8 <LL_ADC_GetMultimode>
 8002cce:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d017      	beq.n	8002d0a <HAL_ADC_IRQHandler+0x5e>
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d012      	beq.n	8002d0a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d105      	bne.n	8002cfc <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf4:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f001 fa9d 	bl	800423c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2202      	movs	r2, #2
 8002d08:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d004      	beq.n	8002d1e <HAL_ADC_IRQHandler+0x72>
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10a      	bne.n	8002d34 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 8085 	beq.w	8002e34 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d07f      	beq.n	8002e34 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d38:	f003 0310 	and.w	r3, r3, #16
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d105      	bne.n	8002d4c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d44:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff fca7 	bl	80026a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d064      	beq.n	8002e26 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a5e      	ldr	r2, [pc, #376]	@ (8002edc <HAL_ADC_IRQHandler+0x230>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d002      	beq.n	8002d6c <HAL_ADC_IRQHandler+0xc0>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	e001      	b.n	8002d70 <HAL_ADC_IRQHandler+0xc4>
 8002d6c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6812      	ldr	r2, [r2, #0]
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d008      	beq.n	8002d8a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d005      	beq.n	8002d8a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2b05      	cmp	r3, #5
 8002d82:	d002      	beq.n	8002d8a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	2b09      	cmp	r3, #9
 8002d88:	d104      	bne.n	8002d94 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	623b      	str	r3, [r7, #32]
 8002d92:	e00d      	b.n	8002db0 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a50      	ldr	r2, [pc, #320]	@ (8002edc <HAL_ADC_IRQHandler+0x230>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d002      	beq.n	8002da4 <HAL_ADC_IRQHandler+0xf8>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	e001      	b.n	8002da8 <HAL_ADC_IRQHandler+0xfc>
 8002da4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002da8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d135      	bne.n	8002e26 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0308 	and.w	r3, r3, #8
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	d12e      	bne.n	8002e26 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff fdc3 	bl	8002958 <LL_ADC_REG_IsConversionOngoing>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d11a      	bne.n	8002e0e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 020c 	bic.w	r2, r2, #12
 8002de6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d112      	bne.n	8002e26 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e04:	f043 0201 	orr.w	r2, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e0c:	e00b      	b.n	8002e26 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e12:	f043 0210 	orr.w	r2, r3, #16
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e1e:	f043 0201 	orr.w	r2, r3, #1
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f95a 	bl	80030e0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	220c      	movs	r2, #12
 8002e32:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f003 0320 	and.w	r3, r3, #32
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d004      	beq.n	8002e48 <HAL_ADC_IRQHandler+0x19c>
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10b      	bne.n	8002e60 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 809e 	beq.w	8002f90 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 8098 	beq.w	8002f90 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e64:	f003 0310 	and.w	r3, r3, #16
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d105      	bne.n	8002e78 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e70:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff fc50 	bl	8002722 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002e82:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff fc0b 	bl	80026a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e8e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a11      	ldr	r2, [pc, #68]	@ (8002edc <HAL_ADC_IRQHandler+0x230>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d002      	beq.n	8002ea0 <HAL_ADC_IRQHandler+0x1f4>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	e001      	b.n	8002ea4 <HAL_ADC_IRQHandler+0x1f8>
 8002ea0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d008      	beq.n	8002ebe <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d005      	beq.n	8002ebe <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2b06      	cmp	r3, #6
 8002eb6:	d002      	beq.n	8002ebe <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2b07      	cmp	r3, #7
 8002ebc:	d104      	bne.n	8002ec8 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	623b      	str	r3, [r7, #32]
 8002ec6:	e011      	b.n	8002eec <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a03      	ldr	r2, [pc, #12]	@ (8002edc <HAL_ADC_IRQHandler+0x230>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d006      	beq.n	8002ee0 <HAL_ADC_IRQHandler+0x234>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	e005      	b.n	8002ee4 <HAL_ADC_IRQHandler+0x238>
 8002ed8:	50000300 	.word	0x50000300
 8002edc:	50000100 	.word	0x50000100
 8002ee0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002ee4:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d047      	beq.n	8002f82 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d007      	beq.n	8002f0c <HAL_ADC_IRQHandler+0x260>
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d03f      	beq.n	8002f82 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d13a      	bne.n	8002f82 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f16:	2b40      	cmp	r3, #64	@ 0x40
 8002f18:	d133      	bne.n	8002f82 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d12e      	bne.n	8002f82 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff fd28 	bl	800297e <LL_ADC_INJ_IsConversionOngoing>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d11a      	bne.n	8002f6a <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002f42:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d112      	bne.n	8002f82 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f60:	f043 0201 	orr.w	r2, r3, #1
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f68:	e00b      	b.n	8002f82 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f6e:	f043 0210 	orr.w	r2, r3, #16
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f7a:	f043 0201 	orr.w	r2, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f007 ffe8 	bl	800af58 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2260      	movs	r2, #96	@ 0x60
 8002f8e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d011      	beq.n	8002fbe <HAL_ADC_IRQHandler+0x312>
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00c      	beq.n	8002fbe <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f89f 	bl	80030f4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2280      	movs	r2, #128	@ 0x80
 8002fbc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d012      	beq.n	8002fee <HAL_ADC_IRQHandler+0x342>
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00d      	beq.n	8002fee <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f001 f918 	bl	8004214 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d012      	beq.n	800301e <HAL_ADC_IRQHandler+0x372>
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00d      	beq.n	800301e <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003006:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f001 f90a 	bl	8004228 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800301c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2b00      	cmp	r3, #0
 8003026:	d036      	beq.n	8003096 <HAL_ADC_IRQHandler+0x3ea>
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	2b00      	cmp	r3, #0
 8003030:	d031      	beq.n	8003096 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003036:	2b00      	cmp	r3, #0
 8003038:	d102      	bne.n	8003040 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 800303a:	2301      	movs	r3, #1
 800303c:	627b      	str	r3, [r7, #36]	@ 0x24
 800303e:	e014      	b.n	800306a <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d008      	beq.n	8003058 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003046:	4825      	ldr	r0, [pc, #148]	@ (80030dc <HAL_ADC_IRQHandler+0x430>)
 8003048:	f7ff fbdc 	bl	8002804 <LL_ADC_GetMultiDMATransfer>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00b      	beq.n	800306a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003052:	2301      	movs	r3, #1
 8003054:	627b      	str	r3, [r7, #36]	@ 0x24
 8003056:	e008      	b.n	800306a <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003066:	2301      	movs	r3, #1
 8003068:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306c:	2b01      	cmp	r3, #1
 800306e:	d10e      	bne.n	800308e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003074:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003080:	f043 0202 	orr.w	r2, r3, #2
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f83d 	bl	8003108 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2210      	movs	r2, #16
 8003094:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800309c:	2b00      	cmp	r3, #0
 800309e:	d018      	beq.n	80030d2 <HAL_ADC_IRQHandler+0x426>
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d013      	beq.n	80030d2 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ae:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ba:	f043 0208 	orr.w	r2, r3, #8
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030ca:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f001 f897 	bl	8004200 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80030d2:	bf00      	nop
 80030d4:	3728      	adds	r7, #40	@ 0x28
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	50000300 	.word	0x50000300

080030e0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b0b6      	sub	sp, #216	@ 0xd8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800312c:	2300      	movs	r3, #0
 800312e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <HAL_ADC_ConfigChannel+0x22>
 800313a:	2302      	movs	r3, #2
 800313c:	e3c8      	b.n	80038d0 <HAL_ADC_ConfigChannel+0x7b4>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff fc04 	bl	8002958 <LL_ADC_REG_IsConversionOngoing>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	f040 83ad 	bne.w	80038b2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6818      	ldr	r0, [r3, #0]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	6859      	ldr	r1, [r3, #4]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	461a      	mov	r2, r3
 8003166:	f7ff fab0 	bl	80026ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff fbf2 	bl	8002958 <LL_ADC_REG_IsConversionOngoing>
 8003174:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff fbfe 	bl	800297e <LL_ADC_INJ_IsConversionOngoing>
 8003182:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003186:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800318a:	2b00      	cmp	r3, #0
 800318c:	f040 81d9 	bne.w	8003542 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003190:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003194:	2b00      	cmp	r3, #0
 8003196:	f040 81d4 	bne.w	8003542 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80031a2:	d10f      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6818      	ldr	r0, [r3, #0]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2200      	movs	r2, #0
 80031ae:	4619      	mov	r1, r3
 80031b0:	f7ff faca 	bl	8002748 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff fa5e 	bl	800267e <LL_ADC_SetSamplingTimeCommonConfig>
 80031c2:	e00e      	b.n	80031e2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6818      	ldr	r0, [r3, #0]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	6819      	ldr	r1, [r3, #0]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	461a      	mov	r2, r3
 80031d2:	f7ff fab9 	bl	8002748 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2100      	movs	r1, #0
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fa4e 	bl	800267e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	695a      	ldr	r2, [r3, #20]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	08db      	lsrs	r3, r3, #3
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	2b04      	cmp	r3, #4
 8003202:	d022      	beq.n	800324a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6818      	ldr	r0, [r3, #0]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	6919      	ldr	r1, [r3, #16]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003214:	f7ff f9a8 	bl	8002568 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6818      	ldr	r0, [r3, #0]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	6919      	ldr	r1, [r3, #16]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	461a      	mov	r2, r3
 8003226:	f7ff f9f4 	bl	8002612 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6818      	ldr	r0, [r3, #0]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003236:	2b01      	cmp	r3, #1
 8003238:	d102      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x124>
 800323a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800323e:	e000      	b.n	8003242 <HAL_ADC_ConfigChannel+0x126>
 8003240:	2300      	movs	r3, #0
 8003242:	461a      	mov	r2, r3
 8003244:	f7ff fa00 	bl	8002648 <LL_ADC_SetOffsetSaturation>
 8003248:	e17b      	b.n	8003542 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2100      	movs	r1, #0
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff f9ad 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 8003256:	4603      	mov	r3, r0
 8003258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10a      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x15a>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2100      	movs	r1, #0
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff f9a2 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 800326c:	4603      	mov	r3, r0
 800326e:	0e9b      	lsrs	r3, r3, #26
 8003270:	f003 021f 	and.w	r2, r3, #31
 8003274:	e01e      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x198>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2100      	movs	r1, #0
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff f997 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 8003282:	4603      	mov	r3, r0
 8003284:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003288:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800328c:	fa93 f3a3 	rbit	r3, r3
 8003290:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003294:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003298:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800329c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80032a4:	2320      	movs	r3, #32
 80032a6:	e004      	b.n	80032b2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80032a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032ac:	fab3 f383 	clz	r3, r3
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d105      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x1b0>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	0e9b      	lsrs	r3, r3, #26
 80032c6:	f003 031f 	and.w	r3, r3, #31
 80032ca:	e018      	b.n	80032fe <HAL_ADC_ConfigChannel+0x1e2>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80032d8:	fa93 f3a3 	rbit	r3, r3
 80032dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80032e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80032e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80032f0:	2320      	movs	r3, #32
 80032f2:	e004      	b.n	80032fe <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80032f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80032f8:	fab3 f383 	clz	r3, r3
 80032fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032fe:	429a      	cmp	r2, r3
 8003300:	d106      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2200      	movs	r2, #0
 8003308:	2100      	movs	r1, #0
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff f966 	bl	80025dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2101      	movs	r1, #1
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff f94a 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 800331c:	4603      	mov	r3, r0
 800331e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10a      	bne.n	800333c <HAL_ADC_ConfigChannel+0x220>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2101      	movs	r1, #1
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff f93f 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 8003332:	4603      	mov	r3, r0
 8003334:	0e9b      	lsrs	r3, r3, #26
 8003336:	f003 021f 	and.w	r2, r3, #31
 800333a:	e01e      	b.n	800337a <HAL_ADC_ConfigChannel+0x25e>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2101      	movs	r1, #1
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff f934 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 8003348:	4603      	mov	r3, r0
 800334a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003352:	fa93 f3a3 	rbit	r3, r3
 8003356:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800335a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800335e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003362:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800336a:	2320      	movs	r3, #32
 800336c:	e004      	b.n	8003378 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800336e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003372:	fab3 f383 	clz	r3, r3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003382:	2b00      	cmp	r3, #0
 8003384:	d105      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x276>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	0e9b      	lsrs	r3, r3, #26
 800338c:	f003 031f 	and.w	r3, r3, #31
 8003390:	e018      	b.n	80033c4 <HAL_ADC_ConfigChannel+0x2a8>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800339e:	fa93 f3a3 	rbit	r3, r3
 80033a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80033a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80033ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80033b6:	2320      	movs	r3, #32
 80033b8:	e004      	b.n	80033c4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80033ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033be:	fab3 f383 	clz	r3, r3
 80033c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d106      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2200      	movs	r2, #0
 80033ce:	2101      	movs	r1, #1
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff f903 	bl	80025dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2102      	movs	r1, #2
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff f8e7 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 80033e2:	4603      	mov	r3, r0
 80033e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10a      	bne.n	8003402 <HAL_ADC_ConfigChannel+0x2e6>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2102      	movs	r1, #2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff f8dc 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 80033f8:	4603      	mov	r3, r0
 80033fa:	0e9b      	lsrs	r3, r3, #26
 80033fc:	f003 021f 	and.w	r2, r3, #31
 8003400:	e01e      	b.n	8003440 <HAL_ADC_ConfigChannel+0x324>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2102      	movs	r1, #2
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff f8d1 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 800340e:	4603      	mov	r3, r0
 8003410:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003414:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003418:	fa93 f3a3 	rbit	r3, r3
 800341c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003420:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003424:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003428:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003430:	2320      	movs	r3, #32
 8003432:	e004      	b.n	800343e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003434:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003438:	fab3 f383 	clz	r3, r3
 800343c:	b2db      	uxtb	r3, r3
 800343e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003448:	2b00      	cmp	r3, #0
 800344a:	d105      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x33c>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	0e9b      	lsrs	r3, r3, #26
 8003452:	f003 031f 	and.w	r3, r3, #31
 8003456:	e016      	b.n	8003486 <HAL_ADC_ConfigChannel+0x36a>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003460:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003464:	fa93 f3a3 	rbit	r3, r3
 8003468:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800346a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800346c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003470:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003478:	2320      	movs	r3, #32
 800347a:	e004      	b.n	8003486 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800347c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003480:	fab3 f383 	clz	r3, r3
 8003484:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003486:	429a      	cmp	r2, r3
 8003488:	d106      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2200      	movs	r2, #0
 8003490:	2102      	movs	r1, #2
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff f8a2 	bl	80025dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2103      	movs	r1, #3
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff f886 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 80034a4:	4603      	mov	r3, r0
 80034a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10a      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x3a8>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2103      	movs	r1, #3
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff f87b 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 80034ba:	4603      	mov	r3, r0
 80034bc:	0e9b      	lsrs	r3, r3, #26
 80034be:	f003 021f 	and.w	r2, r3, #31
 80034c2:	e017      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x3d8>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2103      	movs	r1, #3
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff f870 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 80034d0:	4603      	mov	r3, r0
 80034d2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034d6:	fa93 f3a3 	rbit	r3, r3
 80034da:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80034dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034de:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80034e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80034e6:	2320      	movs	r3, #32
 80034e8:	e003      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80034ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034ec:	fab3 f383 	clz	r3, r3
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d105      	bne.n	800350c <HAL_ADC_ConfigChannel+0x3f0>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	0e9b      	lsrs	r3, r3, #26
 8003506:	f003 031f 	and.w	r3, r3, #31
 800350a:	e011      	b.n	8003530 <HAL_ADC_ConfigChannel+0x414>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003512:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003514:	fa93 f3a3 	rbit	r3, r3
 8003518:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800351a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800351c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800351e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003524:	2320      	movs	r3, #32
 8003526:	e003      	b.n	8003530 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003528:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800352a:	fab3 f383 	clz	r3, r3
 800352e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003530:	429a      	cmp	r2, r3
 8003532:	d106      	bne.n	8003542 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2200      	movs	r2, #0
 800353a:	2103      	movs	r1, #3
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff f84d 	bl	80025dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff f9e0 	bl	800290c <LL_ADC_IsEnabled>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	f040 8140 	bne.w	80037d4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6818      	ldr	r0, [r3, #0]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	6819      	ldr	r1, [r3, #0]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	461a      	mov	r2, r3
 8003562:	f7ff f91d 	bl	80027a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	4a8f      	ldr	r2, [pc, #572]	@ (80037a8 <HAL_ADC_ConfigChannel+0x68c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	f040 8131 	bne.w	80037d4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10b      	bne.n	800359a <HAL_ADC_ConfigChannel+0x47e>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	0e9b      	lsrs	r3, r3, #26
 8003588:	3301      	adds	r3, #1
 800358a:	f003 031f 	and.w	r3, r3, #31
 800358e:	2b09      	cmp	r3, #9
 8003590:	bf94      	ite	ls
 8003592:	2301      	movls	r3, #1
 8003594:	2300      	movhi	r3, #0
 8003596:	b2db      	uxtb	r3, r3
 8003598:	e019      	b.n	80035ce <HAL_ADC_ConfigChannel+0x4b2>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035a2:	fa93 f3a3 	rbit	r3, r3
 80035a6:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80035a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035aa:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80035ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80035b2:	2320      	movs	r3, #32
 80035b4:	e003      	b.n	80035be <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80035b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035b8:	fab3 f383 	clz	r3, r3
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	3301      	adds	r3, #1
 80035c0:	f003 031f 	and.w	r3, r3, #31
 80035c4:	2b09      	cmp	r3, #9
 80035c6:	bf94      	ite	ls
 80035c8:	2301      	movls	r3, #1
 80035ca:	2300      	movhi	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d079      	beq.n	80036c6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d107      	bne.n	80035ee <HAL_ADC_ConfigChannel+0x4d2>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	0e9b      	lsrs	r3, r3, #26
 80035e4:	3301      	adds	r3, #1
 80035e6:	069b      	lsls	r3, r3, #26
 80035e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035ec:	e015      	b.n	800361a <HAL_ADC_ConfigChannel+0x4fe>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035f6:	fa93 f3a3 	rbit	r3, r3
 80035fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80035fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035fe:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003600:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003606:	2320      	movs	r3, #32
 8003608:	e003      	b.n	8003612 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800360a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800360c:	fab3 f383 	clz	r3, r3
 8003610:	b2db      	uxtb	r3, r3
 8003612:	3301      	adds	r3, #1
 8003614:	069b      	lsls	r3, r3, #26
 8003616:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003622:	2b00      	cmp	r3, #0
 8003624:	d109      	bne.n	800363a <HAL_ADC_ConfigChannel+0x51e>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	0e9b      	lsrs	r3, r3, #26
 800362c:	3301      	adds	r3, #1
 800362e:	f003 031f 	and.w	r3, r3, #31
 8003632:	2101      	movs	r1, #1
 8003634:	fa01 f303 	lsl.w	r3, r1, r3
 8003638:	e017      	b.n	800366a <HAL_ADC_ConfigChannel+0x54e>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003640:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003642:	fa93 f3a3 	rbit	r3, r3
 8003646:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003648:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800364a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800364c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003652:	2320      	movs	r3, #32
 8003654:	e003      	b.n	800365e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003656:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003658:	fab3 f383 	clz	r3, r3
 800365c:	b2db      	uxtb	r3, r3
 800365e:	3301      	adds	r3, #1
 8003660:	f003 031f 	and.w	r3, r3, #31
 8003664:	2101      	movs	r1, #1
 8003666:	fa01 f303 	lsl.w	r3, r1, r3
 800366a:	ea42 0103 	orr.w	r1, r2, r3
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10a      	bne.n	8003690 <HAL_ADC_ConfigChannel+0x574>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	0e9b      	lsrs	r3, r3, #26
 8003680:	3301      	adds	r3, #1
 8003682:	f003 021f 	and.w	r2, r3, #31
 8003686:	4613      	mov	r3, r2
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	4413      	add	r3, r2
 800368c:	051b      	lsls	r3, r3, #20
 800368e:	e018      	b.n	80036c2 <HAL_ADC_ConfigChannel+0x5a6>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003698:	fa93 f3a3 	rbit	r3, r3
 800369c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800369e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80036a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80036a8:	2320      	movs	r3, #32
 80036aa:	e003      	b.n	80036b4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80036ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036ae:	fab3 f383 	clz	r3, r3
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	3301      	adds	r3, #1
 80036b6:	f003 021f 	and.w	r2, r3, #31
 80036ba:	4613      	mov	r3, r2
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	4413      	add	r3, r2
 80036c0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036c2:	430b      	orrs	r3, r1
 80036c4:	e081      	b.n	80037ca <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d107      	bne.n	80036e2 <HAL_ADC_ConfigChannel+0x5c6>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	0e9b      	lsrs	r3, r3, #26
 80036d8:	3301      	adds	r3, #1
 80036da:	069b      	lsls	r3, r3, #26
 80036dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036e0:	e015      	b.n	800370e <HAL_ADC_ConfigChannel+0x5f2>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ea:	fa93 f3a3 	rbit	r3, r3
 80036ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80036f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80036f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80036fa:	2320      	movs	r3, #32
 80036fc:	e003      	b.n	8003706 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80036fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003700:	fab3 f383 	clz	r3, r3
 8003704:	b2db      	uxtb	r3, r3
 8003706:	3301      	adds	r3, #1
 8003708:	069b      	lsls	r3, r3, #26
 800370a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003716:	2b00      	cmp	r3, #0
 8003718:	d109      	bne.n	800372e <HAL_ADC_ConfigChannel+0x612>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	0e9b      	lsrs	r3, r3, #26
 8003720:	3301      	adds	r3, #1
 8003722:	f003 031f 	and.w	r3, r3, #31
 8003726:	2101      	movs	r1, #1
 8003728:	fa01 f303 	lsl.w	r3, r1, r3
 800372c:	e017      	b.n	800375e <HAL_ADC_ConfigChannel+0x642>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	fa93 f3a3 	rbit	r3, r3
 800373a:	61fb      	str	r3, [r7, #28]
  return result;
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003746:	2320      	movs	r3, #32
 8003748:	e003      	b.n	8003752 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800374a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374c:	fab3 f383 	clz	r3, r3
 8003750:	b2db      	uxtb	r3, r3
 8003752:	3301      	adds	r3, #1
 8003754:	f003 031f 	and.w	r3, r3, #31
 8003758:	2101      	movs	r1, #1
 800375a:	fa01 f303 	lsl.w	r3, r1, r3
 800375e:	ea42 0103 	orr.w	r1, r2, r3
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10d      	bne.n	800378a <HAL_ADC_ConfigChannel+0x66e>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	0e9b      	lsrs	r3, r3, #26
 8003774:	3301      	adds	r3, #1
 8003776:	f003 021f 	and.w	r2, r3, #31
 800377a:	4613      	mov	r3, r2
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	4413      	add	r3, r2
 8003780:	3b1e      	subs	r3, #30
 8003782:	051b      	lsls	r3, r3, #20
 8003784:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003788:	e01e      	b.n	80037c8 <HAL_ADC_ConfigChannel+0x6ac>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	fa93 f3a3 	rbit	r3, r3
 8003796:	613b      	str	r3, [r7, #16]
  return result;
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d104      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80037a2:	2320      	movs	r3, #32
 80037a4:	e006      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x698>
 80037a6:	bf00      	nop
 80037a8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	fab3 f383 	clz	r3, r3
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	3301      	adds	r3, #1
 80037b6:	f003 021f 	and.w	r2, r3, #31
 80037ba:	4613      	mov	r3, r2
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	4413      	add	r3, r2
 80037c0:	3b1e      	subs	r3, #30
 80037c2:	051b      	lsls	r3, r3, #20
 80037c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037c8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037ce:	4619      	mov	r1, r3
 80037d0:	f7fe ffba 	bl	8002748 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	4b3f      	ldr	r3, [pc, #252]	@ (80038d8 <HAL_ADC_ConfigChannel+0x7bc>)
 80037da:	4013      	ands	r3, r2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d071      	beq.n	80038c4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037e0:	483e      	ldr	r0, [pc, #248]	@ (80038dc <HAL_ADC_ConfigChannel+0x7c0>)
 80037e2:	f7fe feb3 	bl	800254c <LL_ADC_GetCommonPathInternalCh>
 80037e6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a3c      	ldr	r2, [pc, #240]	@ (80038e0 <HAL_ADC_ConfigChannel+0x7c4>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d004      	beq.n	80037fe <HAL_ADC_ConfigChannel+0x6e2>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a3a      	ldr	r2, [pc, #232]	@ (80038e4 <HAL_ADC_ConfigChannel+0x7c8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d127      	bne.n	800384e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80037fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003802:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d121      	bne.n	800384e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003812:	d157      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003814:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003818:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800381c:	4619      	mov	r1, r3
 800381e:	482f      	ldr	r0, [pc, #188]	@ (80038dc <HAL_ADC_ConfigChannel+0x7c0>)
 8003820:	f7fe fe81 	bl	8002526 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003824:	4b30      	ldr	r3, [pc, #192]	@ (80038e8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	099b      	lsrs	r3, r3, #6
 800382a:	4a30      	ldr	r2, [pc, #192]	@ (80038ec <HAL_ADC_ConfigChannel+0x7d0>)
 800382c:	fba2 2303 	umull	r2, r3, r2, r3
 8003830:	099b      	lsrs	r3, r3, #6
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	4613      	mov	r3, r2
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800383e:	e002      	b.n	8003846 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	3b01      	subs	r3, #1
 8003844:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1f9      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800384c:	e03a      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a27      	ldr	r2, [pc, #156]	@ (80038f0 <HAL_ADC_ConfigChannel+0x7d4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d113      	bne.n	8003880 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003858:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800385c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10d      	bne.n	8003880 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a22      	ldr	r2, [pc, #136]	@ (80038f4 <HAL_ADC_ConfigChannel+0x7d8>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d02a      	beq.n	80038c4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800386e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003872:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003876:	4619      	mov	r1, r3
 8003878:	4818      	ldr	r0, [pc, #96]	@ (80038dc <HAL_ADC_ConfigChannel+0x7c0>)
 800387a:	f7fe fe54 	bl	8002526 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800387e:	e021      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a1c      	ldr	r2, [pc, #112]	@ (80038f8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d11c      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800388a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800388e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d116      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a16      	ldr	r2, [pc, #88]	@ (80038f4 <HAL_ADC_ConfigChannel+0x7d8>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d011      	beq.n	80038c4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80038a8:	4619      	mov	r1, r3
 80038aa:	480c      	ldr	r0, [pc, #48]	@ (80038dc <HAL_ADC_ConfigChannel+0x7c0>)
 80038ac:	f7fe fe3b 	bl	8002526 <LL_ADC_SetCommonPathInternalCh>
 80038b0:	e008      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b6:	f043 0220 	orr.w	r2, r3, #32
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80038cc:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	37d8      	adds	r7, #216	@ 0xd8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	80080000 	.word	0x80080000
 80038dc:	50000300 	.word	0x50000300
 80038e0:	c3210000 	.word	0xc3210000
 80038e4:	90c00010 	.word	0x90c00010
 80038e8:	20000000 	.word	0x20000000
 80038ec:	053e2d63 	.word	0x053e2d63
 80038f0:	c7520000 	.word	0xc7520000
 80038f4:	50000100 	.word	0x50000100
 80038f8:	cb840000 	.word	0xcb840000

080038fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003904:	2300      	movs	r3, #0
 8003906:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f7fe fffd 	bl	800290c <LL_ADC_IsEnabled>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d169      	bne.n	80039ec <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	4b36      	ldr	r3, [pc, #216]	@ (80039f8 <ADC_Enable+0xfc>)
 8003920:	4013      	ands	r3, r2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00d      	beq.n	8003942 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800392a:	f043 0210 	orr.w	r2, r3, #16
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003936:	f043 0201 	orr.w	r2, r3, #1
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e055      	b.n	80039ee <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f7fe ffb8 	bl	80028bc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800394c:	482b      	ldr	r0, [pc, #172]	@ (80039fc <ADC_Enable+0x100>)
 800394e:	f7fe fdfd 	bl	800254c <LL_ADC_GetCommonPathInternalCh>
 8003952:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003954:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003958:	2b00      	cmp	r3, #0
 800395a:	d013      	beq.n	8003984 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800395c:	4b28      	ldr	r3, [pc, #160]	@ (8003a00 <ADC_Enable+0x104>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	099b      	lsrs	r3, r3, #6
 8003962:	4a28      	ldr	r2, [pc, #160]	@ (8003a04 <ADC_Enable+0x108>)
 8003964:	fba2 2303 	umull	r2, r3, r2, r3
 8003968:	099b      	lsrs	r3, r3, #6
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	4613      	mov	r3, r2
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	4413      	add	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003976:	e002      	b.n	800397e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	3b01      	subs	r3, #1
 800397c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1f9      	bne.n	8003978 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003984:	f7fe fdb0 	bl	80024e8 <HAL_GetTick>
 8003988:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800398a:	e028      	b.n	80039de <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f7fe ffbb 	bl	800290c <LL_ADC_IsEnabled>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d104      	bne.n	80039a6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fe ff8b 	bl	80028bc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80039a6:	f7fe fd9f 	bl	80024e8 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d914      	bls.n	80039de <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d00d      	beq.n	80039de <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c6:	f043 0210 	orr.w	r2, r3, #16
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d2:	f043 0201 	orr.w	r2, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e007      	b.n	80039ee <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d1cf      	bne.n	800398c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	8000003f 	.word	0x8000003f
 80039fc:	50000300 	.word	0x50000300
 8003a00:	20000000 	.word	0x20000000
 8003a04:	053e2d63 	.word	0x053e2d63

08003a08 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fe ff8c 	bl	8002932 <LL_ADC_IsDisableOngoing>
 8003a1a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fe ff73 	bl	800290c <LL_ADC_IsEnabled>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d047      	beq.n	8003abc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d144      	bne.n	8003abc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 030d 	and.w	r3, r3, #13
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d10c      	bne.n	8003a5a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fe ff4d 	bl	80028e4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2203      	movs	r2, #3
 8003a50:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a52:	f7fe fd49 	bl	80024e8 <HAL_GetTick>
 8003a56:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a58:	e029      	b.n	8003aae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a5e:	f043 0210 	orr.w	r2, r3, #16
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a6a:	f043 0201 	orr.w	r2, r3, #1
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e023      	b.n	8003abe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a76:	f7fe fd37 	bl	80024e8 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d914      	bls.n	8003aae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00d      	beq.n	8003aae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a96:	f043 0210 	orr.w	r2, r3, #16
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aa2:	f043 0201 	orr.w	r2, r3, #1
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e007      	b.n	8003abe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1dc      	bne.n	8003a76 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <LL_ADC_SetCommonPathInternalCh>:
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	609a      	str	r2, [r3, #8]
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <LL_ADC_GetCommonPathInternalCh>:
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <LL_ADC_SetOffset>:
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
 8003b14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	3360      	adds	r3, #96	@ 0x60
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	4b08      	ldr	r3, [pc, #32]	@ (8003b4c <LL_ADC_SetOffset+0x44>)
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	601a      	str	r2, [r3, #0]
}
 8003b40:	bf00      	nop
 8003b42:	371c      	adds	r7, #28
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	03fff000 	.word	0x03fff000

08003b50 <LL_ADC_GetOffsetChannel>:
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	3360      	adds	r3, #96	@ 0x60
 8003b5e:	461a      	mov	r2, r3
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <LL_ADC_SetOffsetState>:
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	3360      	adds	r3, #96	@ 0x60
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	601a      	str	r2, [r3, #0]
}
 8003ba6:	bf00      	nop
 8003ba8:	371c      	adds	r7, #28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <LL_ADC_SetOffsetSign>:
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b087      	sub	sp, #28
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	3360      	adds	r3, #96	@ 0x60
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	601a      	str	r2, [r3, #0]
}
 8003bdc:	bf00      	nop
 8003bde:	371c      	adds	r7, #28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <LL_ADC_SetOffsetSaturation>:
{
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	3360      	adds	r3, #96	@ 0x60
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	601a      	str	r2, [r3, #0]
}
 8003c12:	bf00      	nop
 8003c14:	371c      	adds	r7, #28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	615a      	str	r2, [r3, #20]
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <LL_ADC_INJ_GetTrigAuto>:
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <LL_ADC_SetChannelSamplingTime>:
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	3314      	adds	r3, #20
 8003c70:	461a      	mov	r2, r3
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	0e5b      	lsrs	r3, r3, #25
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	4413      	add	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	0d1b      	lsrs	r3, r3, #20
 8003c88:	f003 031f 	and.w	r3, r3, #31
 8003c8c:	2107      	movs	r1, #7
 8003c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c92:	43db      	mvns	r3, r3
 8003c94:	401a      	ands	r2, r3
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	0d1b      	lsrs	r3, r3, #20
 8003c9a:	f003 031f 	and.w	r3, r3, #31
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	601a      	str	r2, [r3, #0]
}
 8003caa:	bf00      	nop
 8003cac:	371c      	adds	r7, #28
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
	...

08003cb8 <LL_ADC_SetChannelSingleDiff>:
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	401a      	ands	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f003 0318 	and.w	r3, r3, #24
 8003cda:	4908      	ldr	r1, [pc, #32]	@ (8003cfc <LL_ADC_SetChannelSingleDiff+0x44>)
 8003cdc:	40d9      	lsrs	r1, r3
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	400b      	ands	r3, r1
 8003ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8003cee:	bf00      	nop
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	0007ffff 	.word	0x0007ffff

08003d00 <LL_ADC_GetMultimode>:
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 031f 	and.w	r3, r3, #31
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <LL_ADC_IsEnabled>:
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d101      	bne.n	8003d34 <LL_ADC_IsEnabled+0x18>
 8003d30:	2301      	movs	r3, #1
 8003d32:	e000      	b.n	8003d36 <LL_ADC_IsEnabled+0x1a>
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <LL_ADC_StartCalibration>:
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003d54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	609a      	str	r2, [r3, #8]
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <LL_ADC_IsCalibrationOnGoing>:
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d88:	d101      	bne.n	8003d8e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e000      	b.n	8003d90 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <LL_ADC_REG_IsConversionOngoing>:
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	2b04      	cmp	r3, #4
 8003dae:	d101      	bne.n	8003db4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003db0:	2301      	movs	r3, #1
 8003db2:	e000      	b.n	8003db6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <LL_ADC_INJ_StartConversion>:
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003dd2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003dd6:	f043 0208 	orr.w	r2, r3, #8
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	609a      	str	r2, [r3, #8]
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <LL_ADC_INJ_IsConversionOngoing>:
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d101      	bne.n	8003e02 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e000      	b.n	8003e04 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_ADCEx_Calibration_Start+0x1c>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e04d      	b.n	8003ec8 <HAL_ADCEx_Calibration_Start+0xb8>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f7ff fde7 	bl	8003a08 <ADC_Disable>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d136      	bne.n	8003eb2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e48:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003e4c:	f023 0302 	bic.w	r3, r3, #2
 8003e50:	f043 0202 	orr.w	r2, r3, #2
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6839      	ldr	r1, [r7, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff ff6f 	bl	8003d42 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e64:	e014      	b.n	8003e90 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	4a18      	ldr	r2, [pc, #96]	@ (8003ed0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d90d      	bls.n	8003e90 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e78:	f023 0312 	bic.w	r3, r3, #18
 8003e7c:	f043 0210 	orr.w	r2, r3, #16
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e01b      	b.n	8003ec8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff ff6d 	bl	8003d74 <LL_ADC_IsCalibrationOnGoing>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1e2      	bne.n	8003e66 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea4:	f023 0303 	bic.w	r3, r3, #3
 8003ea8:	f043 0201 	orr.w	r2, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003eb0:	e005      	b.n	8003ebe <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb6:	f043 0210 	orr.w	r2, r3, #16
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	0004de01 	.word	0x0004de01

08003ed4 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003edc:	4853      	ldr	r0, [pc, #332]	@ (800402c <HAL_ADCEx_InjectedStart+0x158>)
 8003ede:	f7ff ff0f 	bl	8003d00 <LL_ADC_GetMultimode>
 8003ee2:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff ff7e 	bl	8003dea <LL_ADC_INJ_IsConversionOngoing>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	e094      	b.n	8004022 <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f02:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f0a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10a      	bne.n	8003f28 <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d107      	bne.n	8003f28 <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f1c:	f043 0220 	orr.w	r2, r3, #32
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e07c      	b.n	8004022 <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d101      	bne.n	8003f36 <HAL_ADCEx_InjectedStart+0x62>
 8003f32:	2302      	movs	r3, #2
 8003f34:	e075      	b.n	8004022 <HAL_ADCEx_InjectedStart+0x14e>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7ff fcdc 	bl	80038fc <ADC_Enable>
 8003f44:	4603      	mov	r3, r0
 8003f46:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d164      	bne.n	8004018 <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d006      	beq.n	8003f68 <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f5e:	f023 0208 	bic.w	r2, r3, #8
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	661a      	str	r2, [r3, #96]	@ 0x60
 8003f66:	e002      	b.n	8003f6e <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f72:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003f76:	f023 0301 	bic.w	r3, r3, #1
 8003f7a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a2a      	ldr	r2, [pc, #168]	@ (8004030 <HAL_ADCEx_InjectedStart+0x15c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d002      	beq.n	8003f92 <HAL_ADCEx_InjectedStart+0xbe>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	e001      	b.n	8003f96 <HAL_ADCEx_InjectedStart+0xc2>
 8003f92:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6812      	ldr	r2, [r2, #0]
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d002      	beq.n	8003fa4 <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d105      	bne.n	8003fb0 <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2260      	movs	r2, #96	@ 0x60
 8003fb6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a1a      	ldr	r2, [pc, #104]	@ (8004030 <HAL_ADCEx_InjectedStart+0x15c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d002      	beq.n	8003fd0 <HAL_ADCEx_InjectedStart+0xfc>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	e001      	b.n	8003fd4 <HAL_ADCEx_InjectedStart+0x100>
 8003fd0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6812      	ldr	r2, [r2, #0]
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d008      	beq.n	8003fee <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d005      	beq.n	8003fee <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2b06      	cmp	r3, #6
 8003fe6:	d002      	beq.n	8003fee <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	2b07      	cmp	r3, #7
 8003fec:	d10d      	bne.n	800400a <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff fe26 	bl	8003c44 <LL_ADC_INJ_GetTrigAuto>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d110      	bne.n	8004020 <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff fedd 	bl	8003dc2 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004008:	e00a      	b.n	8004020 <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800400e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004016:	e003      	b.n	8004020 <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8004020:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004022:	4618      	mov	r0, r3
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	50000300 	.word	0x50000300
 8004030:	50000100 	.word	0x50000100

08004034 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800403c:	486e      	ldr	r0, [pc, #440]	@ (80041f8 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 800403e:	f7ff fe5f 	bl	8003d00 <LL_ADC_GetMultimode>
 8004042:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff fece 	bl	8003dea <LL_ADC_INJ_IsConversionOngoing>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 8004054:	2302      	movs	r3, #2
 8004056:	e0ca      	b.n	80041ee <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004062:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800406a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10a      	bne.n	8004088 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d107      	bne.n	8004088 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800407c:	f043 0220 	orr.w	r2, r3, #32
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e0b2      	b.n	80041ee <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800408e:	2b01      	cmp	r3, #1
 8004090:	d101      	bne.n	8004096 <HAL_ADCEx_InjectedStart_IT+0x62>
 8004092:	2302      	movs	r3, #2
 8004094:	e0ab      	b.n	80041ee <HAL_ADCEx_InjectedStart_IT+0x1ba>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7ff fc2c 	bl	80038fc <ADC_Enable>
 80040a4:	4603      	mov	r3, r0
 80040a6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f040 809a 	bne.w	80041e4 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d006      	beq.n	80040ca <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040c0:	f023 0208 	bic.w	r2, r3, #8
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	661a      	str	r2, [r3, #96]	@ 0x60
 80040c8:	e002      	b.n	80040d0 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80040d8:	f023 0301 	bic.w	r3, r3, #1
 80040dc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a44      	ldr	r2, [pc, #272]	@ (80041fc <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d002      	beq.n	80040f4 <HAL_ADCEx_InjectedStart_IT+0xc0>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	e001      	b.n	80040f8 <HAL_ADCEx_InjectedStart_IT+0xc4>
 80040f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6812      	ldr	r2, [r2, #0]
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d002      	beq.n	8004106 <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d105      	bne.n	8004112 <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800410a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2260      	movs	r2, #96	@ 0x60
 8004118:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d007      	beq.n	8004140 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800413e:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	2b08      	cmp	r3, #8
 8004146:	d110      	bne.n	800416a <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0220 	bic.w	r2, r2, #32
 8004156:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004166:	605a      	str	r2, [r3, #4]
          break;
 8004168:	e010      	b.n	800418c <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004178:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f042 0220 	orr.w	r2, r2, #32
 8004188:	605a      	str	r2, [r3, #4]
          break;
 800418a:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a1a      	ldr	r2, [pc, #104]	@ (80041fc <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d002      	beq.n	800419c <HAL_ADCEx_InjectedStart_IT+0x168>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	e001      	b.n	80041a0 <HAL_ADCEx_InjectedStart_IT+0x16c>
 800419c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d008      	beq.n	80041ba <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d005      	beq.n	80041ba <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2b06      	cmp	r3, #6
 80041b2:	d002      	beq.n	80041ba <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	2b07      	cmp	r3, #7
 80041b8:	d10d      	bne.n	80041d6 <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff fd40 	bl	8003c44 <LL_ADC_INJ_GetTrigAuto>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d110      	bne.n	80041ec <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff fdf7 	bl	8003dc2 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80041d4:	e00a      	b.n	80041ec <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041da:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80041e2:	e003      	b.n	80041ec <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80041ec:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	50000300 	.word	0x50000300
 80041fc:	50000100 	.word	0x50000100

08004200 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b0b6      	sub	sp, #216	@ 0xd8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8004260:	2300      	movs	r3, #0
 8004262:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004270:	2b01      	cmp	r3, #1
 8004272:	d102      	bne.n	800427a <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8004274:	2302      	movs	r3, #2
 8004276:	f000 bcb5 	b.w	8004be4 <HAL_ADCEx_InjectedConfigChannel+0x994>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800428e:	2b01      	cmp	r3, #1
 8004290:	d130      	bne.n	80042f4 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b09      	cmp	r3, #9
 8004298:	d179      	bne.n	800438e <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d010      	beq.n	80042c4 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	0e9b      	lsrs	r3, r3, #26
 80042a8:	025b      	lsls	r3, r3, #9
 80042aa:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b2:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80042b6:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80042bc:	4313      	orrs	r3, r2
 80042be:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042c2:	e007      	b.n	80042d4 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	0e9b      	lsrs	r3, r3, #26
 80042ca:	025b      	lsls	r3, r3, #9
 80042cc:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 80042d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042da:	4b84      	ldr	r3, [pc, #528]	@ (80044ec <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80042dc:	4013      	ands	r3, r2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6812      	ldr	r2, [r2, #0]
 80042e2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80042e6:	430b      	orrs	r3, r1
 80042e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80042f0:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80042f2:	e04c      	b.n	800438e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d11d      	bne.n	8004338 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	6a1a      	ldr	r2, [r3, #32]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00d      	beq.n	800432e <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800431c:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8004320:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800432c:	e004      	b.n	8004338 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	3b01      	subs	r3, #1
 8004334:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	0e9b      	lsrs	r3, r3, #26
 800433e:	f003 021f 	and.w	r2, r3, #31
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f003 031f 	and.w	r3, r3, #31
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800435c:	1e5a      	subs	r2, r3, #1
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004366:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10a      	bne.n	800438e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800437e:	4b5b      	ldr	r3, [pc, #364]	@ (80044ec <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004380:	4013      	ands	r3, r2
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6812      	ldr	r2, [r2, #0]
 800438a:	430b      	orrs	r3, r1
 800438c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff fd29 	bl	8003dea <LL_ADC_INJ_IsConversionOngoing>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d124      	bne.n	80043e8 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d112      	bne.n	80043ce <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80043b8:	055a      	lsls	r2, r3, #21
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80043c0:	051b      	lsls	r3, r3, #20
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	60da      	str	r2, [r3, #12]
 80043cc:	e00c      	b.n	80043e8 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80043de:	055a      	lsls	r2, r3, #21
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff fcd5 	bl	8003d9c <LL_ADC_REG_IsConversionOngoing>
 80043f2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff fcf5 	bl	8003dea <LL_ADC_INJ_IsConversionOngoing>
 8004400:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004404:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004408:	2b00      	cmp	r3, #0
 800440a:	f040 822e 	bne.w	800486a <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800440e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004412:	2b00      	cmp	r3, #0
 8004414:	f040 8229 	bne.w	800486a <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800441c:	2b00      	cmp	r3, #0
 800441e:	d003      	beq.n	8004428 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004424:	2b00      	cmp	r3, #0
 8004426:	d116      	bne.n	8004456 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800442e:	2b01      	cmp	r3, #1
 8004430:	d108      	bne.n	8004444 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8004440:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004442:	e01f      	b.n	8004484 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68da      	ldr	r2, [r3, #12]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8004452:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004454:	e016      	b.n	8004484 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800445c:	2b01      	cmp	r3, #1
 800445e:	d109      	bne.n	8004474 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004464:	f043 0220 	orr.w	r2, r3, #32
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004472:	e007      	b.n	8004484 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8004482:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800448a:	2b01      	cmp	r3, #1
 800448c:	d110      	bne.n	80044b0 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a0:	430b      	orrs	r3, r1
 80044a2:	431a      	orrs	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f042 0202 	orr.w	r2, r2, #2
 80044ac:	611a      	str	r2, [r3, #16]
 80044ae:	e007      	b.n	80044c0 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691a      	ldr	r2, [r3, #16]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0202 	bic.w	r2, r2, #2
 80044be:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044c8:	d112      	bne.n	80044f0 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6818      	ldr	r0, [r3, #0]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2200      	movs	r2, #0
 80044d4:	4619      	mov	r1, r3
 80044d6:	f7ff fbc3 	bl	8003c60 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff fb9b 	bl	8003c1e <LL_ADC_SetSamplingTimeCommonConfig>
 80044e8:	e011      	b.n	800450e <HAL_ADCEx_InjectedConfigChannel+0x2be>
 80044ea:	bf00      	nop
 80044ec:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6818      	ldr	r0, [r3, #0]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80044fc:	461a      	mov	r2, r3
 80044fe:	f7ff fbaf 	bl	8003c60 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2100      	movs	r1, #0
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff fb88 	bl	8003c1e <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	695a      	ldr	r2, [r3, #20]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	08db      	lsrs	r3, r3, #3
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	2b04      	cmp	r3, #4
 800452e:	d022      	beq.n	8004576 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6818      	ldr	r0, [r3, #0]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	6919      	ldr	r1, [r3, #16]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004540:	f7ff fae2 	bl	8003b08 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6818      	ldr	r0, [r3, #0]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	6919      	ldr	r1, [r3, #16]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	461a      	mov	r2, r3
 8004552:	f7ff fb2e 	bl	8003bb2 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6818      	ldr	r0, [r3, #0]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004562:	2b01      	cmp	r3, #1
 8004564:	d102      	bne.n	800456c <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8004566:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800456a:	e000      	b.n	800456e <HAL_ADCEx_InjectedConfigChannel+0x31e>
 800456c:	2300      	movs	r3, #0
 800456e:	461a      	mov	r2, r3
 8004570:	f7ff fb3a 	bl	8003be8 <LL_ADC_SetOffsetSaturation>
 8004574:	e179      	b.n	800486a <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2100      	movs	r1, #0
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff fae7 	bl	8003b50 <LL_ADC_GetOffsetChannel>
 8004582:	4603      	mov	r3, r0
 8004584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10a      	bne.n	80045a2 <HAL_ADCEx_InjectedConfigChannel+0x352>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2100      	movs	r1, #0
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff fadc 	bl	8003b50 <LL_ADC_GetOffsetChannel>
 8004598:	4603      	mov	r3, r0
 800459a:	0e9b      	lsrs	r3, r3, #26
 800459c:	f003 021f 	and.w	r2, r3, #31
 80045a0:	e01e      	b.n	80045e0 <HAL_ADCEx_InjectedConfigChannel+0x390>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2100      	movs	r1, #0
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff fad1 	bl	8003b50 <LL_ADC_GetOffsetChannel>
 80045ae:	4603      	mov	r3, r0
 80045b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80045b8:	fa93 f3a3 	rbit	r3, r3
 80045bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80045c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80045c4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80045c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 80045d0:	2320      	movs	r3, #32
 80045d2:	e004      	b.n	80045de <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 80045d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80045d8:	fab3 f383 	clz	r3, r3
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d105      	bne.n	80045f8 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	0e9b      	lsrs	r3, r3, #26
 80045f2:	f003 031f 	and.w	r3, r3, #31
 80045f6:	e018      	b.n	800462a <HAL_ADCEx_InjectedConfigChannel+0x3da>
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004600:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004604:	fa93 f3a3 	rbit	r3, r3
 8004608:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800460c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004610:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004614:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 800461c:	2320      	movs	r3, #32
 800461e:	e004      	b.n	800462a <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8004620:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004624:	fab3 f383 	clz	r3, r3
 8004628:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800462a:	429a      	cmp	r2, r3
 800462c:	d106      	bne.n	800463c <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2200      	movs	r2, #0
 8004634:	2100      	movs	r1, #0
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff faa0 	bl	8003b7c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2101      	movs	r1, #1
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff fa84 	bl	8003b50 <LL_ADC_GetOffsetChannel>
 8004648:	4603      	mov	r3, r0
 800464a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10a      	bne.n	8004668 <HAL_ADCEx_InjectedConfigChannel+0x418>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2101      	movs	r1, #1
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff fa79 	bl	8003b50 <LL_ADC_GetOffsetChannel>
 800465e:	4603      	mov	r3, r0
 8004660:	0e9b      	lsrs	r3, r3, #26
 8004662:	f003 021f 	and.w	r2, r3, #31
 8004666:	e01e      	b.n	80046a6 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2101      	movs	r1, #1
 800466e:	4618      	mov	r0, r3
 8004670:	f7ff fa6e 	bl	8003b50 <LL_ADC_GetOffsetChannel>
 8004674:	4603      	mov	r3, r0
 8004676:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800467e:	fa93 f3a3 	rbit	r3, r3
 8004682:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004686:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800468a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800468e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8004696:	2320      	movs	r3, #32
 8004698:	e004      	b.n	80046a4 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 800469a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800469e:	fab3 f383 	clz	r3, r3
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d105      	bne.n	80046be <HAL_ADCEx_InjectedConfigChannel+0x46e>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	0e9b      	lsrs	r3, r3, #26
 80046b8:	f003 031f 	and.w	r3, r3, #31
 80046bc:	e018      	b.n	80046f0 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80046ca:	fa93 f3a3 	rbit	r3, r3
 80046ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80046d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80046d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80046da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 80046e2:	2320      	movs	r3, #32
 80046e4:	e004      	b.n	80046f0 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 80046e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046ea:	fab3 f383 	clz	r3, r3
 80046ee:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d106      	bne.n	8004702 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2200      	movs	r2, #0
 80046fa:	2101      	movs	r1, #1
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff fa3d 	bl	8003b7c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2102      	movs	r1, #2
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff fa21 	bl	8003b50 <LL_ADC_GetOffsetChannel>
 800470e:	4603      	mov	r3, r0
 8004710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10a      	bne.n	800472e <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2102      	movs	r1, #2
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff fa16 	bl	8003b50 <LL_ADC_GetOffsetChannel>
 8004724:	4603      	mov	r3, r0
 8004726:	0e9b      	lsrs	r3, r3, #26
 8004728:	f003 021f 	and.w	r2, r3, #31
 800472c:	e01e      	b.n	800476c <HAL_ADCEx_InjectedConfigChannel+0x51c>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2102      	movs	r1, #2
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff fa0b 	bl	8003b50 <LL_ADC_GetOffsetChannel>
 800473a:	4603      	mov	r3, r0
 800473c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004740:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004744:	fa93 f3a3 	rbit	r3, r3
 8004748:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800474c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004750:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004754:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 800475c:	2320      	movs	r3, #32
 800475e:	e004      	b.n	800476a <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8004760:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004764:	fab3 f383 	clz	r3, r3
 8004768:	b2db      	uxtb	r3, r3
 800476a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004774:	2b00      	cmp	r3, #0
 8004776:	d105      	bne.n	8004784 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	0e9b      	lsrs	r3, r3, #26
 800477e:	f003 031f 	and.w	r3, r3, #31
 8004782:	e014      	b.n	80047ae <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800478c:	fa93 f3a3 	rbit	r3, r3
 8004790:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004792:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004794:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004798:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 80047a0:	2320      	movs	r3, #32
 80047a2:	e004      	b.n	80047ae <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 80047a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80047a8:	fab3 f383 	clz	r3, r3
 80047ac:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d106      	bne.n	80047c0 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2200      	movs	r2, #0
 80047b8:	2102      	movs	r1, #2
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff f9de 	bl	8003b7c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2103      	movs	r1, #3
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7ff f9c2 	bl	8003b50 <LL_ADC_GetOffsetChannel>
 80047cc:	4603      	mov	r3, r0
 80047ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10a      	bne.n	80047ec <HAL_ADCEx_InjectedConfigChannel+0x59c>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2103      	movs	r1, #3
 80047dc:	4618      	mov	r0, r3
 80047de:	f7ff f9b7 	bl	8003b50 <LL_ADC_GetOffsetChannel>
 80047e2:	4603      	mov	r3, r0
 80047e4:	0e9b      	lsrs	r3, r3, #26
 80047e6:	f003 021f 	and.w	r2, r3, #31
 80047ea:	e017      	b.n	800481c <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2103      	movs	r1, #3
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff f9ac 	bl	8003b50 <LL_ADC_GetOffsetChannel>
 80047f8:	4603      	mov	r3, r0
 80047fa:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80047fe:	fa93 f3a3 	rbit	r3, r3
 8004802:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004804:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004806:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004808:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 800480e:	2320      	movs	r3, #32
 8004810:	e003      	b.n	800481a <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8004812:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004814:	fab3 f383 	clz	r3, r3
 8004818:	b2db      	uxtb	r3, r3
 800481a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004824:	2b00      	cmp	r3, #0
 8004826:	d105      	bne.n	8004834 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	0e9b      	lsrs	r3, r3, #26
 800482e:	f003 031f 	and.w	r3, r3, #31
 8004832:	e011      	b.n	8004858 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800483c:	fa93 f3a3 	rbit	r3, r3
 8004840:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004842:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004844:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004846:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 800484c:	2320      	movs	r3, #32
 800484e:	e003      	b.n	8004858 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8004850:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004852:	fab3 f383 	clz	r3, r3
 8004856:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004858:	429a      	cmp	r2, r3
 800485a:	d106      	bne.n	800486a <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2200      	movs	r2, #0
 8004862:	2103      	movs	r1, #3
 8004864:	4618      	mov	r0, r3
 8004866:	f7ff f989 	bl	8003b7c <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff fa54 	bl	8003d1c <LL_ADC_IsEnabled>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	f040 8140 	bne.w	8004afc <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	6819      	ldr	r1, [r3, #0]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	461a      	mov	r2, r3
 800488a:	f7ff fa15 	bl	8003cb8 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	4a8f      	ldr	r2, [pc, #572]	@ (8004ad0 <HAL_ADCEx_InjectedConfigChannel+0x880>)
 8004894:	4293      	cmp	r3, r2
 8004896:	f040 8131 	bne.w	8004afc <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10b      	bne.n	80048c2 <HAL_ADCEx_InjectedConfigChannel+0x672>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	0e9b      	lsrs	r3, r3, #26
 80048b0:	3301      	adds	r3, #1
 80048b2:	f003 031f 	and.w	r3, r3, #31
 80048b6:	2b09      	cmp	r3, #9
 80048b8:	bf94      	ite	ls
 80048ba:	2301      	movls	r3, #1
 80048bc:	2300      	movhi	r3, #0
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	e019      	b.n	80048f6 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048ca:	fa93 f3a3 	rbit	r3, r3
 80048ce:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80048d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80048d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 80048da:	2320      	movs	r3, #32
 80048dc:	e003      	b.n	80048e6 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 80048de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048e0:	fab3 f383 	clz	r3, r3
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	3301      	adds	r3, #1
 80048e8:	f003 031f 	and.w	r3, r3, #31
 80048ec:	2b09      	cmp	r3, #9
 80048ee:	bf94      	ite	ls
 80048f0:	2301      	movls	r3, #1
 80048f2:	2300      	movhi	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d079      	beq.n	80049ee <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004902:	2b00      	cmp	r3, #0
 8004904:	d107      	bne.n	8004916 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	0e9b      	lsrs	r3, r3, #26
 800490c:	3301      	adds	r3, #1
 800490e:	069b      	lsls	r3, r3, #26
 8004910:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004914:	e015      	b.n	8004942 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800491e:	fa93 f3a3 	rbit	r3, r3
 8004922:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004924:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004926:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004928:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 800492e:	2320      	movs	r3, #32
 8004930:	e003      	b.n	800493a <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8004932:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004934:	fab3 f383 	clz	r3, r3
 8004938:	b2db      	uxtb	r3, r3
 800493a:	3301      	adds	r3, #1
 800493c:	069b      	lsls	r3, r3, #26
 800493e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800494a:	2b00      	cmp	r3, #0
 800494c:	d109      	bne.n	8004962 <HAL_ADCEx_InjectedConfigChannel+0x712>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	0e9b      	lsrs	r3, r3, #26
 8004954:	3301      	adds	r3, #1
 8004956:	f003 031f 	and.w	r3, r3, #31
 800495a:	2101      	movs	r1, #1
 800495c:	fa01 f303 	lsl.w	r3, r1, r3
 8004960:	e017      	b.n	8004992 <HAL_ADCEx_InjectedConfigChannel+0x742>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004968:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800496a:	fa93 f3a3 	rbit	r3, r3
 800496e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004972:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 800497a:	2320      	movs	r3, #32
 800497c:	e003      	b.n	8004986 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 800497e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004980:	fab3 f383 	clz	r3, r3
 8004984:	b2db      	uxtb	r3, r3
 8004986:	3301      	adds	r3, #1
 8004988:	f003 031f 	and.w	r3, r3, #31
 800498c:	2101      	movs	r1, #1
 800498e:	fa01 f303 	lsl.w	r3, r1, r3
 8004992:	ea42 0103 	orr.w	r1, r2, r3
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10a      	bne.n	80049b8 <HAL_ADCEx_InjectedConfigChannel+0x768>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	0e9b      	lsrs	r3, r3, #26
 80049a8:	3301      	adds	r3, #1
 80049aa:	f003 021f 	and.w	r2, r3, #31
 80049ae:	4613      	mov	r3, r2
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	4413      	add	r3, r2
 80049b4:	051b      	lsls	r3, r3, #20
 80049b6:	e018      	b.n	80049ea <HAL_ADCEx_InjectedConfigChannel+0x79a>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049c0:	fa93 f3a3 	rbit	r3, r3
 80049c4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80049c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80049ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 80049d0:	2320      	movs	r3, #32
 80049d2:	e003      	b.n	80049dc <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 80049d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d6:	fab3 f383 	clz	r3, r3
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	3301      	adds	r3, #1
 80049de:	f003 021f 	and.w	r2, r3, #31
 80049e2:	4613      	mov	r3, r2
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	4413      	add	r3, r2
 80049e8:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049ea:	430b      	orrs	r3, r1
 80049ec:	e081      	b.n	8004af2 <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d107      	bne.n	8004a0a <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	0e9b      	lsrs	r3, r3, #26
 8004a00:	3301      	adds	r3, #1
 8004a02:	069b      	lsls	r3, r3, #26
 8004a04:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a08:	e015      	b.n	8004a36 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a12:	fa93 f3a3 	rbit	r3, r3
 8004a16:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8004a22:	2320      	movs	r3, #32
 8004a24:	e003      	b.n	8004a2e <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8004a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a28:	fab3 f383 	clz	r3, r3
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	3301      	adds	r3, #1
 8004a30:	069b      	lsls	r3, r3, #26
 8004a32:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d109      	bne.n	8004a56 <HAL_ADCEx_InjectedConfigChannel+0x806>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	0e9b      	lsrs	r3, r3, #26
 8004a48:	3301      	adds	r3, #1
 8004a4a:	f003 031f 	and.w	r3, r3, #31
 8004a4e:	2101      	movs	r1, #1
 8004a50:	fa01 f303 	lsl.w	r3, r1, r3
 8004a54:	e017      	b.n	8004a86 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	fa93 f3a3 	rbit	r3, r3
 8004a62:	61bb      	str	r3, [r7, #24]
  return result;
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8004a6e:	2320      	movs	r3, #32
 8004a70:	e003      	b.n	8004a7a <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	fab3 f383 	clz	r3, r3
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	f003 031f 	and.w	r3, r3, #31
 8004a80:	2101      	movs	r1, #1
 8004a82:	fa01 f303 	lsl.w	r3, r1, r3
 8004a86:	ea42 0103 	orr.w	r1, r2, r3
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10d      	bne.n	8004ab2 <HAL_ADCEx_InjectedConfigChannel+0x862>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	0e9b      	lsrs	r3, r3, #26
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	f003 021f 	and.w	r2, r3, #31
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	4413      	add	r3, r2
 8004aa8:	3b1e      	subs	r3, #30
 8004aaa:	051b      	lsls	r3, r3, #20
 8004aac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004ab0:	e01e      	b.n	8004af0 <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	fa93 f3a3 	rbit	r3, r3
 8004abe:	60fb      	str	r3, [r7, #12]
  return result;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d104      	bne.n	8004ad4 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 8004aca:	2320      	movs	r3, #32
 8004acc:	e006      	b.n	8004adc <HAL_ADCEx_InjectedConfigChannel+0x88c>
 8004ace:	bf00      	nop
 8004ad0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	fab3 f383 	clz	r3, r3
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	3301      	adds	r3, #1
 8004ade:	f003 021f 	and.w	r2, r3, #31
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	4413      	add	r3, r2
 8004ae8:	3b1e      	subs	r3, #30
 8004aea:	051b      	lsls	r3, r3, #20
 8004aec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004af0:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004af6:	4619      	mov	r1, r3
 8004af8:	f7ff f8b2 	bl	8003c60 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	4b3a      	ldr	r3, [pc, #232]	@ (8004bec <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 8004b02:	4013      	ands	r3, r2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d067      	beq.n	8004bd8 <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b08:	4839      	ldr	r0, [pc, #228]	@ (8004bf0 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004b0a:	f7fe ffef 	bl	8003aec <LL_ADC_GetCommonPathInternalCh>
 8004b0e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a37      	ldr	r2, [pc, #220]	@ (8004bf4 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d004      	beq.n	8004b26 <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a35      	ldr	r2, [pc, #212]	@ (8004bf8 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d127      	bne.n	8004b76 <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004b26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d121      	bne.n	8004b76 <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b3a:	d14d      	bne.n	8004bd8 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b40:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b44:	4619      	mov	r1, r3
 8004b46:	482a      	ldr	r0, [pc, #168]	@ (8004bf0 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004b48:	f7fe ffbd 	bl	8003ac6 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004b4c:	4b2b      	ldr	r3, [pc, #172]	@ (8004bfc <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	099b      	lsrs	r3, r3, #6
 8004b52:	4a2b      	ldr	r2, [pc, #172]	@ (8004c00 <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8004b54:	fba2 2303 	umull	r2, r3, r2, r3
 8004b58:	099a      	lsrs	r2, r3, #6
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	4413      	add	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8004b64:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004b66:	e002      	b.n	8004b6e <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1f9      	bne.n	8004b68 <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b74:	e030      	b.n	8004bd8 <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a22      	ldr	r2, [pc, #136]	@ (8004c04 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d113      	bne.n	8004ba8 <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004b80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10d      	bne.n	8004ba8 <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a1d      	ldr	r2, [pc, #116]	@ (8004c08 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d020      	beq.n	8004bd8 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4813      	ldr	r0, [pc, #76]	@ (8004bf0 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004ba2:	f7fe ff90 	bl	8003ac6 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ba6:	e017      	b.n	8004bd8 <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a17      	ldr	r2, [pc, #92]	@ (8004c0c <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d112      	bne.n	8004bd8 <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004bb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10c      	bne.n	8004bd8 <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a11      	ldr	r2, [pc, #68]	@ (8004c08 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d007      	beq.n	8004bd8 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004bcc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4807      	ldr	r0, [pc, #28]	@ (8004bf0 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004bd4:	f7fe ff77 	bl	8003ac6 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004be0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	37d8      	adds	r7, #216	@ 0xd8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	80080000 	.word	0x80080000
 8004bf0:	50000300 	.word	0x50000300
 8004bf4:	c3210000 	.word	0xc3210000
 8004bf8:	90c00010 	.word	0x90c00010
 8004bfc:	20000000 	.word	0x20000000
 8004c00:	053e2d63 	.word	0x053e2d63
 8004c04:	c7520000 	.word	0xc7520000
 8004c08:	50000100 	.word	0x50000100
 8004c0c:	cb840000 	.word	0xcb840000

08004c10 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004c10:	b590      	push	{r4, r7, lr}
 8004c12:	b0a1      	sub	sp, #132	@ 0x84
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e08b      	b.n	8004d46 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004c36:	2300      	movs	r3, #0
 8004c38:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c46:	d102      	bne.n	8004c4e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004c48:	4b41      	ldr	r3, [pc, #260]	@ (8004d50 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004c4a:	60bb      	str	r3, [r7, #8]
 8004c4c:	e001      	b.n	8004c52 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10b      	bne.n	8004c70 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c5c:	f043 0220 	orr.w	r2, r3, #32
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e06a      	b.n	8004d46 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7ff f892 	bl	8003d9c <LL_ADC_REG_IsConversionOngoing>
 8004c78:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff f88c 	bl	8003d9c <LL_ADC_REG_IsConversionOngoing>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d14c      	bne.n	8004d24 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004c8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d149      	bne.n	8004d24 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004c90:	4b30      	ldr	r3, [pc, #192]	@ (8004d54 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004c92:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d028      	beq.n	8004cee <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004c9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	6859      	ldr	r1, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004cae:	035b      	lsls	r3, r3, #13
 8004cb0:	430b      	orrs	r3, r1
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cb6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cb8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004cbc:	f7ff f82e 	bl	8003d1c <LL_ADC_IsEnabled>
 8004cc0:	4604      	mov	r4, r0
 8004cc2:	4823      	ldr	r0, [pc, #140]	@ (8004d50 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004cc4:	f7ff f82a 	bl	8003d1c <LL_ADC_IsEnabled>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	4323      	orrs	r3, r4
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d133      	bne.n	8004d38 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004cd0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004cd8:	f023 030f 	bic.w	r3, r3, #15
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	6811      	ldr	r1, [r2, #0]
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	6892      	ldr	r2, [r2, #8]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cea:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004cec:	e024      	b.n	8004d38 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004cee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004cf6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cf8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cfa:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004cfe:	f7ff f80d 	bl	8003d1c <LL_ADC_IsEnabled>
 8004d02:	4604      	mov	r4, r0
 8004d04:	4812      	ldr	r0, [pc, #72]	@ (8004d50 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004d06:	f7ff f809 	bl	8003d1c <LL_ADC_IsEnabled>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	4323      	orrs	r3, r4
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d112      	bne.n	8004d38 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004d12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004d1a:	f023 030f 	bic.w	r3, r3, #15
 8004d1e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004d20:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d22:	e009      	b.n	8004d38 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d28:	f043 0220 	orr.w	r2, r3, #32
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004d36:	e000      	b.n	8004d3a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d38:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004d42:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3784      	adds	r7, #132	@ 0x84
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd90      	pop	{r4, r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	50000100 	.word	0x50000100
 8004d54:	50000300 	.word	0x50000300

08004d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f003 0307 	and.w	r3, r3, #7
 8004d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d68:	4b0c      	ldr	r3, [pc, #48]	@ (8004d9c <__NVIC_SetPriorityGrouping+0x44>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d74:	4013      	ands	r3, r2
 8004d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004d84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d8a:	4a04      	ldr	r2, [pc, #16]	@ (8004d9c <__NVIC_SetPriorityGrouping+0x44>)
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	60d3      	str	r3, [r2, #12]
}
 8004d90:	bf00      	nop
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	e000ed00 	.word	0xe000ed00

08004da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004da4:	4b04      	ldr	r3, [pc, #16]	@ (8004db8 <__NVIC_GetPriorityGrouping+0x18>)
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	0a1b      	lsrs	r3, r3, #8
 8004daa:	f003 0307 	and.w	r3, r3, #7
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	e000ed00 	.word	0xe000ed00

08004dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	db0b      	blt.n	8004de6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dce:	79fb      	ldrb	r3, [r7, #7]
 8004dd0:	f003 021f 	and.w	r2, r3, #31
 8004dd4:	4907      	ldr	r1, [pc, #28]	@ (8004df4 <__NVIC_EnableIRQ+0x38>)
 8004dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dda:	095b      	lsrs	r3, r3, #5
 8004ddc:	2001      	movs	r0, #1
 8004dde:	fa00 f202 	lsl.w	r2, r0, r2
 8004de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	e000e100 	.word	0xe000e100

08004df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	4603      	mov	r3, r0
 8004e00:	6039      	str	r1, [r7, #0]
 8004e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	db0a      	blt.n	8004e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	490c      	ldr	r1, [pc, #48]	@ (8004e44 <__NVIC_SetPriority+0x4c>)
 8004e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e16:	0112      	lsls	r2, r2, #4
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e20:	e00a      	b.n	8004e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	4908      	ldr	r1, [pc, #32]	@ (8004e48 <__NVIC_SetPriority+0x50>)
 8004e28:	79fb      	ldrb	r3, [r7, #7]
 8004e2a:	f003 030f 	and.w	r3, r3, #15
 8004e2e:	3b04      	subs	r3, #4
 8004e30:	0112      	lsls	r2, r2, #4
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	440b      	add	r3, r1
 8004e36:	761a      	strb	r2, [r3, #24]
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	e000e100 	.word	0xe000e100
 8004e48:	e000ed00 	.word	0xe000ed00

08004e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b089      	sub	sp, #36	@ 0x24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f003 0307 	and.w	r3, r3, #7
 8004e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	f1c3 0307 	rsb	r3, r3, #7
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	bf28      	it	cs
 8004e6a:	2304      	movcs	r3, #4
 8004e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	3304      	adds	r3, #4
 8004e72:	2b06      	cmp	r3, #6
 8004e74:	d902      	bls.n	8004e7c <NVIC_EncodePriority+0x30>
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	3b03      	subs	r3, #3
 8004e7a:	e000      	b.n	8004e7e <NVIC_EncodePriority+0x32>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e80:	f04f 32ff 	mov.w	r2, #4294967295
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8a:	43da      	mvns	r2, r3
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	401a      	ands	r2, r3
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e94:	f04f 31ff 	mov.w	r1, #4294967295
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9e:	43d9      	mvns	r1, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ea4:	4313      	orrs	r3, r2
         );
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3724      	adds	r7, #36	@ 0x24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
	...

08004eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ec4:	d301      	bcc.n	8004eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e00f      	b.n	8004eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004eca:	4a0a      	ldr	r2, [pc, #40]	@ (8004ef4 <SysTick_Config+0x40>)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ed2:	210f      	movs	r1, #15
 8004ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed8:	f7ff ff8e 	bl	8004df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004edc:	4b05      	ldr	r3, [pc, #20]	@ (8004ef4 <SysTick_Config+0x40>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ee2:	4b04      	ldr	r3, [pc, #16]	@ (8004ef4 <SysTick_Config+0x40>)
 8004ee4:	2207      	movs	r2, #7
 8004ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	e000e010 	.word	0xe000e010

08004ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7ff ff29 	bl	8004d58 <__NVIC_SetPriorityGrouping>
}
 8004f06:	bf00      	nop
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b086      	sub	sp, #24
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	4603      	mov	r3, r0
 8004f16:	60b9      	str	r1, [r7, #8]
 8004f18:	607a      	str	r2, [r7, #4]
 8004f1a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f1c:	f7ff ff40 	bl	8004da0 <__NVIC_GetPriorityGrouping>
 8004f20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	68b9      	ldr	r1, [r7, #8]
 8004f26:	6978      	ldr	r0, [r7, #20]
 8004f28:	f7ff ff90 	bl	8004e4c <NVIC_EncodePriority>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f32:	4611      	mov	r1, r2
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff ff5f 	bl	8004df8 <__NVIC_SetPriority>
}
 8004f3a:	bf00      	nop
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b082      	sub	sp, #8
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	4603      	mov	r3, r0
 8004f4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7ff ff33 	bl	8004dbc <__NVIC_EnableIRQ>
}
 8004f56:	bf00      	nop
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b082      	sub	sp, #8
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7ff ffa4 	bl	8004eb4 <SysTick_Config>
 8004f6c:	4603      	mov	r3, r0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b082      	sub	sp, #8
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e014      	b.n	8004fb2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	791b      	ldrb	r3, [r3, #4]
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d105      	bne.n	8004f9e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7fc fa8f 	bl	80014bc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b08a      	sub	sp, #40	@ 0x28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d002      	beq.n	8004fd8 <HAL_DAC_ConfigChannel+0x1c>
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e19e      	b.n	800531a <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	795b      	ldrb	r3, [r3, #5]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d101      	bne.n	8004fe8 <HAL_DAC_ConfigChannel+0x2c>
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	e198      	b.n	800531a <HAL_DAC_ConfigChannel+0x35e>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2201      	movs	r2, #1
 8004fec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	2b04      	cmp	r3, #4
 8004ffa:	d17a      	bne.n	80050f2 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004ffc:	f7fd fa74 	bl	80024e8 <HAL_GetTick>
 8005000:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d13d      	bne.n	8005084 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005008:	e018      	b.n	800503c <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800500a:	f7fd fa6d 	bl	80024e8 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b01      	cmp	r3, #1
 8005016:	d911      	bls.n	800503c <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800501e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00a      	beq.n	800503c <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f043 0208 	orr.w	r2, r3, #8
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2203      	movs	r2, #3
 8005036:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e16e      	b.n	800531a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005042:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1df      	bne.n	800500a <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005052:	641a      	str	r2, [r3, #64]	@ 0x40
 8005054:	e020      	b.n	8005098 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005056:	f7fd fa47 	bl	80024e8 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	2b01      	cmp	r3, #1
 8005062:	d90f      	bls.n	8005084 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800506a:	2b00      	cmp	r3, #0
 800506c:	da0a      	bge.n	8005084 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f043 0208 	orr.w	r2, r3, #8
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2203      	movs	r2, #3
 800507e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e14a      	b.n	800531a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800508a:	2b00      	cmp	r3, #0
 800508c:	dbe3      	blt.n	8005056 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005096:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f003 0310 	and.w	r3, r3, #16
 80050a4:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80050a8:	fa01 f303 	lsl.w	r3, r1, r3
 80050ac:	43db      	mvns	r3, r3
 80050ae:	ea02 0103 	and.w	r1, r2, r3
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f003 0310 	and.w	r3, r3, #16
 80050bc:	409a      	lsls	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f003 0310 	and.w	r3, r3, #16
 80050d2:	21ff      	movs	r1, #255	@ 0xff
 80050d4:	fa01 f303 	lsl.w	r3, r1, r3
 80050d8:	43db      	mvns	r3, r3
 80050da:	ea02 0103 	and.w	r1, r2, r3
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f003 0310 	and.w	r3, r3, #16
 80050e8:	409a      	lsls	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d11d      	bne.n	8005136 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005100:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f003 0310 	and.w	r3, r3, #16
 8005108:	221f      	movs	r2, #31
 800510a:	fa02 f303 	lsl.w	r3, r2, r3
 800510e:	43db      	mvns	r3, r3
 8005110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005112:	4013      	ands	r3, r2
 8005114:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f003 0310 	and.w	r3, r3, #16
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	fa02 f303 	lsl.w	r3, r2, r3
 8005128:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800512a:	4313      	orrs	r3, r2
 800512c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005134:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800513c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f003 0310 	and.w	r3, r3, #16
 8005144:	2207      	movs	r2, #7
 8005146:	fa02 f303 	lsl.w	r3, r2, r3
 800514a:	43db      	mvns	r3, r3
 800514c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800514e:	4013      	ands	r3, r2
 8005150:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d102      	bne.n	8005160 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800515a:	2300      	movs	r3, #0
 800515c:	623b      	str	r3, [r7, #32]
 800515e:	e00f      	b.n	8005180 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	2b02      	cmp	r3, #2
 8005166:	d102      	bne.n	800516e <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005168:	2301      	movs	r3, #1
 800516a:	623b      	str	r3, [r7, #32]
 800516c:	e008      	b.n	8005180 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d102      	bne.n	800517c <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005176:	2301      	movs	r3, #1
 8005178:	623b      	str	r3, [r7, #32]
 800517a:	e001      	b.n	8005180 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800517c:	2300      	movs	r3, #0
 800517e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	689a      	ldr	r2, [r3, #8]
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	4313      	orrs	r3, r2
 800518a:	6a3a      	ldr	r2, [r7, #32]
 800518c:	4313      	orrs	r3, r2
 800518e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f003 0310 	and.w	r3, r3, #16
 8005196:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800519a:	fa02 f303 	lsl.w	r3, r2, r3
 800519e:	43db      	mvns	r3, r3
 80051a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051a2:	4013      	ands	r3, r2
 80051a4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	791b      	ldrb	r3, [r3, #4]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d102      	bne.n	80051b4 <HAL_DAC_ConfigChannel+0x1f8>
 80051ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80051b2:	e000      	b.n	80051b6 <HAL_DAC_ConfigChannel+0x1fa>
 80051b4:	2300      	movs	r3, #0
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f003 0310 	and.w	r3, r3, #16
 80051c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051c6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ca:	43db      	mvns	r3, r3
 80051cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051ce:	4013      	ands	r3, r2
 80051d0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	795b      	ldrb	r3, [r3, #5]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d102      	bne.n	80051e0 <HAL_DAC_ConfigChannel+0x224>
 80051da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80051de:	e000      	b.n	80051e2 <HAL_DAC_ConfigChannel+0x226>
 80051e0:	2300      	movs	r3, #0
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80051e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ea:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80051ee:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d114      	bne.n	8005222 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80051f8:	f001 fac8 	bl	800678c <HAL_RCC_GetHCLKFreq>
 80051fc:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	4a48      	ldr	r2, [pc, #288]	@ (8005324 <HAL_DAC_ConfigChannel+0x368>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d904      	bls.n	8005210 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005208:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800520c:	627b      	str	r3, [r7, #36]	@ 0x24
 800520e:	e00f      	b.n	8005230 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	4a45      	ldr	r2, [pc, #276]	@ (8005328 <HAL_DAC_ConfigChannel+0x36c>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d90a      	bls.n	800522e <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800521e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005220:	e006      	b.n	8005230 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005228:	4313      	orrs	r3, r2
 800522a:	627b      	str	r3, [r7, #36]	@ 0x24
 800522c:	e000      	b.n	8005230 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800522e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f003 0310 	and.w	r3, r3, #16
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	fa02 f303 	lsl.w	r3, r2, r3
 800523c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800523e:	4313      	orrs	r3, r2
 8005240:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005248:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6819      	ldr	r1, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f003 0310 	and.w	r3, r3, #16
 8005256:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800525a:	fa02 f303 	lsl.w	r3, r2, r3
 800525e:	43da      	mvns	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	400a      	ands	r2, r1
 8005266:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f003 0310 	and.w	r3, r3, #16
 8005276:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800527a:	fa02 f303 	lsl.w	r3, r2, r3
 800527e:	43db      	mvns	r3, r3
 8005280:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005282:	4013      	ands	r3, r2
 8005284:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f003 0310 	and.w	r3, r3, #16
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	fa02 f303 	lsl.w	r3, r2, r3
 8005298:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800529a:	4313      	orrs	r3, r2
 800529c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052a4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6819      	ldr	r1, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f003 0310 	and.w	r3, r3, #16
 80052b2:	22c0      	movs	r2, #192	@ 0xc0
 80052b4:	fa02 f303 	lsl.w	r3, r2, r3
 80052b8:	43da      	mvns	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	400a      	ands	r2, r1
 80052c0:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	089b      	lsrs	r3, r3, #2
 80052c8:	f003 030f 	and.w	r3, r3, #15
 80052cc:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	089b      	lsrs	r3, r3, #2
 80052d4:	021b      	lsls	r3, r3, #8
 80052d6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	4313      	orrs	r3, r2
 80052de:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f003 0310 	and.w	r3, r3, #16
 80052ec:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80052f0:	fa01 f303 	lsl.w	r3, r1, r3
 80052f4:	43db      	mvns	r3, r3
 80052f6:	ea02 0103 	and.w	r1, r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f003 0310 	and.w	r3, r3, #16
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	409a      	lsls	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2201      	movs	r2, #1
 8005310:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005318:	7ffb      	ldrb	r3, [r7, #31]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3728      	adds	r7, #40	@ 0x28
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	09896800 	.word	0x09896800
 8005328:	04c4b400 	.word	0x04c4b400

0800532c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e08d      	b.n	800545a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	4b47      	ldr	r3, [pc, #284]	@ (8005464 <HAL_DMA_Init+0x138>)
 8005346:	429a      	cmp	r2, r3
 8005348:	d80f      	bhi.n	800536a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	461a      	mov	r2, r3
 8005350:	4b45      	ldr	r3, [pc, #276]	@ (8005468 <HAL_DMA_Init+0x13c>)
 8005352:	4413      	add	r3, r2
 8005354:	4a45      	ldr	r2, [pc, #276]	@ (800546c <HAL_DMA_Init+0x140>)
 8005356:	fba2 2303 	umull	r2, r3, r2, r3
 800535a:	091b      	lsrs	r3, r3, #4
 800535c:	009a      	lsls	r2, r3, #2
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a42      	ldr	r2, [pc, #264]	@ (8005470 <HAL_DMA_Init+0x144>)
 8005366:	641a      	str	r2, [r3, #64]	@ 0x40
 8005368:	e00e      	b.n	8005388 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	461a      	mov	r2, r3
 8005370:	4b40      	ldr	r3, [pc, #256]	@ (8005474 <HAL_DMA_Init+0x148>)
 8005372:	4413      	add	r3, r2
 8005374:	4a3d      	ldr	r2, [pc, #244]	@ (800546c <HAL_DMA_Init+0x140>)
 8005376:	fba2 2303 	umull	r2, r3, r2, r3
 800537a:	091b      	lsrs	r3, r3, #4
 800537c:	009a      	lsls	r2, r3, #2
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a3c      	ldr	r2, [pc, #240]	@ (8005478 <HAL_DMA_Init+0x14c>)
 8005386:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800539e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80053ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fa76 	bl	80058cc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053e8:	d102      	bne.n	80053f0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053f8:	b2d2      	uxtb	r2, r2
 80053fa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005404:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d010      	beq.n	8005430 <HAL_DMA_Init+0x104>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2b04      	cmp	r3, #4
 8005414:	d80c      	bhi.n	8005430 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fa96 	bl	8005948 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800542c:	605a      	str	r2, [r3, #4]
 800542e:	e008      	b.n	8005442 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	40020407 	.word	0x40020407
 8005468:	bffdfff8 	.word	0xbffdfff8
 800546c:	cccccccd 	.word	0xcccccccd
 8005470:	40020000 	.word	0x40020000
 8005474:	bffdfbf8 	.word	0xbffdfbf8
 8005478:	40020400 	.word	0x40020400

0800547c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
 8005488:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005494:	2b01      	cmp	r3, #1
 8005496:	d101      	bne.n	800549c <HAL_DMA_Start_IT+0x20>
 8005498:	2302      	movs	r3, #2
 800549a:	e066      	b.n	800556a <HAL_DMA_Start_IT+0xee>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d155      	bne.n	800555c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0201 	bic.w	r2, r2, #1
 80054cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	68b9      	ldr	r1, [r7, #8]
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 f9bb 	bl	8005850 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d008      	beq.n	80054f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f042 020e 	orr.w	r2, r2, #14
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	e00f      	b.n	8005514 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 0204 	bic.w	r2, r2, #4
 8005502:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f042 020a 	orr.w	r2, r2, #10
 8005512:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d007      	beq.n	8005532 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800552c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005530:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005536:	2b00      	cmp	r3, #0
 8005538:	d007      	beq.n	800554a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005544:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005548:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f042 0201 	orr.w	r2, r2, #1
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	e005      	b.n	8005568 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005564:	2302      	movs	r3, #2
 8005566:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005568:	7dfb      	ldrb	r3, [r7, #23]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3718      	adds	r7, #24
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005572:	b480      	push	{r7}
 8005574:	b085      	sub	sp, #20
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800557a:	2300      	movs	r3, #0
 800557c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d005      	beq.n	8005596 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2204      	movs	r2, #4
 800558e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	73fb      	strb	r3, [r7, #15]
 8005594:	e037      	b.n	8005606 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 020e 	bic.w	r2, r2, #14
 80055a4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055b4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0201 	bic.w	r2, r2, #1
 80055c4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ca:	f003 021f 	and.w	r2, r3, #31
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d2:	2101      	movs	r1, #1
 80055d4:	fa01 f202 	lsl.w	r2, r1, r2
 80055d8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80055e2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00c      	beq.n	8005606 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055fa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005604:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005616:	7bfb      	ldrb	r3, [r7, #15]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3714      	adds	r7, #20
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800562c:	2300      	movs	r3, #0
 800562e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d00d      	beq.n	8005658 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2204      	movs	r2, #4
 8005640:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	73fb      	strb	r3, [r7, #15]
 8005656:	e047      	b.n	80056e8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 020e 	bic.w	r2, r2, #14
 8005666:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f022 0201 	bic.w	r2, r2, #1
 8005676:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005682:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005686:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800568c:	f003 021f 	and.w	r2, r3, #31
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005694:	2101      	movs	r1, #1
 8005696:	fa01 f202 	lsl.w	r2, r1, r2
 800569a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80056a4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00c      	beq.n	80056c8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056bc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80056c6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d003      	beq.n	80056e8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	4798      	blx	r3
    }
  }
  return status;
 80056e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b084      	sub	sp, #16
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570e:	f003 031f 	and.w	r3, r3, #31
 8005712:	2204      	movs	r2, #4
 8005714:	409a      	lsls	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4013      	ands	r3, r2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d026      	beq.n	800576c <HAL_DMA_IRQHandler+0x7a>
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f003 0304 	and.w	r3, r3, #4
 8005724:	2b00      	cmp	r3, #0
 8005726:	d021      	beq.n	800576c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b00      	cmp	r3, #0
 8005734:	d107      	bne.n	8005746 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 0204 	bic.w	r2, r2, #4
 8005744:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800574a:	f003 021f 	and.w	r2, r3, #31
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005752:	2104      	movs	r1, #4
 8005754:	fa01 f202 	lsl.w	r2, r1, r2
 8005758:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575e:	2b00      	cmp	r3, #0
 8005760:	d071      	beq.n	8005846 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800576a:	e06c      	b.n	8005846 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005770:	f003 031f 	and.w	r3, r3, #31
 8005774:	2202      	movs	r2, #2
 8005776:	409a      	lsls	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4013      	ands	r3, r2
 800577c:	2b00      	cmp	r3, #0
 800577e:	d02e      	beq.n	80057de <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d029      	beq.n	80057de <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0320 	and.w	r3, r3, #32
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10b      	bne.n	80057b0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f022 020a 	bic.w	r2, r2, #10
 80057a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b4:	f003 021f 	and.w	r2, r3, #31
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057bc:	2102      	movs	r1, #2
 80057be:	fa01 f202 	lsl.w	r2, r1, r2
 80057c2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d038      	beq.n	8005846 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80057dc:	e033      	b.n	8005846 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e2:	f003 031f 	and.w	r3, r3, #31
 80057e6:	2208      	movs	r2, #8
 80057e8:	409a      	lsls	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	4013      	ands	r3, r2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d02a      	beq.n	8005848 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	f003 0308 	and.w	r3, r3, #8
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d025      	beq.n	8005848 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 020e 	bic.w	r2, r2, #14
 800580a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005810:	f003 021f 	and.w	r2, r3, #31
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005818:	2101      	movs	r1, #1
 800581a:	fa01 f202 	lsl.w	r2, r1, r2
 800581e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800583a:	2b00      	cmp	r3, #0
 800583c:	d004      	beq.n	8005848 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005846:	bf00      	nop
 8005848:	bf00      	nop
}
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
 800585c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005866:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800586c:	2b00      	cmp	r3, #0
 800586e:	d004      	beq.n	800587a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005878:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800587e:	f003 021f 	and.w	r2, r3, #31
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005886:	2101      	movs	r1, #1
 8005888:	fa01 f202 	lsl.w	r2, r1, r2
 800588c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	2b10      	cmp	r3, #16
 800589c:	d108      	bne.n	80058b0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80058ae:	e007      	b.n	80058c0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	60da      	str	r2, [r3, #12]
}
 80058c0:	bf00      	nop
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b087      	sub	sp, #28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	461a      	mov	r2, r3
 80058da:	4b16      	ldr	r3, [pc, #88]	@ (8005934 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80058dc:	429a      	cmp	r2, r3
 80058de:	d802      	bhi.n	80058e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80058e0:	4b15      	ldr	r3, [pc, #84]	@ (8005938 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80058e2:	617b      	str	r3, [r7, #20]
 80058e4:	e001      	b.n	80058ea <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80058e6:	4b15      	ldr	r3, [pc, #84]	@ (800593c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80058e8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	3b08      	subs	r3, #8
 80058f6:	4a12      	ldr	r2, [pc, #72]	@ (8005940 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80058f8:	fba2 2303 	umull	r2, r3, r2, r3
 80058fc:	091b      	lsrs	r3, r3, #4
 80058fe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005904:	089b      	lsrs	r3, r3, #2
 8005906:	009a      	lsls	r2, r3, #2
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	4413      	add	r3, r2
 800590c:	461a      	mov	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a0b      	ldr	r2, [pc, #44]	@ (8005944 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005916:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f003 031f 	and.w	r3, r3, #31
 800591e:	2201      	movs	r2, #1
 8005920:	409a      	lsls	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005926:	bf00      	nop
 8005928:	371c      	adds	r7, #28
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	40020407 	.word	0x40020407
 8005938:	40020800 	.word	0x40020800
 800593c:	40020820 	.word	0x40020820
 8005940:	cccccccd 	.word	0xcccccccd
 8005944:	40020880 	.word	0x40020880

08005948 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	b2db      	uxtb	r3, r3
 8005956:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	4b0b      	ldr	r3, [pc, #44]	@ (8005988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800595c:	4413      	add	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	461a      	mov	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a08      	ldr	r2, [pc, #32]	@ (800598c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800596a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	3b01      	subs	r3, #1
 8005970:	f003 031f 	and.w	r3, r3, #31
 8005974:	2201      	movs	r2, #1
 8005976:	409a      	lsls	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800597c:	bf00      	nop
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	1000823f 	.word	0x1000823f
 800598c:	40020940 	.word	0x40020940

08005990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800599a:	2300      	movs	r3, #0
 800599c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800599e:	e15a      	b.n	8005c56 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	2101      	movs	r1, #1
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	fa01 f303 	lsl.w	r3, r1, r3
 80059ac:	4013      	ands	r3, r2
 80059ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f000 814c 	beq.w	8005c50 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f003 0303 	and.w	r3, r3, #3
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d005      	beq.n	80059d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d130      	bne.n	8005a32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	2203      	movs	r2, #3
 80059dc:	fa02 f303 	lsl.w	r3, r2, r3
 80059e0:	43db      	mvns	r3, r3
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	4013      	ands	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	68da      	ldr	r2, [r3, #12]
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	005b      	lsls	r3, r3, #1
 80059f0:	fa02 f303 	lsl.w	r3, r2, r3
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a06:	2201      	movs	r2, #1
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0e:	43db      	mvns	r3, r3
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	4013      	ands	r3, r2
 8005a14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	091b      	lsrs	r3, r3, #4
 8005a1c:	f003 0201 	and.w	r2, r3, #1
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	fa02 f303 	lsl.w	r3, r2, r3
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f003 0303 	and.w	r3, r3, #3
 8005a3a:	2b03      	cmp	r3, #3
 8005a3c:	d017      	beq.n	8005a6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	005b      	lsls	r3, r3, #1
 8005a48:	2203      	movs	r2, #3
 8005a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4e:	43db      	mvns	r3, r3
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	4013      	ands	r3, r2
 8005a54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	005b      	lsls	r3, r3, #1
 8005a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f003 0303 	and.w	r3, r3, #3
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d123      	bne.n	8005ac2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	08da      	lsrs	r2, r3, #3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	3208      	adds	r2, #8
 8005a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f003 0307 	and.w	r3, r3, #7
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	220f      	movs	r2, #15
 8005a92:	fa02 f303 	lsl.w	r3, r2, r3
 8005a96:	43db      	mvns	r3, r3
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	691a      	ldr	r2, [r3, #16]
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	08da      	lsrs	r2, r3, #3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	3208      	adds	r2, #8
 8005abc:	6939      	ldr	r1, [r7, #16]
 8005abe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	005b      	lsls	r3, r3, #1
 8005acc:	2203      	movs	r2, #3
 8005ace:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad2:	43db      	mvns	r3, r3
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f003 0203 	and.w	r2, r3, #3
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 80a6 	beq.w	8005c50 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b04:	4b5b      	ldr	r3, [pc, #364]	@ (8005c74 <HAL_GPIO_Init+0x2e4>)
 8005b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b08:	4a5a      	ldr	r2, [pc, #360]	@ (8005c74 <HAL_GPIO_Init+0x2e4>)
 8005b0a:	f043 0301 	orr.w	r3, r3, #1
 8005b0e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005b10:	4b58      	ldr	r3, [pc, #352]	@ (8005c74 <HAL_GPIO_Init+0x2e4>)
 8005b12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	60bb      	str	r3, [r7, #8]
 8005b1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b1c:	4a56      	ldr	r2, [pc, #344]	@ (8005c78 <HAL_GPIO_Init+0x2e8>)
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	089b      	lsrs	r3, r3, #2
 8005b22:	3302      	adds	r3, #2
 8005b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f003 0303 	and.w	r3, r3, #3
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	220f      	movs	r2, #15
 8005b34:	fa02 f303 	lsl.w	r3, r2, r3
 8005b38:	43db      	mvns	r3, r3
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005b46:	d01f      	beq.n	8005b88 <HAL_GPIO_Init+0x1f8>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a4c      	ldr	r2, [pc, #304]	@ (8005c7c <HAL_GPIO_Init+0x2ec>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d019      	beq.n	8005b84 <HAL_GPIO_Init+0x1f4>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a4b      	ldr	r2, [pc, #300]	@ (8005c80 <HAL_GPIO_Init+0x2f0>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d013      	beq.n	8005b80 <HAL_GPIO_Init+0x1f0>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a4a      	ldr	r2, [pc, #296]	@ (8005c84 <HAL_GPIO_Init+0x2f4>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00d      	beq.n	8005b7c <HAL_GPIO_Init+0x1ec>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a49      	ldr	r2, [pc, #292]	@ (8005c88 <HAL_GPIO_Init+0x2f8>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d007      	beq.n	8005b78 <HAL_GPIO_Init+0x1e8>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a48      	ldr	r2, [pc, #288]	@ (8005c8c <HAL_GPIO_Init+0x2fc>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d101      	bne.n	8005b74 <HAL_GPIO_Init+0x1e4>
 8005b70:	2305      	movs	r3, #5
 8005b72:	e00a      	b.n	8005b8a <HAL_GPIO_Init+0x1fa>
 8005b74:	2306      	movs	r3, #6
 8005b76:	e008      	b.n	8005b8a <HAL_GPIO_Init+0x1fa>
 8005b78:	2304      	movs	r3, #4
 8005b7a:	e006      	b.n	8005b8a <HAL_GPIO_Init+0x1fa>
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e004      	b.n	8005b8a <HAL_GPIO_Init+0x1fa>
 8005b80:	2302      	movs	r3, #2
 8005b82:	e002      	b.n	8005b8a <HAL_GPIO_Init+0x1fa>
 8005b84:	2301      	movs	r3, #1
 8005b86:	e000      	b.n	8005b8a <HAL_GPIO_Init+0x1fa>
 8005b88:	2300      	movs	r3, #0
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	f002 0203 	and.w	r2, r2, #3
 8005b90:	0092      	lsls	r2, r2, #2
 8005b92:	4093      	lsls	r3, r2
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b9a:	4937      	ldr	r1, [pc, #220]	@ (8005c78 <HAL_GPIO_Init+0x2e8>)
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	089b      	lsrs	r3, r3, #2
 8005ba0:	3302      	adds	r3, #2
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ba8:	4b39      	ldr	r3, [pc, #228]	@ (8005c90 <HAL_GPIO_Init+0x300>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	43db      	mvns	r3, r3
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d003      	beq.n	8005bcc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005bcc:	4a30      	ldr	r2, [pc, #192]	@ (8005c90 <HAL_GPIO_Init+0x300>)
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005bd2:	4b2f      	ldr	r3, [pc, #188]	@ (8005c90 <HAL_GPIO_Init+0x300>)
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	43db      	mvns	r3, r3
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4013      	ands	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005bf6:	4a26      	ldr	r2, [pc, #152]	@ (8005c90 <HAL_GPIO_Init+0x300>)
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005bfc:	4b24      	ldr	r3, [pc, #144]	@ (8005c90 <HAL_GPIO_Init+0x300>)
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	43db      	mvns	r3, r3
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	4013      	ands	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005c20:	4a1b      	ldr	r2, [pc, #108]	@ (8005c90 <HAL_GPIO_Init+0x300>)
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005c26:	4b1a      	ldr	r3, [pc, #104]	@ (8005c90 <HAL_GPIO_Init+0x300>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	43db      	mvns	r3, r3
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	4013      	ands	r3, r2
 8005c34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005c4a:	4a11      	ldr	r2, [pc, #68]	@ (8005c90 <HAL_GPIO_Init+0x300>)
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	3301      	adds	r3, #1
 8005c54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f47f ae9d 	bne.w	80059a0 <HAL_GPIO_Init+0x10>
  }
}
 8005c66:	bf00      	nop
 8005c68:	bf00      	nop
 8005c6a:	371c      	adds	r7, #28
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	40021000 	.word	0x40021000
 8005c78:	40010000 	.word	0x40010000
 8005c7c:	48000400 	.word	0x48000400
 8005c80:	48000800 	.word	0x48000800
 8005c84:	48000c00 	.word	0x48000c00
 8005c88:	48001000 	.word	0x48001000
 8005c8c:	48001400 	.word	0x48001400
 8005c90:	40010400 	.word	0x40010400

08005c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	807b      	strh	r3, [r7, #2]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ca4:	787b      	ldrb	r3, [r7, #1]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005caa:	887a      	ldrh	r2, [r7, #2]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005cb0:	e002      	b.n	8005cb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005cb2:	887a      	ldrh	r2, [r7, #2]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d141      	bne.n	8005d56 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005cd2:	4b4b      	ldr	r3, [pc, #300]	@ (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cde:	d131      	bne.n	8005d44 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ce0:	4b47      	ldr	r3, [pc, #284]	@ (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ce6:	4a46      	ldr	r2, [pc, #280]	@ (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ce8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005cf0:	4b43      	ldr	r3, [pc, #268]	@ (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005cf8:	4a41      	ldr	r2, [pc, #260]	@ (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005cfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d00:	4b40      	ldr	r3, [pc, #256]	@ (8005e04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2232      	movs	r2, #50	@ 0x32
 8005d06:	fb02 f303 	mul.w	r3, r2, r3
 8005d0a:	4a3f      	ldr	r2, [pc, #252]	@ (8005e08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d10:	0c9b      	lsrs	r3, r3, #18
 8005d12:	3301      	adds	r3, #1
 8005d14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d16:	e002      	b.n	8005d1e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d1e:	4b38      	ldr	r3, [pc, #224]	@ (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d2a:	d102      	bne.n	8005d32 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1f2      	bne.n	8005d18 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d32:	4b33      	ldr	r3, [pc, #204]	@ (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d3e:	d158      	bne.n	8005df2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e057      	b.n	8005df4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d44:	4b2e      	ldr	r3, [pc, #184]	@ (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d4a:	4a2d      	ldr	r2, [pc, #180]	@ (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005d54:	e04d      	b.n	8005df2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d5c:	d141      	bne.n	8005de2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d5e:	4b28      	ldr	r3, [pc, #160]	@ (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005d66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d6a:	d131      	bne.n	8005dd0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d6c:	4b24      	ldr	r3, [pc, #144]	@ (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d72:	4a23      	ldr	r2, [pc, #140]	@ (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d7c:	4b20      	ldr	r3, [pc, #128]	@ (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005d84:	4a1e      	ldr	r2, [pc, #120]	@ (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8005e04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2232      	movs	r2, #50	@ 0x32
 8005d92:	fb02 f303 	mul.w	r3, r2, r3
 8005d96:	4a1c      	ldr	r2, [pc, #112]	@ (8005e08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d98:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9c:	0c9b      	lsrs	r3, r3, #18
 8005d9e:	3301      	adds	r3, #1
 8005da0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005da2:	e002      	b.n	8005daa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	3b01      	subs	r3, #1
 8005da8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005daa:	4b15      	ldr	r3, [pc, #84]	@ (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005db2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005db6:	d102      	bne.n	8005dbe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1f2      	bne.n	8005da4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005dbe:	4b10      	ldr	r3, [pc, #64]	@ (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dca:	d112      	bne.n	8005df2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e011      	b.n	8005df4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ddc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005de0:	e007      	b.n	8005df2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005de2:	4b07      	ldr	r3, [pc, #28]	@ (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005dea:	4a05      	ldr	r2, [pc, #20]	@ (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005df0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	40007000 	.word	0x40007000
 8005e04:	20000000 	.word	0x20000000
 8005e08:	431bde83 	.word	0x431bde83

08005e0c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005e10:	4b05      	ldr	r3, [pc, #20]	@ (8005e28 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	4a04      	ldr	r2, [pc, #16]	@ (8005e28 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005e16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e1a:	6093      	str	r3, [r2, #8]
}
 8005e1c:	bf00      	nop
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	40007000 	.word	0x40007000

08005e2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b088      	sub	sp, #32
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e2fe      	b.n	800643c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d075      	beq.n	8005f36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e4a:	4b97      	ldr	r3, [pc, #604]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f003 030c 	and.w	r3, r3, #12
 8005e52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e54:	4b94      	ldr	r3, [pc, #592]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f003 0303 	and.w	r3, r3, #3
 8005e5c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	2b0c      	cmp	r3, #12
 8005e62:	d102      	bne.n	8005e6a <HAL_RCC_OscConfig+0x3e>
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	d002      	beq.n	8005e70 <HAL_RCC_OscConfig+0x44>
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	2b08      	cmp	r3, #8
 8005e6e:	d10b      	bne.n	8005e88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e70:	4b8d      	ldr	r3, [pc, #564]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d05b      	beq.n	8005f34 <HAL_RCC_OscConfig+0x108>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d157      	bne.n	8005f34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e2d9      	b.n	800643c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e90:	d106      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x74>
 8005e92:	4b85      	ldr	r3, [pc, #532]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a84      	ldr	r2, [pc, #528]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e9c:	6013      	str	r3, [r2, #0]
 8005e9e:	e01d      	b.n	8005edc <HAL_RCC_OscConfig+0xb0>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ea8:	d10c      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x98>
 8005eaa:	4b7f      	ldr	r3, [pc, #508]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a7e      	ldr	r2, [pc, #504]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005eb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	4b7c      	ldr	r3, [pc, #496]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a7b      	ldr	r2, [pc, #492]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ec0:	6013      	str	r3, [r2, #0]
 8005ec2:	e00b      	b.n	8005edc <HAL_RCC_OscConfig+0xb0>
 8005ec4:	4b78      	ldr	r3, [pc, #480]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a77      	ldr	r2, [pc, #476]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005eca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ece:	6013      	str	r3, [r2, #0]
 8005ed0:	4b75      	ldr	r3, [pc, #468]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a74      	ldr	r2, [pc, #464]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005ed6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d013      	beq.n	8005f0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee4:	f7fc fb00 	bl	80024e8 <HAL_GetTick>
 8005ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005eea:	e008      	b.n	8005efe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005eec:	f7fc fafc 	bl	80024e8 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b64      	cmp	r3, #100	@ 0x64
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e29e      	b.n	800643c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005efe:	4b6a      	ldr	r3, [pc, #424]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d0f0      	beq.n	8005eec <HAL_RCC_OscConfig+0xc0>
 8005f0a:	e014      	b.n	8005f36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f0c:	f7fc faec 	bl	80024e8 <HAL_GetTick>
 8005f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f12:	e008      	b.n	8005f26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f14:	f7fc fae8 	bl	80024e8 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b64      	cmp	r3, #100	@ 0x64
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e28a      	b.n	800643c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f26:	4b60      	ldr	r3, [pc, #384]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1f0      	bne.n	8005f14 <HAL_RCC_OscConfig+0xe8>
 8005f32:	e000      	b.n	8005f36 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d075      	beq.n	800602e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f42:	4b59      	ldr	r3, [pc, #356]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f003 030c 	and.w	r3, r3, #12
 8005f4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f4c:	4b56      	ldr	r3, [pc, #344]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	f003 0303 	and.w	r3, r3, #3
 8005f54:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	2b0c      	cmp	r3, #12
 8005f5a:	d102      	bne.n	8005f62 <HAL_RCC_OscConfig+0x136>
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d002      	beq.n	8005f68 <HAL_RCC_OscConfig+0x13c>
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	2b04      	cmp	r3, #4
 8005f66:	d11f      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f68:	4b4f      	ldr	r3, [pc, #316]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d005      	beq.n	8005f80 <HAL_RCC_OscConfig+0x154>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e25d      	b.n	800643c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f80:	4b49      	ldr	r3, [pc, #292]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	061b      	lsls	r3, r3, #24
 8005f8e:	4946      	ldr	r1, [pc, #280]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005f94:	4b45      	ldr	r3, [pc, #276]	@ (80060ac <HAL_RCC_OscConfig+0x280>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fc fa59 	bl	8002450 <HAL_InitTick>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d043      	beq.n	800602c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e249      	b.n	800643c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d023      	beq.n	8005ff8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fb0:	4b3d      	ldr	r3, [pc, #244]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a3c      	ldr	r2, [pc, #240]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005fb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fbc:	f7fc fa94 	bl	80024e8 <HAL_GetTick>
 8005fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fc2:	e008      	b.n	8005fd6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fc4:	f7fc fa90 	bl	80024e8 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e232      	b.n	800643c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fd6:	4b34      	ldr	r3, [pc, #208]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0f0      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fe2:	4b31      	ldr	r3, [pc, #196]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	061b      	lsls	r3, r3, #24
 8005ff0:	492d      	ldr	r1, [pc, #180]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	604b      	str	r3, [r1, #4]
 8005ff6:	e01a      	b.n	800602e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a2a      	ldr	r2, [pc, #168]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005ffe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006004:	f7fc fa70 	bl	80024e8 <HAL_GetTick>
 8006008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800600a:	e008      	b.n	800601e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800600c:	f7fc fa6c 	bl	80024e8 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e20e      	b.n	800643c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800601e:	4b22      	ldr	r3, [pc, #136]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1f0      	bne.n	800600c <HAL_RCC_OscConfig+0x1e0>
 800602a:	e000      	b.n	800602e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800602c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0308 	and.w	r3, r3, #8
 8006036:	2b00      	cmp	r3, #0
 8006038:	d041      	beq.n	80060be <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d01c      	beq.n	800607c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006042:	4b19      	ldr	r3, [pc, #100]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8006044:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006048:	4a17      	ldr	r2, [pc, #92]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 800604a:	f043 0301 	orr.w	r3, r3, #1
 800604e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006052:	f7fc fa49 	bl	80024e8 <HAL_GetTick>
 8006056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006058:	e008      	b.n	800606c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800605a:	f7fc fa45 	bl	80024e8 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	2b02      	cmp	r3, #2
 8006066:	d901      	bls.n	800606c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e1e7      	b.n	800643c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800606c:	4b0e      	ldr	r3, [pc, #56]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 800606e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0ef      	beq.n	800605a <HAL_RCC_OscConfig+0x22e>
 800607a:	e020      	b.n	80060be <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800607c:	4b0a      	ldr	r3, [pc, #40]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 800607e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006082:	4a09      	ldr	r2, [pc, #36]	@ (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8006084:	f023 0301 	bic.w	r3, r3, #1
 8006088:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800608c:	f7fc fa2c 	bl	80024e8 <HAL_GetTick>
 8006090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006092:	e00d      	b.n	80060b0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006094:	f7fc fa28 	bl	80024e8 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d906      	bls.n	80060b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e1ca      	b.n	800643c <HAL_RCC_OscConfig+0x610>
 80060a6:	bf00      	nop
 80060a8:	40021000 	.word	0x40021000
 80060ac:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80060b0:	4b8c      	ldr	r3, [pc, #560]	@ (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 80060b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1ea      	bne.n	8006094 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0304 	and.w	r3, r3, #4
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f000 80a6 	beq.w	8006218 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060cc:	2300      	movs	r3, #0
 80060ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80060d0:	4b84      	ldr	r3, [pc, #528]	@ (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 80060d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d101      	bne.n	80060e0 <HAL_RCC_OscConfig+0x2b4>
 80060dc:	2301      	movs	r3, #1
 80060de:	e000      	b.n	80060e2 <HAL_RCC_OscConfig+0x2b6>
 80060e0:	2300      	movs	r3, #0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00d      	beq.n	8006102 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060e6:	4b7f      	ldr	r3, [pc, #508]	@ (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 80060e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060ea:	4a7e      	ldr	r2, [pc, #504]	@ (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 80060ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80060f2:	4b7c      	ldr	r3, [pc, #496]	@ (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 80060f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060fa:	60fb      	str	r3, [r7, #12]
 80060fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80060fe:	2301      	movs	r3, #1
 8006100:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006102:	4b79      	ldr	r3, [pc, #484]	@ (80062e8 <HAL_RCC_OscConfig+0x4bc>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800610a:	2b00      	cmp	r3, #0
 800610c:	d118      	bne.n	8006140 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800610e:	4b76      	ldr	r3, [pc, #472]	@ (80062e8 <HAL_RCC_OscConfig+0x4bc>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a75      	ldr	r2, [pc, #468]	@ (80062e8 <HAL_RCC_OscConfig+0x4bc>)
 8006114:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006118:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800611a:	f7fc f9e5 	bl	80024e8 <HAL_GetTick>
 800611e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006120:	e008      	b.n	8006134 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006122:	f7fc f9e1 	bl	80024e8 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	2b02      	cmp	r3, #2
 800612e:	d901      	bls.n	8006134 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e183      	b.n	800643c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006134:	4b6c      	ldr	r3, [pc, #432]	@ (80062e8 <HAL_RCC_OscConfig+0x4bc>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800613c:	2b00      	cmp	r3, #0
 800613e:	d0f0      	beq.n	8006122 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d108      	bne.n	800615a <HAL_RCC_OscConfig+0x32e>
 8006148:	4b66      	ldr	r3, [pc, #408]	@ (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 800614a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800614e:	4a65      	ldr	r2, [pc, #404]	@ (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 8006150:	f043 0301 	orr.w	r3, r3, #1
 8006154:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006158:	e024      	b.n	80061a4 <HAL_RCC_OscConfig+0x378>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	2b05      	cmp	r3, #5
 8006160:	d110      	bne.n	8006184 <HAL_RCC_OscConfig+0x358>
 8006162:	4b60      	ldr	r3, [pc, #384]	@ (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 8006164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006168:	4a5e      	ldr	r2, [pc, #376]	@ (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 800616a:	f043 0304 	orr.w	r3, r3, #4
 800616e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006172:	4b5c      	ldr	r3, [pc, #368]	@ (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 8006174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006178:	4a5a      	ldr	r2, [pc, #360]	@ (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 800617a:	f043 0301 	orr.w	r3, r3, #1
 800617e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006182:	e00f      	b.n	80061a4 <HAL_RCC_OscConfig+0x378>
 8006184:	4b57      	ldr	r3, [pc, #348]	@ (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 8006186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800618a:	4a56      	ldr	r2, [pc, #344]	@ (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 800618c:	f023 0301 	bic.w	r3, r3, #1
 8006190:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006194:	4b53      	ldr	r3, [pc, #332]	@ (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 8006196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800619a:	4a52      	ldr	r2, [pc, #328]	@ (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 800619c:	f023 0304 	bic.w	r3, r3, #4
 80061a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d016      	beq.n	80061da <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ac:	f7fc f99c 	bl	80024e8 <HAL_GetTick>
 80061b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061b2:	e00a      	b.n	80061ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061b4:	f7fc f998 	bl	80024e8 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e138      	b.n	800643c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061ca:	4b46      	ldr	r3, [pc, #280]	@ (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 80061cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d0ed      	beq.n	80061b4 <HAL_RCC_OscConfig+0x388>
 80061d8:	e015      	b.n	8006206 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061da:	f7fc f985 	bl	80024e8 <HAL_GetTick>
 80061de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061e0:	e00a      	b.n	80061f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061e2:	f7fc f981 	bl	80024e8 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d901      	bls.n	80061f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e121      	b.n	800643c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061f8:	4b3a      	ldr	r3, [pc, #232]	@ (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 80061fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1ed      	bne.n	80061e2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006206:	7ffb      	ldrb	r3, [r7, #31]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d105      	bne.n	8006218 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800620c:	4b35      	ldr	r3, [pc, #212]	@ (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 800620e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006210:	4a34      	ldr	r2, [pc, #208]	@ (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 8006212:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006216:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0320 	and.w	r3, r3, #32
 8006220:	2b00      	cmp	r3, #0
 8006222:	d03c      	beq.n	800629e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d01c      	beq.n	8006266 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800622c:	4b2d      	ldr	r3, [pc, #180]	@ (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 800622e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006232:	4a2c      	ldr	r2, [pc, #176]	@ (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 8006234:	f043 0301 	orr.w	r3, r3, #1
 8006238:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800623c:	f7fc f954 	bl	80024e8 <HAL_GetTick>
 8006240:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006242:	e008      	b.n	8006256 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006244:	f7fc f950 	bl	80024e8 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	2b02      	cmp	r3, #2
 8006250:	d901      	bls.n	8006256 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e0f2      	b.n	800643c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006256:	4b23      	ldr	r3, [pc, #140]	@ (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 8006258:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800625c:	f003 0302 	and.w	r3, r3, #2
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0ef      	beq.n	8006244 <HAL_RCC_OscConfig+0x418>
 8006264:	e01b      	b.n	800629e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006266:	4b1f      	ldr	r3, [pc, #124]	@ (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 8006268:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800626c:	4a1d      	ldr	r2, [pc, #116]	@ (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 800626e:	f023 0301 	bic.w	r3, r3, #1
 8006272:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006276:	f7fc f937 	bl	80024e8 <HAL_GetTick>
 800627a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800627c:	e008      	b.n	8006290 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800627e:	f7fc f933 	bl	80024e8 <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b02      	cmp	r3, #2
 800628a:	d901      	bls.n	8006290 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e0d5      	b.n	800643c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006290:	4b14      	ldr	r3, [pc, #80]	@ (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 8006292:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1ef      	bne.n	800627e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	69db      	ldr	r3, [r3, #28]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 80c9 	beq.w	800643a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062a8:	4b0e      	ldr	r3, [pc, #56]	@ (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f003 030c 	and.w	r3, r3, #12
 80062b0:	2b0c      	cmp	r3, #12
 80062b2:	f000 8083 	beq.w	80063bc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d15e      	bne.n	800637c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062be:	4b09      	ldr	r3, [pc, #36]	@ (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a08      	ldr	r2, [pc, #32]	@ (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 80062c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ca:	f7fc f90d 	bl	80024e8 <HAL_GetTick>
 80062ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062d0:	e00c      	b.n	80062ec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062d2:	f7fc f909 	bl	80024e8 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d905      	bls.n	80062ec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e0ab      	b.n	800643c <HAL_RCC_OscConfig+0x610>
 80062e4:	40021000 	.word	0x40021000
 80062e8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062ec:	4b55      	ldr	r3, [pc, #340]	@ (8006444 <HAL_RCC_OscConfig+0x618>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1ec      	bne.n	80062d2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062f8:	4b52      	ldr	r3, [pc, #328]	@ (8006444 <HAL_RCC_OscConfig+0x618>)
 80062fa:	68da      	ldr	r2, [r3, #12]
 80062fc:	4b52      	ldr	r3, [pc, #328]	@ (8006448 <HAL_RCC_OscConfig+0x61c>)
 80062fe:	4013      	ands	r3, r2
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	6a11      	ldr	r1, [r2, #32]
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006308:	3a01      	subs	r2, #1
 800630a:	0112      	lsls	r2, r2, #4
 800630c:	4311      	orrs	r1, r2
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006312:	0212      	lsls	r2, r2, #8
 8006314:	4311      	orrs	r1, r2
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800631a:	0852      	lsrs	r2, r2, #1
 800631c:	3a01      	subs	r2, #1
 800631e:	0552      	lsls	r2, r2, #21
 8006320:	4311      	orrs	r1, r2
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006326:	0852      	lsrs	r2, r2, #1
 8006328:	3a01      	subs	r2, #1
 800632a:	0652      	lsls	r2, r2, #25
 800632c:	4311      	orrs	r1, r2
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006332:	06d2      	lsls	r2, r2, #27
 8006334:	430a      	orrs	r2, r1
 8006336:	4943      	ldr	r1, [pc, #268]	@ (8006444 <HAL_RCC_OscConfig+0x618>)
 8006338:	4313      	orrs	r3, r2
 800633a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800633c:	4b41      	ldr	r3, [pc, #260]	@ (8006444 <HAL_RCC_OscConfig+0x618>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a40      	ldr	r2, [pc, #256]	@ (8006444 <HAL_RCC_OscConfig+0x618>)
 8006342:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006346:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006348:	4b3e      	ldr	r3, [pc, #248]	@ (8006444 <HAL_RCC_OscConfig+0x618>)
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	4a3d      	ldr	r2, [pc, #244]	@ (8006444 <HAL_RCC_OscConfig+0x618>)
 800634e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006352:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006354:	f7fc f8c8 	bl	80024e8 <HAL_GetTick>
 8006358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800635a:	e008      	b.n	800636e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800635c:	f7fc f8c4 	bl	80024e8 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b02      	cmp	r3, #2
 8006368:	d901      	bls.n	800636e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e066      	b.n	800643c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800636e:	4b35      	ldr	r3, [pc, #212]	@ (8006444 <HAL_RCC_OscConfig+0x618>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d0f0      	beq.n	800635c <HAL_RCC_OscConfig+0x530>
 800637a:	e05e      	b.n	800643a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800637c:	4b31      	ldr	r3, [pc, #196]	@ (8006444 <HAL_RCC_OscConfig+0x618>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a30      	ldr	r2, [pc, #192]	@ (8006444 <HAL_RCC_OscConfig+0x618>)
 8006382:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006388:	f7fc f8ae 	bl	80024e8 <HAL_GetTick>
 800638c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800638e:	e008      	b.n	80063a2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006390:	f7fc f8aa 	bl	80024e8 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	2b02      	cmp	r3, #2
 800639c:	d901      	bls.n	80063a2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e04c      	b.n	800643c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063a2:	4b28      	ldr	r3, [pc, #160]	@ (8006444 <HAL_RCC_OscConfig+0x618>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1f0      	bne.n	8006390 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80063ae:	4b25      	ldr	r3, [pc, #148]	@ (8006444 <HAL_RCC_OscConfig+0x618>)
 80063b0:	68da      	ldr	r2, [r3, #12]
 80063b2:	4924      	ldr	r1, [pc, #144]	@ (8006444 <HAL_RCC_OscConfig+0x618>)
 80063b4:	4b25      	ldr	r3, [pc, #148]	@ (800644c <HAL_RCC_OscConfig+0x620>)
 80063b6:	4013      	ands	r3, r2
 80063b8:	60cb      	str	r3, [r1, #12]
 80063ba:	e03e      	b.n	800643a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	69db      	ldr	r3, [r3, #28]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d101      	bne.n	80063c8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e039      	b.n	800643c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80063c8:	4b1e      	ldr	r3, [pc, #120]	@ (8006444 <HAL_RCC_OscConfig+0x618>)
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f003 0203 	and.w	r2, r3, #3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d12c      	bne.n	8006436 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e6:	3b01      	subs	r3, #1
 80063e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d123      	bne.n	8006436 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d11b      	bne.n	8006436 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006408:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800640a:	429a      	cmp	r2, r3
 800640c:	d113      	bne.n	8006436 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006418:	085b      	lsrs	r3, r3, #1
 800641a:	3b01      	subs	r3, #1
 800641c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800641e:	429a      	cmp	r2, r3
 8006420:	d109      	bne.n	8006436 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800642c:	085b      	lsrs	r3, r3, #1
 800642e:	3b01      	subs	r3, #1
 8006430:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006432:	429a      	cmp	r2, r3
 8006434:	d001      	beq.n	800643a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e000      	b.n	800643c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3720      	adds	r7, #32
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	40021000 	.word	0x40021000
 8006448:	019f800c 	.word	0x019f800c
 800644c:	feeefffc 	.word	0xfeeefffc

08006450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800645a:	2300      	movs	r3, #0
 800645c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e11e      	b.n	80066a6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006468:	4b91      	ldr	r3, [pc, #580]	@ (80066b0 <HAL_RCC_ClockConfig+0x260>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 030f 	and.w	r3, r3, #15
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	429a      	cmp	r2, r3
 8006474:	d910      	bls.n	8006498 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006476:	4b8e      	ldr	r3, [pc, #568]	@ (80066b0 <HAL_RCC_ClockConfig+0x260>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f023 020f 	bic.w	r2, r3, #15
 800647e:	498c      	ldr	r1, [pc, #560]	@ (80066b0 <HAL_RCC_ClockConfig+0x260>)
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	4313      	orrs	r3, r2
 8006484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006486:	4b8a      	ldr	r3, [pc, #552]	@ (80066b0 <HAL_RCC_ClockConfig+0x260>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 030f 	and.w	r3, r3, #15
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	429a      	cmp	r2, r3
 8006492:	d001      	beq.n	8006498 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e106      	b.n	80066a6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0301 	and.w	r3, r3, #1
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d073      	beq.n	800658c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	2b03      	cmp	r3, #3
 80064aa:	d129      	bne.n	8006500 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064ac:	4b81      	ldr	r3, [pc, #516]	@ (80066b4 <HAL_RCC_ClockConfig+0x264>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d101      	bne.n	80064bc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e0f4      	b.n	80066a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80064bc:	f000 f99e 	bl	80067fc <RCC_GetSysClockFreqFromPLLSource>
 80064c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	4a7c      	ldr	r2, [pc, #496]	@ (80066b8 <HAL_RCC_ClockConfig+0x268>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d93f      	bls.n	800654a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80064ca:	4b7a      	ldr	r3, [pc, #488]	@ (80066b4 <HAL_RCC_ClockConfig+0x264>)
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d009      	beq.n	80064ea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d033      	beq.n	800654a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d12f      	bne.n	800654a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80064ea:	4b72      	ldr	r3, [pc, #456]	@ (80066b4 <HAL_RCC_ClockConfig+0x264>)
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064f2:	4a70      	ldr	r2, [pc, #448]	@ (80066b4 <HAL_RCC_ClockConfig+0x264>)
 80064f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064f8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80064fa:	2380      	movs	r3, #128	@ 0x80
 80064fc:	617b      	str	r3, [r7, #20]
 80064fe:	e024      	b.n	800654a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	2b02      	cmp	r3, #2
 8006506:	d107      	bne.n	8006518 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006508:	4b6a      	ldr	r3, [pc, #424]	@ (80066b4 <HAL_RCC_ClockConfig+0x264>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d109      	bne.n	8006528 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e0c6      	b.n	80066a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006518:	4b66      	ldr	r3, [pc, #408]	@ (80066b4 <HAL_RCC_ClockConfig+0x264>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e0be      	b.n	80066a6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006528:	f000 f8ce 	bl	80066c8 <HAL_RCC_GetSysClockFreq>
 800652c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	4a61      	ldr	r2, [pc, #388]	@ (80066b8 <HAL_RCC_ClockConfig+0x268>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d909      	bls.n	800654a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006536:	4b5f      	ldr	r3, [pc, #380]	@ (80066b4 <HAL_RCC_ClockConfig+0x264>)
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800653e:	4a5d      	ldr	r2, [pc, #372]	@ (80066b4 <HAL_RCC_ClockConfig+0x264>)
 8006540:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006544:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006546:	2380      	movs	r3, #128	@ 0x80
 8006548:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800654a:	4b5a      	ldr	r3, [pc, #360]	@ (80066b4 <HAL_RCC_ClockConfig+0x264>)
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f023 0203 	bic.w	r2, r3, #3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	4957      	ldr	r1, [pc, #348]	@ (80066b4 <HAL_RCC_ClockConfig+0x264>)
 8006558:	4313      	orrs	r3, r2
 800655a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800655c:	f7fb ffc4 	bl	80024e8 <HAL_GetTick>
 8006560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006562:	e00a      	b.n	800657a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006564:	f7fb ffc0 	bl	80024e8 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006572:	4293      	cmp	r3, r2
 8006574:	d901      	bls.n	800657a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e095      	b.n	80066a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800657a:	4b4e      	ldr	r3, [pc, #312]	@ (80066b4 <HAL_RCC_ClockConfig+0x264>)
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f003 020c 	and.w	r2, r3, #12
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	429a      	cmp	r2, r3
 800658a:	d1eb      	bne.n	8006564 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d023      	beq.n	80065e0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0304 	and.w	r3, r3, #4
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d005      	beq.n	80065b0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065a4:	4b43      	ldr	r3, [pc, #268]	@ (80066b4 <HAL_RCC_ClockConfig+0x264>)
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	4a42      	ldr	r2, [pc, #264]	@ (80066b4 <HAL_RCC_ClockConfig+0x264>)
 80065aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80065ae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0308 	and.w	r3, r3, #8
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d007      	beq.n	80065cc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80065bc:	4b3d      	ldr	r3, [pc, #244]	@ (80066b4 <HAL_RCC_ClockConfig+0x264>)
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80065c4:	4a3b      	ldr	r2, [pc, #236]	@ (80066b4 <HAL_RCC_ClockConfig+0x264>)
 80065c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80065ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065cc:	4b39      	ldr	r3, [pc, #228]	@ (80066b4 <HAL_RCC_ClockConfig+0x264>)
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	4936      	ldr	r1, [pc, #216]	@ (80066b4 <HAL_RCC_ClockConfig+0x264>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	608b      	str	r3, [r1, #8]
 80065de:	e008      	b.n	80065f2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	2b80      	cmp	r3, #128	@ 0x80
 80065e4:	d105      	bne.n	80065f2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80065e6:	4b33      	ldr	r3, [pc, #204]	@ (80066b4 <HAL_RCC_ClockConfig+0x264>)
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	4a32      	ldr	r2, [pc, #200]	@ (80066b4 <HAL_RCC_ClockConfig+0x264>)
 80065ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065f0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065f2:	4b2f      	ldr	r3, [pc, #188]	@ (80066b0 <HAL_RCC_ClockConfig+0x260>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 030f 	and.w	r3, r3, #15
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d21d      	bcs.n	800663c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006600:	4b2b      	ldr	r3, [pc, #172]	@ (80066b0 <HAL_RCC_ClockConfig+0x260>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f023 020f 	bic.w	r2, r3, #15
 8006608:	4929      	ldr	r1, [pc, #164]	@ (80066b0 <HAL_RCC_ClockConfig+0x260>)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	4313      	orrs	r3, r2
 800660e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006610:	f7fb ff6a 	bl	80024e8 <HAL_GetTick>
 8006614:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006616:	e00a      	b.n	800662e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006618:	f7fb ff66 	bl	80024e8 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006626:	4293      	cmp	r3, r2
 8006628:	d901      	bls.n	800662e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e03b      	b.n	80066a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800662e:	4b20      	ldr	r3, [pc, #128]	@ (80066b0 <HAL_RCC_ClockConfig+0x260>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 030f 	and.w	r3, r3, #15
 8006636:	683a      	ldr	r2, [r7, #0]
 8006638:	429a      	cmp	r2, r3
 800663a:	d1ed      	bne.n	8006618 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0304 	and.w	r3, r3, #4
 8006644:	2b00      	cmp	r3, #0
 8006646:	d008      	beq.n	800665a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006648:	4b1a      	ldr	r3, [pc, #104]	@ (80066b4 <HAL_RCC_ClockConfig+0x264>)
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	4917      	ldr	r1, [pc, #92]	@ (80066b4 <HAL_RCC_ClockConfig+0x264>)
 8006656:	4313      	orrs	r3, r2
 8006658:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0308 	and.w	r3, r3, #8
 8006662:	2b00      	cmp	r3, #0
 8006664:	d009      	beq.n	800667a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006666:	4b13      	ldr	r3, [pc, #76]	@ (80066b4 <HAL_RCC_ClockConfig+0x264>)
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	00db      	lsls	r3, r3, #3
 8006674:	490f      	ldr	r1, [pc, #60]	@ (80066b4 <HAL_RCC_ClockConfig+0x264>)
 8006676:	4313      	orrs	r3, r2
 8006678:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800667a:	f000 f825 	bl	80066c8 <HAL_RCC_GetSysClockFreq>
 800667e:	4602      	mov	r2, r0
 8006680:	4b0c      	ldr	r3, [pc, #48]	@ (80066b4 <HAL_RCC_ClockConfig+0x264>)
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	091b      	lsrs	r3, r3, #4
 8006686:	f003 030f 	and.w	r3, r3, #15
 800668a:	490c      	ldr	r1, [pc, #48]	@ (80066bc <HAL_RCC_ClockConfig+0x26c>)
 800668c:	5ccb      	ldrb	r3, [r1, r3]
 800668e:	f003 031f 	and.w	r3, r3, #31
 8006692:	fa22 f303 	lsr.w	r3, r2, r3
 8006696:	4a0a      	ldr	r2, [pc, #40]	@ (80066c0 <HAL_RCC_ClockConfig+0x270>)
 8006698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800669a:	4b0a      	ldr	r3, [pc, #40]	@ (80066c4 <HAL_RCC_ClockConfig+0x274>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4618      	mov	r0, r3
 80066a0:	f7fb fed6 	bl	8002450 <HAL_InitTick>
 80066a4:	4603      	mov	r3, r0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3718      	adds	r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	40022000 	.word	0x40022000
 80066b4:	40021000 	.word	0x40021000
 80066b8:	04c4b400 	.word	0x04c4b400
 80066bc:	0800fdc4 	.word	0x0800fdc4
 80066c0:	20000000 	.word	0x20000000
 80066c4:	20000004 	.word	0x20000004

080066c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b087      	sub	sp, #28
 80066cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80066ce:	4b2c      	ldr	r3, [pc, #176]	@ (8006780 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f003 030c 	and.w	r3, r3, #12
 80066d6:	2b04      	cmp	r3, #4
 80066d8:	d102      	bne.n	80066e0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80066da:	4b2a      	ldr	r3, [pc, #168]	@ (8006784 <HAL_RCC_GetSysClockFreq+0xbc>)
 80066dc:	613b      	str	r3, [r7, #16]
 80066de:	e047      	b.n	8006770 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80066e0:	4b27      	ldr	r3, [pc, #156]	@ (8006780 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f003 030c 	and.w	r3, r3, #12
 80066e8:	2b08      	cmp	r3, #8
 80066ea:	d102      	bne.n	80066f2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80066ec:	4b26      	ldr	r3, [pc, #152]	@ (8006788 <HAL_RCC_GetSysClockFreq+0xc0>)
 80066ee:	613b      	str	r3, [r7, #16]
 80066f0:	e03e      	b.n	8006770 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80066f2:	4b23      	ldr	r3, [pc, #140]	@ (8006780 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f003 030c 	and.w	r3, r3, #12
 80066fa:	2b0c      	cmp	r3, #12
 80066fc:	d136      	bne.n	800676c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066fe:	4b20      	ldr	r3, [pc, #128]	@ (8006780 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	f003 0303 	and.w	r3, r3, #3
 8006706:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006708:	4b1d      	ldr	r3, [pc, #116]	@ (8006780 <HAL_RCC_GetSysClockFreq+0xb8>)
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	091b      	lsrs	r3, r3, #4
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	3301      	adds	r3, #1
 8006714:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2b03      	cmp	r3, #3
 800671a:	d10c      	bne.n	8006736 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800671c:	4a1a      	ldr	r2, [pc, #104]	@ (8006788 <HAL_RCC_GetSysClockFreq+0xc0>)
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	fbb2 f3f3 	udiv	r3, r2, r3
 8006724:	4a16      	ldr	r2, [pc, #88]	@ (8006780 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006726:	68d2      	ldr	r2, [r2, #12]
 8006728:	0a12      	lsrs	r2, r2, #8
 800672a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800672e:	fb02 f303 	mul.w	r3, r2, r3
 8006732:	617b      	str	r3, [r7, #20]
      break;
 8006734:	e00c      	b.n	8006750 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006736:	4a13      	ldr	r2, [pc, #76]	@ (8006784 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	fbb2 f3f3 	udiv	r3, r2, r3
 800673e:	4a10      	ldr	r2, [pc, #64]	@ (8006780 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006740:	68d2      	ldr	r2, [r2, #12]
 8006742:	0a12      	lsrs	r2, r2, #8
 8006744:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006748:	fb02 f303 	mul.w	r3, r2, r3
 800674c:	617b      	str	r3, [r7, #20]
      break;
 800674e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006750:	4b0b      	ldr	r3, [pc, #44]	@ (8006780 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	0e5b      	lsrs	r3, r3, #25
 8006756:	f003 0303 	and.w	r3, r3, #3
 800675a:	3301      	adds	r3, #1
 800675c:	005b      	lsls	r3, r3, #1
 800675e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	fbb2 f3f3 	udiv	r3, r2, r3
 8006768:	613b      	str	r3, [r7, #16]
 800676a:	e001      	b.n	8006770 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800676c:	2300      	movs	r3, #0
 800676e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006770:	693b      	ldr	r3, [r7, #16]
}
 8006772:	4618      	mov	r0, r3
 8006774:	371c      	adds	r7, #28
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	40021000 	.word	0x40021000
 8006784:	00f42400 	.word	0x00f42400
 8006788:	016e3600 	.word	0x016e3600

0800678c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800678c:	b480      	push	{r7}
 800678e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006790:	4b03      	ldr	r3, [pc, #12]	@ (80067a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006792:	681b      	ldr	r3, [r3, #0]
}
 8006794:	4618      	mov	r0, r3
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	20000000 	.word	0x20000000

080067a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80067a8:	f7ff fff0 	bl	800678c <HAL_RCC_GetHCLKFreq>
 80067ac:	4602      	mov	r2, r0
 80067ae:	4b06      	ldr	r3, [pc, #24]	@ (80067c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	0a1b      	lsrs	r3, r3, #8
 80067b4:	f003 0307 	and.w	r3, r3, #7
 80067b8:	4904      	ldr	r1, [pc, #16]	@ (80067cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80067ba:	5ccb      	ldrb	r3, [r1, r3]
 80067bc:	f003 031f 	and.w	r3, r3, #31
 80067c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	40021000 	.word	0x40021000
 80067cc:	0800fdd4 	.word	0x0800fdd4

080067d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80067d4:	f7ff ffda 	bl	800678c <HAL_RCC_GetHCLKFreq>
 80067d8:	4602      	mov	r2, r0
 80067da:	4b06      	ldr	r3, [pc, #24]	@ (80067f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	0adb      	lsrs	r3, r3, #11
 80067e0:	f003 0307 	and.w	r3, r3, #7
 80067e4:	4904      	ldr	r1, [pc, #16]	@ (80067f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80067e6:	5ccb      	ldrb	r3, [r1, r3]
 80067e8:	f003 031f 	and.w	r3, r3, #31
 80067ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	40021000 	.word	0x40021000
 80067f8:	0800fdd4 	.word	0x0800fdd4

080067fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006802:	4b1e      	ldr	r3, [pc, #120]	@ (800687c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f003 0303 	and.w	r3, r3, #3
 800680a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800680c:	4b1b      	ldr	r3, [pc, #108]	@ (800687c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	091b      	lsrs	r3, r3, #4
 8006812:	f003 030f 	and.w	r3, r3, #15
 8006816:	3301      	adds	r3, #1
 8006818:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	2b03      	cmp	r3, #3
 800681e:	d10c      	bne.n	800683a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006820:	4a17      	ldr	r2, [pc, #92]	@ (8006880 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	fbb2 f3f3 	udiv	r3, r2, r3
 8006828:	4a14      	ldr	r2, [pc, #80]	@ (800687c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800682a:	68d2      	ldr	r2, [r2, #12]
 800682c:	0a12      	lsrs	r2, r2, #8
 800682e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006832:	fb02 f303 	mul.w	r3, r2, r3
 8006836:	617b      	str	r3, [r7, #20]
    break;
 8006838:	e00c      	b.n	8006854 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800683a:	4a12      	ldr	r2, [pc, #72]	@ (8006884 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006842:	4a0e      	ldr	r2, [pc, #56]	@ (800687c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006844:	68d2      	ldr	r2, [r2, #12]
 8006846:	0a12      	lsrs	r2, r2, #8
 8006848:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800684c:	fb02 f303 	mul.w	r3, r2, r3
 8006850:	617b      	str	r3, [r7, #20]
    break;
 8006852:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006854:	4b09      	ldr	r3, [pc, #36]	@ (800687c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	0e5b      	lsrs	r3, r3, #25
 800685a:	f003 0303 	and.w	r3, r3, #3
 800685e:	3301      	adds	r3, #1
 8006860:	005b      	lsls	r3, r3, #1
 8006862:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	fbb2 f3f3 	udiv	r3, r2, r3
 800686c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800686e:	687b      	ldr	r3, [r7, #4]
}
 8006870:	4618      	mov	r0, r3
 8006872:	371c      	adds	r7, #28
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	40021000 	.word	0x40021000
 8006880:	016e3600 	.word	0x016e3600
 8006884:	00f42400 	.word	0x00f42400

08006888 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006890:	2300      	movs	r3, #0
 8006892:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006894:	2300      	movs	r3, #0
 8006896:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f000 8098 	beq.w	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068a6:	2300      	movs	r3, #0
 80068a8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068aa:	4b43      	ldr	r3, [pc, #268]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10d      	bne.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068b6:	4b40      	ldr	r3, [pc, #256]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068ba:	4a3f      	ldr	r2, [pc, #252]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80068c2:	4b3d      	ldr	r3, [pc, #244]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068ca:	60bb      	str	r3, [r7, #8]
 80068cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068ce:	2301      	movs	r3, #1
 80068d0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068d2:	4b3a      	ldr	r3, [pc, #232]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a39      	ldr	r2, [pc, #228]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80068d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068de:	f7fb fe03 	bl	80024e8 <HAL_GetTick>
 80068e2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068e4:	e009      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068e6:	f7fb fdff 	bl	80024e8 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d902      	bls.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	74fb      	strb	r3, [r7, #19]
        break;
 80068f8:	e005      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068fa:	4b30      	ldr	r3, [pc, #192]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0ef      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006906:	7cfb      	ldrb	r3, [r7, #19]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d159      	bne.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800690c:	4b2a      	ldr	r3, [pc, #168]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800690e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006912:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006916:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d01e      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	429a      	cmp	r2, r3
 8006926:	d019      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006928:	4b23      	ldr	r3, [pc, #140]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800692a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800692e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006932:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006934:	4b20      	ldr	r3, [pc, #128]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800693a:	4a1f      	ldr	r2, [pc, #124]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800693c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006940:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006944:	4b1c      	ldr	r3, [pc, #112]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800694a:	4a1b      	ldr	r2, [pc, #108]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800694c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006950:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006954:	4a18      	ldr	r2, [pc, #96]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d016      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006966:	f7fb fdbf 	bl	80024e8 <HAL_GetTick>
 800696a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800696c:	e00b      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800696e:	f7fb fdbb 	bl	80024e8 <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	f241 3288 	movw	r2, #5000	@ 0x1388
 800697c:	4293      	cmp	r3, r2
 800697e:	d902      	bls.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	74fb      	strb	r3, [r7, #19]
            break;
 8006984:	e006      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006986:	4b0c      	ldr	r3, [pc, #48]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800698c:	f003 0302 	and.w	r3, r3, #2
 8006990:	2b00      	cmp	r3, #0
 8006992:	d0ec      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006994:	7cfb      	ldrb	r3, [r7, #19]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10b      	bne.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800699a:	4b07      	ldr	r3, [pc, #28]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800699c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a8:	4903      	ldr	r1, [pc, #12]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80069b0:	e008      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069b2:	7cfb      	ldrb	r3, [r7, #19]
 80069b4:	74bb      	strb	r3, [r7, #18]
 80069b6:	e005      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80069b8:	40021000 	.word	0x40021000
 80069bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c0:	7cfb      	ldrb	r3, [r7, #19]
 80069c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069c4:	7c7b      	ldrb	r3, [r7, #17]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d105      	bne.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069ca:	4ba6      	ldr	r3, [pc, #664]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ce:	4aa5      	ldr	r2, [pc, #660]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00a      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80069e2:	4ba0      	ldr	r3, [pc, #640]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069e8:	f023 0203 	bic.w	r2, r3, #3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	499c      	ldr	r1, [pc, #624]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0302 	and.w	r3, r3, #2
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00a      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a04:	4b97      	ldr	r3, [pc, #604]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a0a:	f023 020c 	bic.w	r2, r3, #12
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	4994      	ldr	r1, [pc, #592]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0304 	and.w	r3, r3, #4
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00a      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a26:	4b8f      	ldr	r3, [pc, #572]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a2c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	498b      	ldr	r1, [pc, #556]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0308 	and.w	r3, r3, #8
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00a      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a48:	4b86      	ldr	r3, [pc, #536]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a4e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	4983      	ldr	r1, [pc, #524]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0320 	and.w	r3, r3, #32
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00a      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a6a:	4b7e      	ldr	r3, [pc, #504]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a70:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	497a      	ldr	r1, [pc, #488]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00a      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a8c:	4b75      	ldr	r3, [pc, #468]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a92:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	4972      	ldr	r1, [pc, #456]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00a      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006aae:	4b6d      	ldr	r3, [pc, #436]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ab4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	4969      	ldr	r1, [pc, #420]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00a      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ad0:	4b64      	ldr	r3, [pc, #400]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ad6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	4961      	ldr	r1, [pc, #388]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00a      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006af2:	4b5c      	ldr	r3, [pc, #368]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006af8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b00:	4958      	ldr	r1, [pc, #352]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d015      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b14:	4b53      	ldr	r3, [pc, #332]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b22:	4950      	ldr	r1, [pc, #320]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b32:	d105      	bne.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b34:	4b4b      	ldr	r3, [pc, #300]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	4a4a      	ldr	r2, [pc, #296]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b3e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d015      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b4c:	4b45      	ldr	r3, [pc, #276]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b52:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5a:	4942      	ldr	r1, [pc, #264]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b6a:	d105      	bne.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b6c:	4b3d      	ldr	r3, [pc, #244]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	4a3c      	ldr	r2, [pc, #240]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b76:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d015      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006b84:	4b37      	ldr	r3, [pc, #220]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b8a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b92:	4934      	ldr	r1, [pc, #208]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b94:	4313      	orrs	r3, r2
 8006b96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ba2:	d105      	bne.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ba4:	4b2f      	ldr	r3, [pc, #188]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	4a2e      	ldr	r2, [pc, #184]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006baa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d015      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bbc:	4b29      	ldr	r3, [pc, #164]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bc2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bca:	4926      	ldr	r1, [pc, #152]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bda:	d105      	bne.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bdc:	4b21      	ldr	r3, [pc, #132]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	4a20      	ldr	r2, [pc, #128]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006be2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006be6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d015      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bfa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c02:	4918      	ldr	r1, [pc, #96]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c12:	d105      	bne.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c14:	4b13      	ldr	r3, [pc, #76]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	4a12      	ldr	r2, [pc, #72]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c1e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d015      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c32:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c3a:	490a      	ldr	r1, [pc, #40]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c4a:	d105      	bne.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006c4c:	4b05      	ldr	r3, [pc, #20]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	4a04      	ldr	r2, [pc, #16]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c56:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006c58:	7cbb      	ldrb	r3, [r7, #18]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3718      	adds	r7, #24
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	40021000 	.word	0x40021000

08006c68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e09d      	b.n	8006db6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d108      	bne.n	8006c94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c8a:	d009      	beq.n	8006ca0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	61da      	str	r2, [r3, #28]
 8006c92:	e005      	b.n	8006ca0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d106      	bne.n	8006cc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7fa fe38 	bl	8001930 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cd6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ce0:	d902      	bls.n	8006ce8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60fb      	str	r3, [r7, #12]
 8006ce6:	e002      	b.n	8006cee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006ce8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006cec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006cf6:	d007      	beq.n	8006d08 <HAL_SPI_Init+0xa0>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d00:	d002      	beq.n	8006d08 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006d18:	431a      	orrs	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	431a      	orrs	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d36:	431a      	orrs	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	69db      	ldr	r3, [r3, #28]
 8006d3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d40:	431a      	orrs	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d4a:	ea42 0103 	orr.w	r1, r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d52:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	0c1b      	lsrs	r3, r3, #16
 8006d64:	f003 0204 	and.w	r2, r3, #4
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d6c:	f003 0310 	and.w	r3, r3, #16
 8006d70:	431a      	orrs	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d76:	f003 0308 	and.w	r3, r3, #8
 8006d7a:	431a      	orrs	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006d84:	ea42 0103 	orr.w	r1, r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	430a      	orrs	r2, r1
 8006d94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	69da      	ldr	r2, [r3, #28]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006da4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b08a      	sub	sp, #40	@ 0x28
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	60f8      	str	r0, [r7, #12]
 8006dc6:	60b9      	str	r1, [r7, #8]
 8006dc8:	607a      	str	r2, [r7, #4]
 8006dca:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d101      	bne.n	8006de4 <HAL_SPI_TransmitReceive+0x26>
 8006de0:	2302      	movs	r3, #2
 8006de2:	e20a      	b.n	80071fa <HAL_SPI_TransmitReceive+0x43c>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006dec:	f7fb fb7c 	bl	80024e8 <HAL_GetTick>
 8006df0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006df8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006e00:	887b      	ldrh	r3, [r7, #2]
 8006e02:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006e04:	887b      	ldrh	r3, [r7, #2]
 8006e06:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e08:	7efb      	ldrb	r3, [r7, #27]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d00e      	beq.n	8006e2c <HAL_SPI_TransmitReceive+0x6e>
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e14:	d106      	bne.n	8006e24 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d102      	bne.n	8006e24 <HAL_SPI_TransmitReceive+0x66>
 8006e1e:	7efb      	ldrb	r3, [r7, #27]
 8006e20:	2b04      	cmp	r3, #4
 8006e22:	d003      	beq.n	8006e2c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006e24:	2302      	movs	r3, #2
 8006e26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006e2a:	e1e0      	b.n	80071ee <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d005      	beq.n	8006e3e <HAL_SPI_TransmitReceive+0x80>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <HAL_SPI_TransmitReceive+0x80>
 8006e38:	887b      	ldrh	r3, [r7, #2]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d103      	bne.n	8006e46 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006e44:	e1d3      	b.n	80071ee <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b04      	cmp	r3, #4
 8006e50:	d003      	beq.n	8006e5a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2205      	movs	r2, #5
 8006e56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	887a      	ldrh	r2, [r7, #2]
 8006e6a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	887a      	ldrh	r2, [r7, #2]
 8006e72:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	887a      	ldrh	r2, [r7, #2]
 8006e80:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	887a      	ldrh	r2, [r7, #2]
 8006e86:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e9c:	d802      	bhi.n	8006ea4 <HAL_SPI_TransmitReceive+0xe6>
 8006e9e:	8a3b      	ldrh	r3, [r7, #16]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d908      	bls.n	8006eb6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	685a      	ldr	r2, [r3, #4]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006eb2:	605a      	str	r2, [r3, #4]
 8006eb4:	e007      	b.n	8006ec6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006ec4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ed0:	2b40      	cmp	r3, #64	@ 0x40
 8006ed2:	d007      	beq.n	8006ee4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ee2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006eec:	f240 8081 	bls.w	8006ff2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <HAL_SPI_TransmitReceive+0x140>
 8006ef8:	8a7b      	ldrh	r3, [r7, #18]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d16d      	bne.n	8006fda <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f02:	881a      	ldrh	r2, [r3, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f0e:	1c9a      	adds	r2, r3, #2
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f22:	e05a      	b.n	8006fda <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f003 0302 	and.w	r3, r3, #2
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d11b      	bne.n	8006f6a <HAL_SPI_TransmitReceive+0x1ac>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d016      	beq.n	8006f6a <HAL_SPI_TransmitReceive+0x1ac>
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d113      	bne.n	8006f6a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f46:	881a      	ldrh	r2, [r3, #0]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f52:	1c9a      	adds	r2, r3, #2
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f66:	2300      	movs	r3, #0
 8006f68:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d11c      	bne.n	8006fb2 <HAL_SPI_TransmitReceive+0x1f4>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d016      	beq.n	8006fb2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68da      	ldr	r2, [r3, #12]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f8e:	b292      	uxth	r2, r2
 8006f90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f96:	1c9a      	adds	r2, r3, #2
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006fb2:	f7fb fa99 	bl	80024e8 <HAL_GetTick>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d80b      	bhi.n	8006fda <HAL_SPI_TransmitReceive+0x21c>
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc8:	d007      	beq.n	8006fda <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006fd8:	e109      	b.n	80071ee <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d19f      	bne.n	8006f24 <HAL_SPI_TransmitReceive+0x166>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d199      	bne.n	8006f24 <HAL_SPI_TransmitReceive+0x166>
 8006ff0:	e0e3      	b.n	80071ba <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d003      	beq.n	8007002 <HAL_SPI_TransmitReceive+0x244>
 8006ffa:	8a7b      	ldrh	r3, [r7, #18]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	f040 80cf 	bne.w	80071a0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007006:	b29b      	uxth	r3, r3
 8007008:	2b01      	cmp	r3, #1
 800700a:	d912      	bls.n	8007032 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007010:	881a      	ldrh	r2, [r3, #0]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800701c:	1c9a      	adds	r2, r3, #2
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007026:	b29b      	uxth	r3, r3
 8007028:	3b02      	subs	r3, #2
 800702a:	b29a      	uxth	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007030:	e0b6      	b.n	80071a0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	330c      	adds	r3, #12
 800703c:	7812      	ldrb	r2, [r2, #0]
 800703e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007044:	1c5a      	adds	r2, r3, #1
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800704e:	b29b      	uxth	r3, r3
 8007050:	3b01      	subs	r3, #1
 8007052:	b29a      	uxth	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007058:	e0a2      	b.n	80071a0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f003 0302 	and.w	r3, r3, #2
 8007064:	2b02      	cmp	r3, #2
 8007066:	d134      	bne.n	80070d2 <HAL_SPI_TransmitReceive+0x314>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800706c:	b29b      	uxth	r3, r3
 800706e:	2b00      	cmp	r3, #0
 8007070:	d02f      	beq.n	80070d2 <HAL_SPI_TransmitReceive+0x314>
 8007072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007074:	2b01      	cmp	r3, #1
 8007076:	d12c      	bne.n	80070d2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800707c:	b29b      	uxth	r3, r3
 800707e:	2b01      	cmp	r3, #1
 8007080:	d912      	bls.n	80070a8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007086:	881a      	ldrh	r2, [r3, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007092:	1c9a      	adds	r2, r3, #2
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800709c:	b29b      	uxth	r3, r3
 800709e:	3b02      	subs	r3, #2
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80070a6:	e012      	b.n	80070ce <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	330c      	adds	r3, #12
 80070b2:	7812      	ldrb	r2, [r2, #0]
 80070b4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ba:	1c5a      	adds	r2, r3, #1
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	3b01      	subs	r3, #1
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070ce:	2300      	movs	r3, #0
 80070d0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d148      	bne.n	8007172 <HAL_SPI_TransmitReceive+0x3b4>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d042      	beq.n	8007172 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d923      	bls.n	8007140 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68da      	ldr	r2, [r3, #12]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007102:	b292      	uxth	r2, r2
 8007104:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800710a:	1c9a      	adds	r2, r3, #2
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007116:	b29b      	uxth	r3, r3
 8007118:	3b02      	subs	r3, #2
 800711a:	b29a      	uxth	r2, r3
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007128:	b29b      	uxth	r3, r3
 800712a:	2b01      	cmp	r3, #1
 800712c:	d81f      	bhi.n	800716e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	685a      	ldr	r2, [r3, #4]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800713c:	605a      	str	r2, [r3, #4]
 800713e:	e016      	b.n	800716e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f103 020c 	add.w	r2, r3, #12
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800714c:	7812      	ldrb	r2, [r2, #0]
 800714e:	b2d2      	uxtb	r2, r2
 8007150:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007156:	1c5a      	adds	r2, r3, #1
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007162:	b29b      	uxth	r3, r3
 8007164:	3b01      	subs	r3, #1
 8007166:	b29a      	uxth	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800716e:	2301      	movs	r3, #1
 8007170:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007172:	f7fb f9b9 	bl	80024e8 <HAL_GetTick>
 8007176:	4602      	mov	r2, r0
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800717e:	429a      	cmp	r2, r3
 8007180:	d803      	bhi.n	800718a <HAL_SPI_TransmitReceive+0x3cc>
 8007182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007188:	d102      	bne.n	8007190 <HAL_SPI_TransmitReceive+0x3d2>
 800718a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718c:	2b00      	cmp	r3, #0
 800718e:	d107      	bne.n	80071a0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007190:	2303      	movs	r3, #3
 8007192:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800719e:	e026      	b.n	80071ee <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f47f af57 	bne.w	800705a <HAL_SPI_TransmitReceive+0x29c>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f47f af50 	bne.w	800705a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071ba:	69fa      	ldr	r2, [r7, #28]
 80071bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f000 f94c 	bl	800745c <SPI_EndRxTxTransaction>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d005      	beq.n	80071d6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2220      	movs	r2, #32
 80071d4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d003      	beq.n	80071e6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071e4:	e003      	b.n	80071ee <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80071f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3728      	adds	r7, #40	@ 0x28
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007202:	b480      	push	{r7}
 8007204:	b083      	sub	sp, #12
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007210:	b2db      	uxtb	r3, r3
}
 8007212:	4618      	mov	r0, r3
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
	...

08007220 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b088      	sub	sp, #32
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	603b      	str	r3, [r7, #0]
 800722c:	4613      	mov	r3, r2
 800722e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007230:	f7fb f95a 	bl	80024e8 <HAL_GetTick>
 8007234:	4602      	mov	r2, r0
 8007236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007238:	1a9b      	subs	r3, r3, r2
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	4413      	add	r3, r2
 800723e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007240:	f7fb f952 	bl	80024e8 <HAL_GetTick>
 8007244:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007246:	4b39      	ldr	r3, [pc, #228]	@ (800732c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	015b      	lsls	r3, r3, #5
 800724c:	0d1b      	lsrs	r3, r3, #20
 800724e:	69fa      	ldr	r2, [r7, #28]
 8007250:	fb02 f303 	mul.w	r3, r2, r3
 8007254:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007256:	e054      	b.n	8007302 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725e:	d050      	beq.n	8007302 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007260:	f7fb f942 	bl	80024e8 <HAL_GetTick>
 8007264:	4602      	mov	r2, r0
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	69fa      	ldr	r2, [r7, #28]
 800726c:	429a      	cmp	r2, r3
 800726e:	d902      	bls.n	8007276 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d13d      	bne.n	80072f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007284:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800728e:	d111      	bne.n	80072b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007298:	d004      	beq.n	80072a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072a2:	d107      	bne.n	80072b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072bc:	d10f      	bne.n	80072de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80072cc:	601a      	str	r2, [r3, #0]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80072dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e017      	b.n	8007322 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d101      	bne.n	80072fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80072f8:	2300      	movs	r3, #0
 80072fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	3b01      	subs	r3, #1
 8007300:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	689a      	ldr	r2, [r3, #8]
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	4013      	ands	r3, r2
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	429a      	cmp	r2, r3
 8007310:	bf0c      	ite	eq
 8007312:	2301      	moveq	r3, #1
 8007314:	2300      	movne	r3, #0
 8007316:	b2db      	uxtb	r3, r3
 8007318:	461a      	mov	r2, r3
 800731a:	79fb      	ldrb	r3, [r7, #7]
 800731c:	429a      	cmp	r2, r3
 800731e:	d19b      	bne.n	8007258 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3720      	adds	r7, #32
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	20000000 	.word	0x20000000

08007330 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b08a      	sub	sp, #40	@ 0x28
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
 800733c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800733e:	2300      	movs	r3, #0
 8007340:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007342:	f7fb f8d1 	bl	80024e8 <HAL_GetTick>
 8007346:	4602      	mov	r2, r0
 8007348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734a:	1a9b      	subs	r3, r3, r2
 800734c:	683a      	ldr	r2, [r7, #0]
 800734e:	4413      	add	r3, r2
 8007350:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007352:	f7fb f8c9 	bl	80024e8 <HAL_GetTick>
 8007356:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	330c      	adds	r3, #12
 800735e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007360:	4b3d      	ldr	r3, [pc, #244]	@ (8007458 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	4613      	mov	r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	00da      	lsls	r2, r3, #3
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	0d1b      	lsrs	r3, r3, #20
 8007370:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007372:	fb02 f303 	mul.w	r3, r2, r3
 8007376:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007378:	e060      	b.n	800743c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007380:	d107      	bne.n	8007392 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d104      	bne.n	8007392 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	b2db      	uxtb	r3, r3
 800738e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007390:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007398:	d050      	beq.n	800743c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800739a:	f7fb f8a5 	bl	80024e8 <HAL_GetTick>
 800739e:	4602      	mov	r2, r0
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d902      	bls.n	80073b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80073aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d13d      	bne.n	800742c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	685a      	ldr	r2, [r3, #4]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80073be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073c8:	d111      	bne.n	80073ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073d2:	d004      	beq.n	80073de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073dc:	d107      	bne.n	80073ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073f6:	d10f      	bne.n	8007418 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007406:	601a      	str	r2, [r3, #0]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007416:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	e010      	b.n	800744e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d101      	bne.n	8007436 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007432:	2300      	movs	r3, #0
 8007434:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	3b01      	subs	r3, #1
 800743a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689a      	ldr	r2, [r3, #8]
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	4013      	ands	r3, r2
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	429a      	cmp	r2, r3
 800744a:	d196      	bne.n	800737a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3728      	adds	r7, #40	@ 0x28
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	20000000 	.word	0x20000000

0800745c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af02      	add	r7, sp, #8
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2200      	movs	r2, #0
 8007470:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f7ff ff5b 	bl	8007330 <SPI_WaitFifoStateUntilTimeout>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d007      	beq.n	8007490 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007484:	f043 0220 	orr.w	r2, r3, #32
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e027      	b.n	80074e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	2200      	movs	r2, #0
 8007498:	2180      	movs	r1, #128	@ 0x80
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f7ff fec0 	bl	8007220 <SPI_WaitFlagStateUntilTimeout>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d007      	beq.n	80074b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074aa:	f043 0220 	orr.w	r2, r3, #32
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	e014      	b.n	80074e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	2200      	movs	r2, #0
 80074be:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f7ff ff34 	bl	8007330 <SPI_WaitFifoStateUntilTimeout>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d007      	beq.n	80074de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074d2:	f043 0220 	orr.w	r2, r3, #32
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e000      	b.n	80074e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e049      	b.n	800758e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b00      	cmp	r3, #0
 8007504:	d106      	bne.n	8007514 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7fa fdb0 	bl	8002074 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2202      	movs	r2, #2
 8007518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	3304      	adds	r3, #4
 8007524:	4619      	mov	r1, r3
 8007526:	4610      	mov	r0, r2
 8007528:	f000 fc9e 	bl	8007e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d001      	beq.n	80075b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e042      	b.n	8007636 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2202      	movs	r2, #2
 80075b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a21      	ldr	r2, [pc, #132]	@ (8007644 <HAL_TIM_Base_Start+0xac>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d018      	beq.n	80075f4 <HAL_TIM_Base_Start+0x5c>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075ca:	d013      	beq.n	80075f4 <HAL_TIM_Base_Start+0x5c>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a1d      	ldr	r2, [pc, #116]	@ (8007648 <HAL_TIM_Base_Start+0xb0>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d00e      	beq.n	80075f4 <HAL_TIM_Base_Start+0x5c>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a1c      	ldr	r2, [pc, #112]	@ (800764c <HAL_TIM_Base_Start+0xb4>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d009      	beq.n	80075f4 <HAL_TIM_Base_Start+0x5c>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a1a      	ldr	r2, [pc, #104]	@ (8007650 <HAL_TIM_Base_Start+0xb8>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d004      	beq.n	80075f4 <HAL_TIM_Base_Start+0x5c>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a19      	ldr	r2, [pc, #100]	@ (8007654 <HAL_TIM_Base_Start+0xbc>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d115      	bne.n	8007620 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	689a      	ldr	r2, [r3, #8]
 80075fa:	4b17      	ldr	r3, [pc, #92]	@ (8007658 <HAL_TIM_Base_Start+0xc0>)
 80075fc:	4013      	ands	r3, r2
 80075fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2b06      	cmp	r3, #6
 8007604:	d015      	beq.n	8007632 <HAL_TIM_Base_Start+0x9a>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800760c:	d011      	beq.n	8007632 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f042 0201 	orr.w	r2, r2, #1
 800761c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800761e:	e008      	b.n	8007632 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f042 0201 	orr.w	r2, r2, #1
 800762e:	601a      	str	r2, [r3, #0]
 8007630:	e000      	b.n	8007634 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007632:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	40012c00 	.word	0x40012c00
 8007648:	40000400 	.word	0x40000400
 800764c:	40000800 	.word	0x40000800
 8007650:	40013400 	.word	0x40013400
 8007654:	40014000 	.word	0x40014000
 8007658:	00010007 	.word	0x00010007

0800765c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d101      	bne.n	800766e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e049      	b.n	8007702 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d106      	bne.n	8007688 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f841 	bl	800770a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2202      	movs	r2, #2
 800768c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	3304      	adds	r3, #4
 8007698:	4619      	mov	r1, r3
 800769a:	4610      	mov	r0, r2
 800769c:	f000 fbe4 	bl	8007e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800770a:	b480      	push	{r7}
 800770c:	b083      	sub	sp, #12
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007712:	bf00      	nop
 8007714:	370c      	adds	r7, #12
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
	...

08007720 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d109      	bne.n	8007744 <HAL_TIM_PWM_Start+0x24>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b01      	cmp	r3, #1
 800773a:	bf14      	ite	ne
 800773c:	2301      	movne	r3, #1
 800773e:	2300      	moveq	r3, #0
 8007740:	b2db      	uxtb	r3, r3
 8007742:	e03c      	b.n	80077be <HAL_TIM_PWM_Start+0x9e>
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	2b04      	cmp	r3, #4
 8007748:	d109      	bne.n	800775e <HAL_TIM_PWM_Start+0x3e>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b01      	cmp	r3, #1
 8007754:	bf14      	ite	ne
 8007756:	2301      	movne	r3, #1
 8007758:	2300      	moveq	r3, #0
 800775a:	b2db      	uxtb	r3, r3
 800775c:	e02f      	b.n	80077be <HAL_TIM_PWM_Start+0x9e>
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	2b08      	cmp	r3, #8
 8007762:	d109      	bne.n	8007778 <HAL_TIM_PWM_Start+0x58>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800776a:	b2db      	uxtb	r3, r3
 800776c:	2b01      	cmp	r3, #1
 800776e:	bf14      	ite	ne
 8007770:	2301      	movne	r3, #1
 8007772:	2300      	moveq	r3, #0
 8007774:	b2db      	uxtb	r3, r3
 8007776:	e022      	b.n	80077be <HAL_TIM_PWM_Start+0x9e>
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	2b0c      	cmp	r3, #12
 800777c:	d109      	bne.n	8007792 <HAL_TIM_PWM_Start+0x72>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b01      	cmp	r3, #1
 8007788:	bf14      	ite	ne
 800778a:	2301      	movne	r3, #1
 800778c:	2300      	moveq	r3, #0
 800778e:	b2db      	uxtb	r3, r3
 8007790:	e015      	b.n	80077be <HAL_TIM_PWM_Start+0x9e>
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2b10      	cmp	r3, #16
 8007796:	d109      	bne.n	80077ac <HAL_TIM_PWM_Start+0x8c>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	bf14      	ite	ne
 80077a4:	2301      	movne	r3, #1
 80077a6:	2300      	moveq	r3, #0
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	e008      	b.n	80077be <HAL_TIM_PWM_Start+0x9e>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	bf14      	ite	ne
 80077b8:	2301      	movne	r3, #1
 80077ba:	2300      	moveq	r3, #0
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d001      	beq.n	80077c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e097      	b.n	80078f6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d104      	bne.n	80077d6 <HAL_TIM_PWM_Start+0xb6>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077d4:	e023      	b.n	800781e <HAL_TIM_PWM_Start+0xfe>
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2b04      	cmp	r3, #4
 80077da:	d104      	bne.n	80077e6 <HAL_TIM_PWM_Start+0xc6>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2202      	movs	r2, #2
 80077e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077e4:	e01b      	b.n	800781e <HAL_TIM_PWM_Start+0xfe>
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	2b08      	cmp	r3, #8
 80077ea:	d104      	bne.n	80077f6 <HAL_TIM_PWM_Start+0xd6>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2202      	movs	r2, #2
 80077f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077f4:	e013      	b.n	800781e <HAL_TIM_PWM_Start+0xfe>
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b0c      	cmp	r3, #12
 80077fa:	d104      	bne.n	8007806 <HAL_TIM_PWM_Start+0xe6>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2202      	movs	r2, #2
 8007800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007804:	e00b      	b.n	800781e <HAL_TIM_PWM_Start+0xfe>
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	2b10      	cmp	r3, #16
 800780a:	d104      	bne.n	8007816 <HAL_TIM_PWM_Start+0xf6>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2202      	movs	r2, #2
 8007810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007814:	e003      	b.n	800781e <HAL_TIM_PWM_Start+0xfe>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2202      	movs	r2, #2
 800781a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2201      	movs	r2, #1
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	4618      	mov	r0, r3
 8007828:	f000 ff4c 	bl	80086c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a33      	ldr	r2, [pc, #204]	@ (8007900 <HAL_TIM_PWM_Start+0x1e0>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d013      	beq.n	800785e <HAL_TIM_PWM_Start+0x13e>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a32      	ldr	r2, [pc, #200]	@ (8007904 <HAL_TIM_PWM_Start+0x1e4>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d00e      	beq.n	800785e <HAL_TIM_PWM_Start+0x13e>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a30      	ldr	r2, [pc, #192]	@ (8007908 <HAL_TIM_PWM_Start+0x1e8>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d009      	beq.n	800785e <HAL_TIM_PWM_Start+0x13e>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a2f      	ldr	r2, [pc, #188]	@ (800790c <HAL_TIM_PWM_Start+0x1ec>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d004      	beq.n	800785e <HAL_TIM_PWM_Start+0x13e>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a2d      	ldr	r2, [pc, #180]	@ (8007910 <HAL_TIM_PWM_Start+0x1f0>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d101      	bne.n	8007862 <HAL_TIM_PWM_Start+0x142>
 800785e:	2301      	movs	r3, #1
 8007860:	e000      	b.n	8007864 <HAL_TIM_PWM_Start+0x144>
 8007862:	2300      	movs	r3, #0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d007      	beq.n	8007878 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007876:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a20      	ldr	r2, [pc, #128]	@ (8007900 <HAL_TIM_PWM_Start+0x1e0>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d018      	beq.n	80078b4 <HAL_TIM_PWM_Start+0x194>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800788a:	d013      	beq.n	80078b4 <HAL_TIM_PWM_Start+0x194>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a20      	ldr	r2, [pc, #128]	@ (8007914 <HAL_TIM_PWM_Start+0x1f4>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d00e      	beq.n	80078b4 <HAL_TIM_PWM_Start+0x194>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a1f      	ldr	r2, [pc, #124]	@ (8007918 <HAL_TIM_PWM_Start+0x1f8>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d009      	beq.n	80078b4 <HAL_TIM_PWM_Start+0x194>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a17      	ldr	r2, [pc, #92]	@ (8007904 <HAL_TIM_PWM_Start+0x1e4>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d004      	beq.n	80078b4 <HAL_TIM_PWM_Start+0x194>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a16      	ldr	r2, [pc, #88]	@ (8007908 <HAL_TIM_PWM_Start+0x1e8>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d115      	bne.n	80078e0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	689a      	ldr	r2, [r3, #8]
 80078ba:	4b18      	ldr	r3, [pc, #96]	@ (800791c <HAL_TIM_PWM_Start+0x1fc>)
 80078bc:	4013      	ands	r3, r2
 80078be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2b06      	cmp	r3, #6
 80078c4:	d015      	beq.n	80078f2 <HAL_TIM_PWM_Start+0x1d2>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078cc:	d011      	beq.n	80078f2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f042 0201 	orr.w	r2, r2, #1
 80078dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078de:	e008      	b.n	80078f2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f042 0201 	orr.w	r2, r2, #1
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	e000      	b.n	80078f4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	40012c00 	.word	0x40012c00
 8007904:	40013400 	.word	0x40013400
 8007908:	40014000 	.word	0x40014000
 800790c:	40014400 	.word	0x40014400
 8007910:	40014800 	.word	0x40014800
 8007914:	40000400 	.word	0x40000400
 8007918:	40000800 	.word	0x40000800
 800791c:	00010007 	.word	0x00010007

08007920 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2200      	movs	r2, #0
 8007930:	6839      	ldr	r1, [r7, #0]
 8007932:	4618      	mov	r0, r3
 8007934:	f000 fec6 	bl	80086c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a3e      	ldr	r2, [pc, #248]	@ (8007a38 <HAL_TIM_PWM_Stop+0x118>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d013      	beq.n	800796a <HAL_TIM_PWM_Stop+0x4a>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a3d      	ldr	r2, [pc, #244]	@ (8007a3c <HAL_TIM_PWM_Stop+0x11c>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d00e      	beq.n	800796a <HAL_TIM_PWM_Stop+0x4a>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a3b      	ldr	r2, [pc, #236]	@ (8007a40 <HAL_TIM_PWM_Stop+0x120>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d009      	beq.n	800796a <HAL_TIM_PWM_Stop+0x4a>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a3a      	ldr	r2, [pc, #232]	@ (8007a44 <HAL_TIM_PWM_Stop+0x124>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d004      	beq.n	800796a <HAL_TIM_PWM_Stop+0x4a>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a38      	ldr	r2, [pc, #224]	@ (8007a48 <HAL_TIM_PWM_Stop+0x128>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d101      	bne.n	800796e <HAL_TIM_PWM_Stop+0x4e>
 800796a:	2301      	movs	r3, #1
 800796c:	e000      	b.n	8007970 <HAL_TIM_PWM_Stop+0x50>
 800796e:	2300      	movs	r3, #0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d017      	beq.n	80079a4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6a1a      	ldr	r2, [r3, #32]
 800797a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800797e:	4013      	ands	r3, r2
 8007980:	2b00      	cmp	r3, #0
 8007982:	d10f      	bne.n	80079a4 <HAL_TIM_PWM_Stop+0x84>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6a1a      	ldr	r2, [r3, #32]
 800798a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800798e:	4013      	ands	r3, r2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d107      	bne.n	80079a4 <HAL_TIM_PWM_Stop+0x84>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80079a2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6a1a      	ldr	r2, [r3, #32]
 80079aa:	f241 1311 	movw	r3, #4369	@ 0x1111
 80079ae:	4013      	ands	r3, r2
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10f      	bne.n	80079d4 <HAL_TIM_PWM_Stop+0xb4>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6a1a      	ldr	r2, [r3, #32]
 80079ba:	f244 4344 	movw	r3, #17476	@ 0x4444
 80079be:	4013      	ands	r3, r2
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d107      	bne.n	80079d4 <HAL_TIM_PWM_Stop+0xb4>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f022 0201 	bic.w	r2, r2, #1
 80079d2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d104      	bne.n	80079e4 <HAL_TIM_PWM_Stop+0xc4>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079e2:	e023      	b.n	8007a2c <HAL_TIM_PWM_Stop+0x10c>
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	2b04      	cmp	r3, #4
 80079e8:	d104      	bne.n	80079f4 <HAL_TIM_PWM_Stop+0xd4>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079f2:	e01b      	b.n	8007a2c <HAL_TIM_PWM_Stop+0x10c>
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	2b08      	cmp	r3, #8
 80079f8:	d104      	bne.n	8007a04 <HAL_TIM_PWM_Stop+0xe4>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a02:	e013      	b.n	8007a2c <HAL_TIM_PWM_Stop+0x10c>
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	2b0c      	cmp	r3, #12
 8007a08:	d104      	bne.n	8007a14 <HAL_TIM_PWM_Stop+0xf4>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a12:	e00b      	b.n	8007a2c <HAL_TIM_PWM_Stop+0x10c>
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	2b10      	cmp	r3, #16
 8007a18:	d104      	bne.n	8007a24 <HAL_TIM_PWM_Stop+0x104>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a22:	e003      	b.n	8007a2c <HAL_TIM_PWM_Stop+0x10c>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	40012c00 	.word	0x40012c00
 8007a3c:	40013400 	.word	0x40013400
 8007a40:	40014000 	.word	0x40014000
 8007a44:	40014400 	.word	0x40014400
 8007a48:	40014800 	.word	0x40014800

08007a4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d101      	bne.n	8007a6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a66:	2302      	movs	r3, #2
 8007a68:	e0ff      	b.n	8007c6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b14      	cmp	r3, #20
 8007a76:	f200 80f0 	bhi.w	8007c5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a80:	08007ad5 	.word	0x08007ad5
 8007a84:	08007c5b 	.word	0x08007c5b
 8007a88:	08007c5b 	.word	0x08007c5b
 8007a8c:	08007c5b 	.word	0x08007c5b
 8007a90:	08007b15 	.word	0x08007b15
 8007a94:	08007c5b 	.word	0x08007c5b
 8007a98:	08007c5b 	.word	0x08007c5b
 8007a9c:	08007c5b 	.word	0x08007c5b
 8007aa0:	08007b57 	.word	0x08007b57
 8007aa4:	08007c5b 	.word	0x08007c5b
 8007aa8:	08007c5b 	.word	0x08007c5b
 8007aac:	08007c5b 	.word	0x08007c5b
 8007ab0:	08007b97 	.word	0x08007b97
 8007ab4:	08007c5b 	.word	0x08007c5b
 8007ab8:	08007c5b 	.word	0x08007c5b
 8007abc:	08007c5b 	.word	0x08007c5b
 8007ac0:	08007bd9 	.word	0x08007bd9
 8007ac4:	08007c5b 	.word	0x08007c5b
 8007ac8:	08007c5b 	.word	0x08007c5b
 8007acc:	08007c5b 	.word	0x08007c5b
 8007ad0:	08007c19 	.word	0x08007c19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68b9      	ldr	r1, [r7, #8]
 8007ada:	4618      	mov	r0, r3
 8007adc:	f000 fa60 	bl	8007fa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	699a      	ldr	r2, [r3, #24]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f042 0208 	orr.w	r2, r2, #8
 8007aee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	699a      	ldr	r2, [r3, #24]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f022 0204 	bic.w	r2, r2, #4
 8007afe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6999      	ldr	r1, [r3, #24]
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	691a      	ldr	r2, [r3, #16]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	619a      	str	r2, [r3, #24]
      break;
 8007b12:	e0a5      	b.n	8007c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68b9      	ldr	r1, [r7, #8]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 fad0 	bl	80080c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	699a      	ldr	r2, [r3, #24]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	699a      	ldr	r2, [r3, #24]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	6999      	ldr	r1, [r3, #24]
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	021a      	lsls	r2, r3, #8
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	430a      	orrs	r2, r1
 8007b52:	619a      	str	r2, [r3, #24]
      break;
 8007b54:	e084      	b.n	8007c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68b9      	ldr	r1, [r7, #8]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f000 fb39 	bl	80081d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	69da      	ldr	r2, [r3, #28]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f042 0208 	orr.w	r2, r2, #8
 8007b70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	69da      	ldr	r2, [r3, #28]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f022 0204 	bic.w	r2, r2, #4
 8007b80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	69d9      	ldr	r1, [r3, #28]
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	691a      	ldr	r2, [r3, #16]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	430a      	orrs	r2, r1
 8007b92:	61da      	str	r2, [r3, #28]
      break;
 8007b94:	e064      	b.n	8007c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68b9      	ldr	r1, [r7, #8]
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f000 fba1 	bl	80082e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	69da      	ldr	r2, [r3, #28]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	69da      	ldr	r2, [r3, #28]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	69d9      	ldr	r1, [r3, #28]
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	691b      	ldr	r3, [r3, #16]
 8007bcc:	021a      	lsls	r2, r3, #8
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	430a      	orrs	r2, r1
 8007bd4:	61da      	str	r2, [r3, #28]
      break;
 8007bd6:	e043      	b.n	8007c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68b9      	ldr	r1, [r7, #8]
 8007bde:	4618      	mov	r0, r3
 8007be0:	f000 fc0a 	bl	80083f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f042 0208 	orr.w	r2, r2, #8
 8007bf2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f022 0204 	bic.w	r2, r2, #4
 8007c02:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	691a      	ldr	r2, [r3, #16]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	430a      	orrs	r2, r1
 8007c14:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007c16:	e023      	b.n	8007c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68b9      	ldr	r1, [r7, #8]
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f000 fc4e 	bl	80084c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c32:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c42:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	021a      	lsls	r2, r3, #8
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	430a      	orrs	r2, r1
 8007c56:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007c58:	e002      	b.n	8007c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3718      	adds	r7, #24
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop

08007c74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d101      	bne.n	8007c90 <HAL_TIM_ConfigClockSource+0x1c>
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	e0de      	b.n	8007e4e <HAL_TIM_ConfigClockSource+0x1da>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007cae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007cb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007cba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68ba      	ldr	r2, [r7, #8]
 8007cc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a63      	ldr	r2, [pc, #396]	@ (8007e58 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	f000 80a9 	beq.w	8007e22 <HAL_TIM_ConfigClockSource+0x1ae>
 8007cd0:	4a61      	ldr	r2, [pc, #388]	@ (8007e58 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	f200 80ae 	bhi.w	8007e34 <HAL_TIM_ConfigClockSource+0x1c0>
 8007cd8:	4a60      	ldr	r2, [pc, #384]	@ (8007e5c <HAL_TIM_ConfigClockSource+0x1e8>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	f000 80a1 	beq.w	8007e22 <HAL_TIM_ConfigClockSource+0x1ae>
 8007ce0:	4a5e      	ldr	r2, [pc, #376]	@ (8007e5c <HAL_TIM_ConfigClockSource+0x1e8>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	f200 80a6 	bhi.w	8007e34 <HAL_TIM_ConfigClockSource+0x1c0>
 8007ce8:	4a5d      	ldr	r2, [pc, #372]	@ (8007e60 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	f000 8099 	beq.w	8007e22 <HAL_TIM_ConfigClockSource+0x1ae>
 8007cf0:	4a5b      	ldr	r2, [pc, #364]	@ (8007e60 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	f200 809e 	bhi.w	8007e34 <HAL_TIM_ConfigClockSource+0x1c0>
 8007cf8:	4a5a      	ldr	r2, [pc, #360]	@ (8007e64 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	f000 8091 	beq.w	8007e22 <HAL_TIM_ConfigClockSource+0x1ae>
 8007d00:	4a58      	ldr	r2, [pc, #352]	@ (8007e64 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	f200 8096 	bhi.w	8007e34 <HAL_TIM_ConfigClockSource+0x1c0>
 8007d08:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007d0c:	f000 8089 	beq.w	8007e22 <HAL_TIM_ConfigClockSource+0x1ae>
 8007d10:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007d14:	f200 808e 	bhi.w	8007e34 <HAL_TIM_ConfigClockSource+0x1c0>
 8007d18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d1c:	d03e      	beq.n	8007d9c <HAL_TIM_ConfigClockSource+0x128>
 8007d1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d22:	f200 8087 	bhi.w	8007e34 <HAL_TIM_ConfigClockSource+0x1c0>
 8007d26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d2a:	f000 8086 	beq.w	8007e3a <HAL_TIM_ConfigClockSource+0x1c6>
 8007d2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d32:	d87f      	bhi.n	8007e34 <HAL_TIM_ConfigClockSource+0x1c0>
 8007d34:	2b70      	cmp	r3, #112	@ 0x70
 8007d36:	d01a      	beq.n	8007d6e <HAL_TIM_ConfigClockSource+0xfa>
 8007d38:	2b70      	cmp	r3, #112	@ 0x70
 8007d3a:	d87b      	bhi.n	8007e34 <HAL_TIM_ConfigClockSource+0x1c0>
 8007d3c:	2b60      	cmp	r3, #96	@ 0x60
 8007d3e:	d050      	beq.n	8007de2 <HAL_TIM_ConfigClockSource+0x16e>
 8007d40:	2b60      	cmp	r3, #96	@ 0x60
 8007d42:	d877      	bhi.n	8007e34 <HAL_TIM_ConfigClockSource+0x1c0>
 8007d44:	2b50      	cmp	r3, #80	@ 0x50
 8007d46:	d03c      	beq.n	8007dc2 <HAL_TIM_ConfigClockSource+0x14e>
 8007d48:	2b50      	cmp	r3, #80	@ 0x50
 8007d4a:	d873      	bhi.n	8007e34 <HAL_TIM_ConfigClockSource+0x1c0>
 8007d4c:	2b40      	cmp	r3, #64	@ 0x40
 8007d4e:	d058      	beq.n	8007e02 <HAL_TIM_ConfigClockSource+0x18e>
 8007d50:	2b40      	cmp	r3, #64	@ 0x40
 8007d52:	d86f      	bhi.n	8007e34 <HAL_TIM_ConfigClockSource+0x1c0>
 8007d54:	2b30      	cmp	r3, #48	@ 0x30
 8007d56:	d064      	beq.n	8007e22 <HAL_TIM_ConfigClockSource+0x1ae>
 8007d58:	2b30      	cmp	r3, #48	@ 0x30
 8007d5a:	d86b      	bhi.n	8007e34 <HAL_TIM_ConfigClockSource+0x1c0>
 8007d5c:	2b20      	cmp	r3, #32
 8007d5e:	d060      	beq.n	8007e22 <HAL_TIM_ConfigClockSource+0x1ae>
 8007d60:	2b20      	cmp	r3, #32
 8007d62:	d867      	bhi.n	8007e34 <HAL_TIM_ConfigClockSource+0x1c0>
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d05c      	beq.n	8007e22 <HAL_TIM_ConfigClockSource+0x1ae>
 8007d68:	2b10      	cmp	r3, #16
 8007d6a:	d05a      	beq.n	8007e22 <HAL_TIM_ConfigClockSource+0x1ae>
 8007d6c:	e062      	b.n	8007e34 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d7e:	f000 fc81 	bl	8008684 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007d90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68ba      	ldr	r2, [r7, #8]
 8007d98:	609a      	str	r2, [r3, #8]
      break;
 8007d9a:	e04f      	b.n	8007e3c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007dac:	f000 fc6a 	bl	8008684 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	689a      	ldr	r2, [r3, #8]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007dbe:	609a      	str	r2, [r3, #8]
      break;
 8007dc0:	e03c      	b.n	8007e3c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dce:	461a      	mov	r2, r3
 8007dd0:	f000 fbdc 	bl	800858c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2150      	movs	r1, #80	@ 0x50
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f000 fc35 	bl	800864a <TIM_ITRx_SetConfig>
      break;
 8007de0:	e02c      	b.n	8007e3c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dee:	461a      	mov	r2, r3
 8007df0:	f000 fbfb 	bl	80085ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2160      	movs	r1, #96	@ 0x60
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f000 fc25 	bl	800864a <TIM_ITRx_SetConfig>
      break;
 8007e00:	e01c      	b.n	8007e3c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e0e:	461a      	mov	r2, r3
 8007e10:	f000 fbbc 	bl	800858c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2140      	movs	r1, #64	@ 0x40
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 fc15 	bl	800864a <TIM_ITRx_SetConfig>
      break;
 8007e20:	e00c      	b.n	8007e3c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	4610      	mov	r0, r2
 8007e2e:	f000 fc0c 	bl	800864a <TIM_ITRx_SetConfig>
      break;
 8007e32:	e003      	b.n	8007e3c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	73fb      	strb	r3, [r7, #15]
      break;
 8007e38:	e000      	b.n	8007e3c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8007e3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	00100070 	.word	0x00100070
 8007e5c:	00100040 	.word	0x00100040
 8007e60:	00100030 	.word	0x00100030
 8007e64:	00100020 	.word	0x00100020

08007e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a42      	ldr	r2, [pc, #264]	@ (8007f84 <TIM_Base_SetConfig+0x11c>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d00f      	beq.n	8007ea0 <TIM_Base_SetConfig+0x38>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e86:	d00b      	beq.n	8007ea0 <TIM_Base_SetConfig+0x38>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a3f      	ldr	r2, [pc, #252]	@ (8007f88 <TIM_Base_SetConfig+0x120>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d007      	beq.n	8007ea0 <TIM_Base_SetConfig+0x38>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a3e      	ldr	r2, [pc, #248]	@ (8007f8c <TIM_Base_SetConfig+0x124>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d003      	beq.n	8007ea0 <TIM_Base_SetConfig+0x38>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a3d      	ldr	r2, [pc, #244]	@ (8007f90 <TIM_Base_SetConfig+0x128>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d108      	bne.n	8007eb2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a33      	ldr	r2, [pc, #204]	@ (8007f84 <TIM_Base_SetConfig+0x11c>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d01b      	beq.n	8007ef2 <TIM_Base_SetConfig+0x8a>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ec0:	d017      	beq.n	8007ef2 <TIM_Base_SetConfig+0x8a>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a30      	ldr	r2, [pc, #192]	@ (8007f88 <TIM_Base_SetConfig+0x120>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d013      	beq.n	8007ef2 <TIM_Base_SetConfig+0x8a>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a2f      	ldr	r2, [pc, #188]	@ (8007f8c <TIM_Base_SetConfig+0x124>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d00f      	beq.n	8007ef2 <TIM_Base_SetConfig+0x8a>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a2e      	ldr	r2, [pc, #184]	@ (8007f90 <TIM_Base_SetConfig+0x128>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d00b      	beq.n	8007ef2 <TIM_Base_SetConfig+0x8a>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4a2d      	ldr	r2, [pc, #180]	@ (8007f94 <TIM_Base_SetConfig+0x12c>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d007      	beq.n	8007ef2 <TIM_Base_SetConfig+0x8a>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4a2c      	ldr	r2, [pc, #176]	@ (8007f98 <TIM_Base_SetConfig+0x130>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d003      	beq.n	8007ef2 <TIM_Base_SetConfig+0x8a>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4a2b      	ldr	r2, [pc, #172]	@ (8007f9c <TIM_Base_SetConfig+0x134>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d108      	bne.n	8007f04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	695b      	ldr	r3, [r3, #20]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	689a      	ldr	r2, [r3, #8]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a16      	ldr	r2, [pc, #88]	@ (8007f84 <TIM_Base_SetConfig+0x11c>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d00f      	beq.n	8007f50 <TIM_Base_SetConfig+0xe8>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a17      	ldr	r2, [pc, #92]	@ (8007f90 <TIM_Base_SetConfig+0x128>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d00b      	beq.n	8007f50 <TIM_Base_SetConfig+0xe8>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a16      	ldr	r2, [pc, #88]	@ (8007f94 <TIM_Base_SetConfig+0x12c>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d007      	beq.n	8007f50 <TIM_Base_SetConfig+0xe8>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a15      	ldr	r2, [pc, #84]	@ (8007f98 <TIM_Base_SetConfig+0x130>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d003      	beq.n	8007f50 <TIM_Base_SetConfig+0xe8>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a14      	ldr	r2, [pc, #80]	@ (8007f9c <TIM_Base_SetConfig+0x134>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d103      	bne.n	8007f58 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	691a      	ldr	r2, [r3, #16]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d105      	bne.n	8007f76 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	f023 0201 	bic.w	r2, r3, #1
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	611a      	str	r2, [r3, #16]
  }
}
 8007f76:	bf00      	nop
 8007f78:	3714      	adds	r7, #20
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	40012c00 	.word	0x40012c00
 8007f88:	40000400 	.word	0x40000400
 8007f8c:	40000800 	.word	0x40000800
 8007f90:	40013400 	.word	0x40013400
 8007f94:	40014000 	.word	0x40014000
 8007f98:	40014400 	.word	0x40014400
 8007f9c:	40014800 	.word	0x40014800

08007fa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b087      	sub	sp, #28
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a1b      	ldr	r3, [r3, #32]
 8007fae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a1b      	ldr	r3, [r3, #32]
 8007fb4:	f023 0201 	bic.w	r2, r3, #1
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f023 0303 	bic.w	r3, r3, #3
 8007fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	f023 0302 	bic.w	r3, r3, #2
 8007fec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a2c      	ldr	r2, [pc, #176]	@ (80080ac <TIM_OC1_SetConfig+0x10c>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d00f      	beq.n	8008020 <TIM_OC1_SetConfig+0x80>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a2b      	ldr	r2, [pc, #172]	@ (80080b0 <TIM_OC1_SetConfig+0x110>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d00b      	beq.n	8008020 <TIM_OC1_SetConfig+0x80>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a2a      	ldr	r2, [pc, #168]	@ (80080b4 <TIM_OC1_SetConfig+0x114>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d007      	beq.n	8008020 <TIM_OC1_SetConfig+0x80>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a29      	ldr	r2, [pc, #164]	@ (80080b8 <TIM_OC1_SetConfig+0x118>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d003      	beq.n	8008020 <TIM_OC1_SetConfig+0x80>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a28      	ldr	r2, [pc, #160]	@ (80080bc <TIM_OC1_SetConfig+0x11c>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d10c      	bne.n	800803a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	f023 0308 	bic.w	r3, r3, #8
 8008026:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	697a      	ldr	r2, [r7, #20]
 800802e:	4313      	orrs	r3, r2
 8008030:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	f023 0304 	bic.w	r3, r3, #4
 8008038:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a1b      	ldr	r2, [pc, #108]	@ (80080ac <TIM_OC1_SetConfig+0x10c>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d00f      	beq.n	8008062 <TIM_OC1_SetConfig+0xc2>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a1a      	ldr	r2, [pc, #104]	@ (80080b0 <TIM_OC1_SetConfig+0x110>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d00b      	beq.n	8008062 <TIM_OC1_SetConfig+0xc2>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4a19      	ldr	r2, [pc, #100]	@ (80080b4 <TIM_OC1_SetConfig+0x114>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d007      	beq.n	8008062 <TIM_OC1_SetConfig+0xc2>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4a18      	ldr	r2, [pc, #96]	@ (80080b8 <TIM_OC1_SetConfig+0x118>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d003      	beq.n	8008062 <TIM_OC1_SetConfig+0xc2>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a17      	ldr	r2, [pc, #92]	@ (80080bc <TIM_OC1_SetConfig+0x11c>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d111      	bne.n	8008086 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	695b      	ldr	r3, [r3, #20]
 8008076:	693a      	ldr	r2, [r7, #16]
 8008078:	4313      	orrs	r3, r2
 800807a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	4313      	orrs	r3, r2
 8008084:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	693a      	ldr	r2, [r7, #16]
 800808a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	685a      	ldr	r2, [r3, #4]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	697a      	ldr	r2, [r7, #20]
 800809e:	621a      	str	r2, [r3, #32]
}
 80080a0:	bf00      	nop
 80080a2:	371c      	adds	r7, #28
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	40012c00 	.word	0x40012c00
 80080b0:	40013400 	.word	0x40013400
 80080b4:	40014000 	.word	0x40014000
 80080b8:	40014400 	.word	0x40014400
 80080bc:	40014800 	.word	0x40014800

080080c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b087      	sub	sp, #28
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a1b      	ldr	r3, [r3, #32]
 80080ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6a1b      	ldr	r3, [r3, #32]
 80080d4:	f023 0210 	bic.w	r2, r3, #16
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	699b      	ldr	r3, [r3, #24]
 80080e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80080ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	021b      	lsls	r3, r3, #8
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	4313      	orrs	r3, r2
 8008106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	f023 0320 	bic.w	r3, r3, #32
 800810e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	011b      	lsls	r3, r3, #4
 8008116:	697a      	ldr	r2, [r7, #20]
 8008118:	4313      	orrs	r3, r2
 800811a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a28      	ldr	r2, [pc, #160]	@ (80081c0 <TIM_OC2_SetConfig+0x100>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d003      	beq.n	800812c <TIM_OC2_SetConfig+0x6c>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a27      	ldr	r2, [pc, #156]	@ (80081c4 <TIM_OC2_SetConfig+0x104>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d10d      	bne.n	8008148 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	011b      	lsls	r3, r3, #4
 800813a:	697a      	ldr	r2, [r7, #20]
 800813c:	4313      	orrs	r3, r2
 800813e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008146:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a1d      	ldr	r2, [pc, #116]	@ (80081c0 <TIM_OC2_SetConfig+0x100>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d00f      	beq.n	8008170 <TIM_OC2_SetConfig+0xb0>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a1c      	ldr	r2, [pc, #112]	@ (80081c4 <TIM_OC2_SetConfig+0x104>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d00b      	beq.n	8008170 <TIM_OC2_SetConfig+0xb0>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a1b      	ldr	r2, [pc, #108]	@ (80081c8 <TIM_OC2_SetConfig+0x108>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d007      	beq.n	8008170 <TIM_OC2_SetConfig+0xb0>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a1a      	ldr	r2, [pc, #104]	@ (80081cc <TIM_OC2_SetConfig+0x10c>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d003      	beq.n	8008170 <TIM_OC2_SetConfig+0xb0>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4a19      	ldr	r2, [pc, #100]	@ (80081d0 <TIM_OC2_SetConfig+0x110>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d113      	bne.n	8008198 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008176:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800817e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	695b      	ldr	r3, [r3, #20]
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	693a      	ldr	r2, [r7, #16]
 8008188:	4313      	orrs	r3, r2
 800818a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	699b      	ldr	r3, [r3, #24]
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	4313      	orrs	r3, r2
 8008196:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	685a      	ldr	r2, [r3, #4]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	697a      	ldr	r2, [r7, #20]
 80081b0:	621a      	str	r2, [r3, #32]
}
 80081b2:	bf00      	nop
 80081b4:	371c      	adds	r7, #28
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	40012c00 	.word	0x40012c00
 80081c4:	40013400 	.word	0x40013400
 80081c8:	40014000 	.word	0x40014000
 80081cc:	40014400 	.word	0x40014400
 80081d0:	40014800 	.word	0x40014800

080081d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b087      	sub	sp, #28
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a1b      	ldr	r3, [r3, #32]
 80081e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a1b      	ldr	r3, [r3, #32]
 80081e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	69db      	ldr	r3, [r3, #28]
 80081fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f023 0303 	bic.w	r3, r3, #3
 800820e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	4313      	orrs	r3, r2
 8008218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	021b      	lsls	r3, r3, #8
 8008228:	697a      	ldr	r2, [r7, #20]
 800822a:	4313      	orrs	r3, r2
 800822c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a27      	ldr	r2, [pc, #156]	@ (80082d0 <TIM_OC3_SetConfig+0xfc>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d003      	beq.n	800823e <TIM_OC3_SetConfig+0x6a>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4a26      	ldr	r2, [pc, #152]	@ (80082d4 <TIM_OC3_SetConfig+0x100>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d10d      	bne.n	800825a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008244:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	021b      	lsls	r3, r3, #8
 800824c:	697a      	ldr	r2, [r7, #20]
 800824e:	4313      	orrs	r3, r2
 8008250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a1c      	ldr	r2, [pc, #112]	@ (80082d0 <TIM_OC3_SetConfig+0xfc>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d00f      	beq.n	8008282 <TIM_OC3_SetConfig+0xae>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a1b      	ldr	r2, [pc, #108]	@ (80082d4 <TIM_OC3_SetConfig+0x100>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d00b      	beq.n	8008282 <TIM_OC3_SetConfig+0xae>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a1a      	ldr	r2, [pc, #104]	@ (80082d8 <TIM_OC3_SetConfig+0x104>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d007      	beq.n	8008282 <TIM_OC3_SetConfig+0xae>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a19      	ldr	r2, [pc, #100]	@ (80082dc <TIM_OC3_SetConfig+0x108>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d003      	beq.n	8008282 <TIM_OC3_SetConfig+0xae>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a18      	ldr	r2, [pc, #96]	@ (80082e0 <TIM_OC3_SetConfig+0x10c>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d113      	bne.n	80082aa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	011b      	lsls	r3, r3, #4
 8008298:	693a      	ldr	r2, [r7, #16]
 800829a:	4313      	orrs	r3, r2
 800829c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	011b      	lsls	r3, r3, #4
 80082a4:	693a      	ldr	r2, [r7, #16]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	693a      	ldr	r2, [r7, #16]
 80082ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	685a      	ldr	r2, [r3, #4]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	697a      	ldr	r2, [r7, #20]
 80082c2:	621a      	str	r2, [r3, #32]
}
 80082c4:	bf00      	nop
 80082c6:	371c      	adds	r7, #28
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr
 80082d0:	40012c00 	.word	0x40012c00
 80082d4:	40013400 	.word	0x40013400
 80082d8:	40014000 	.word	0x40014000
 80082dc:	40014400 	.word	0x40014400
 80082e0:	40014800 	.word	0x40014800

080082e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b087      	sub	sp, #28
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a1b      	ldr	r3, [r3, #32]
 80082f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a1b      	ldr	r3, [r3, #32]
 80082f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	69db      	ldr	r3, [r3, #28]
 800830a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008312:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800831e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	021b      	lsls	r3, r3, #8
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	4313      	orrs	r3, r2
 800832a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008332:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	031b      	lsls	r3, r3, #12
 800833a:	697a      	ldr	r2, [r7, #20]
 800833c:	4313      	orrs	r3, r2
 800833e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a28      	ldr	r2, [pc, #160]	@ (80083e4 <TIM_OC4_SetConfig+0x100>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d003      	beq.n	8008350 <TIM_OC4_SetConfig+0x6c>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a27      	ldr	r2, [pc, #156]	@ (80083e8 <TIM_OC4_SetConfig+0x104>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d10d      	bne.n	800836c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008356:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	031b      	lsls	r3, r3, #12
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	4313      	orrs	r3, r2
 8008362:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800836a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a1d      	ldr	r2, [pc, #116]	@ (80083e4 <TIM_OC4_SetConfig+0x100>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d00f      	beq.n	8008394 <TIM_OC4_SetConfig+0xb0>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a1c      	ldr	r2, [pc, #112]	@ (80083e8 <TIM_OC4_SetConfig+0x104>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d00b      	beq.n	8008394 <TIM_OC4_SetConfig+0xb0>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a1b      	ldr	r2, [pc, #108]	@ (80083ec <TIM_OC4_SetConfig+0x108>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d007      	beq.n	8008394 <TIM_OC4_SetConfig+0xb0>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	4a1a      	ldr	r2, [pc, #104]	@ (80083f0 <TIM_OC4_SetConfig+0x10c>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d003      	beq.n	8008394 <TIM_OC4_SetConfig+0xb0>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4a19      	ldr	r2, [pc, #100]	@ (80083f4 <TIM_OC4_SetConfig+0x110>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d113      	bne.n	80083bc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800839a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80083a2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	695b      	ldr	r3, [r3, #20]
 80083a8:	019b      	lsls	r3, r3, #6
 80083aa:	693a      	ldr	r2, [r7, #16]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	019b      	lsls	r3, r3, #6
 80083b6:	693a      	ldr	r2, [r7, #16]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	693a      	ldr	r2, [r7, #16]
 80083c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	685a      	ldr	r2, [r3, #4]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	621a      	str	r2, [r3, #32]
}
 80083d6:	bf00      	nop
 80083d8:	371c      	adds	r7, #28
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	40012c00 	.word	0x40012c00
 80083e8:	40013400 	.word	0x40013400
 80083ec:	40014000 	.word	0x40014000
 80083f0:	40014400 	.word	0x40014400
 80083f4:	40014800 	.word	0x40014800

080083f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b087      	sub	sp, #28
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a1b      	ldr	r3, [r3, #32]
 8008406:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a1b      	ldr	r3, [r3, #32]
 800840c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800841e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800842a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	4313      	orrs	r3, r2
 8008434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800843c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	041b      	lsls	r3, r3, #16
 8008444:	693a      	ldr	r2, [r7, #16]
 8008446:	4313      	orrs	r3, r2
 8008448:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a17      	ldr	r2, [pc, #92]	@ (80084ac <TIM_OC5_SetConfig+0xb4>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d00f      	beq.n	8008472 <TIM_OC5_SetConfig+0x7a>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a16      	ldr	r2, [pc, #88]	@ (80084b0 <TIM_OC5_SetConfig+0xb8>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d00b      	beq.n	8008472 <TIM_OC5_SetConfig+0x7a>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a15      	ldr	r2, [pc, #84]	@ (80084b4 <TIM_OC5_SetConfig+0xbc>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d007      	beq.n	8008472 <TIM_OC5_SetConfig+0x7a>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a14      	ldr	r2, [pc, #80]	@ (80084b8 <TIM_OC5_SetConfig+0xc0>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d003      	beq.n	8008472 <TIM_OC5_SetConfig+0x7a>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a13      	ldr	r2, [pc, #76]	@ (80084bc <TIM_OC5_SetConfig+0xc4>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d109      	bne.n	8008486 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008478:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	695b      	ldr	r3, [r3, #20]
 800847e:	021b      	lsls	r3, r3, #8
 8008480:	697a      	ldr	r2, [r7, #20]
 8008482:	4313      	orrs	r3, r2
 8008484:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	685a      	ldr	r2, [r3, #4]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	693a      	ldr	r2, [r7, #16]
 800849e:	621a      	str	r2, [r3, #32]
}
 80084a0:	bf00      	nop
 80084a2:	371c      	adds	r7, #28
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr
 80084ac:	40012c00 	.word	0x40012c00
 80084b0:	40013400 	.word	0x40013400
 80084b4:	40014000 	.word	0x40014000
 80084b8:	40014400 	.word	0x40014400
 80084bc:	40014800 	.word	0x40014800

080084c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b087      	sub	sp, #28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a1b      	ldr	r3, [r3, #32]
 80084ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6a1b      	ldr	r3, [r3, #32]
 80084d4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80084ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	021b      	lsls	r3, r3, #8
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008506:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	051b      	lsls	r3, r3, #20
 800850e:	693a      	ldr	r2, [r7, #16]
 8008510:	4313      	orrs	r3, r2
 8008512:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a18      	ldr	r2, [pc, #96]	@ (8008578 <TIM_OC6_SetConfig+0xb8>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d00f      	beq.n	800853c <TIM_OC6_SetConfig+0x7c>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a17      	ldr	r2, [pc, #92]	@ (800857c <TIM_OC6_SetConfig+0xbc>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d00b      	beq.n	800853c <TIM_OC6_SetConfig+0x7c>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a16      	ldr	r2, [pc, #88]	@ (8008580 <TIM_OC6_SetConfig+0xc0>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d007      	beq.n	800853c <TIM_OC6_SetConfig+0x7c>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a15      	ldr	r2, [pc, #84]	@ (8008584 <TIM_OC6_SetConfig+0xc4>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d003      	beq.n	800853c <TIM_OC6_SetConfig+0x7c>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a14      	ldr	r2, [pc, #80]	@ (8008588 <TIM_OC6_SetConfig+0xc8>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d109      	bne.n	8008550 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008542:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	695b      	ldr	r3, [r3, #20]
 8008548:	029b      	lsls	r3, r3, #10
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	4313      	orrs	r3, r2
 800854e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	697a      	ldr	r2, [r7, #20]
 8008554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	685a      	ldr	r2, [r3, #4]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	693a      	ldr	r2, [r7, #16]
 8008568:	621a      	str	r2, [r3, #32]
}
 800856a:	bf00      	nop
 800856c:	371c      	adds	r7, #28
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr
 8008576:	bf00      	nop
 8008578:	40012c00 	.word	0x40012c00
 800857c:	40013400 	.word	0x40013400
 8008580:	40014000 	.word	0x40014000
 8008584:	40014400 	.word	0x40014400
 8008588:	40014800 	.word	0x40014800

0800858c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800858c:	b480      	push	{r7}
 800858e:	b087      	sub	sp, #28
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6a1b      	ldr	r3, [r3, #32]
 800859c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6a1b      	ldr	r3, [r3, #32]
 80085a2:	f023 0201 	bic.w	r2, r3, #1
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80085b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	011b      	lsls	r3, r3, #4
 80085bc:	693a      	ldr	r2, [r7, #16]
 80085be:	4313      	orrs	r3, r2
 80085c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	f023 030a 	bic.w	r3, r3, #10
 80085c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	621a      	str	r2, [r3, #32]
}
 80085de:	bf00      	nop
 80085e0:	371c      	adds	r7, #28
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b087      	sub	sp, #28
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	60f8      	str	r0, [r7, #12]
 80085f2:	60b9      	str	r1, [r7, #8]
 80085f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6a1b      	ldr	r3, [r3, #32]
 80085fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6a1b      	ldr	r3, [r3, #32]
 8008600:	f023 0210 	bic.w	r2, r3, #16
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	699b      	ldr	r3, [r3, #24]
 800860c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008614:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	031b      	lsls	r3, r3, #12
 800861a:	693a      	ldr	r2, [r7, #16]
 800861c:	4313      	orrs	r3, r2
 800861e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008626:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	011b      	lsls	r3, r3, #4
 800862c:	697a      	ldr	r2, [r7, #20]
 800862e:	4313      	orrs	r3, r2
 8008630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	693a      	ldr	r2, [r7, #16]
 8008636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	697a      	ldr	r2, [r7, #20]
 800863c:	621a      	str	r2, [r3, #32]
}
 800863e:	bf00      	nop
 8008640:	371c      	adds	r7, #28
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr

0800864a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800864a:	b480      	push	{r7}
 800864c:	b085      	sub	sp, #20
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
 8008652:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008660:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008664:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008666:	683a      	ldr	r2, [r7, #0]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	4313      	orrs	r3, r2
 800866c:	f043 0307 	orr.w	r3, r3, #7
 8008670:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	609a      	str	r2, [r3, #8]
}
 8008678:	bf00      	nop
 800867a:	3714      	adds	r7, #20
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008684:	b480      	push	{r7}
 8008686:	b087      	sub	sp, #28
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
 8008690:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800869e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	021a      	lsls	r2, r3, #8
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	431a      	orrs	r2, r3
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	697a      	ldr	r2, [r7, #20]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	697a      	ldr	r2, [r7, #20]
 80086b6:	609a      	str	r2, [r3, #8]
}
 80086b8:	bf00      	nop
 80086ba:	371c      	adds	r7, #28
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b087      	sub	sp, #28
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	f003 031f 	and.w	r3, r3, #31
 80086d6:	2201      	movs	r2, #1
 80086d8:	fa02 f303 	lsl.w	r3, r2, r3
 80086dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6a1a      	ldr	r2, [r3, #32]
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	43db      	mvns	r3, r3
 80086e6:	401a      	ands	r2, r3
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6a1a      	ldr	r2, [r3, #32]
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	f003 031f 	and.w	r3, r3, #31
 80086f6:	6879      	ldr	r1, [r7, #4]
 80086f8:	fa01 f303 	lsl.w	r3, r1, r3
 80086fc:	431a      	orrs	r2, r3
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	621a      	str	r2, [r3, #32]
}
 8008702:	bf00      	nop
 8008704:	371c      	adds	r7, #28
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
	...

08008710 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008720:	2b01      	cmp	r3, #1
 8008722:	d101      	bne.n	8008728 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008724:	2302      	movs	r3, #2
 8008726:	e065      	b.n	80087f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2202      	movs	r2, #2
 8008734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a2c      	ldr	r2, [pc, #176]	@ (8008800 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d004      	beq.n	800875c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a2b      	ldr	r2, [pc, #172]	@ (8008804 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d108      	bne.n	800876e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008762:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	4313      	orrs	r3, r2
 800876c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008774:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008778:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	4313      	orrs	r3, r2
 8008782:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a1b      	ldr	r2, [pc, #108]	@ (8008800 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d018      	beq.n	80087c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800879e:	d013      	beq.n	80087c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a18      	ldr	r2, [pc, #96]	@ (8008808 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d00e      	beq.n	80087c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a17      	ldr	r2, [pc, #92]	@ (800880c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d009      	beq.n	80087c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a12      	ldr	r2, [pc, #72]	@ (8008804 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d004      	beq.n	80087c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a13      	ldr	r2, [pc, #76]	@ (8008810 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d10c      	bne.n	80087e2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	68ba      	ldr	r2, [r7, #8]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	68ba      	ldr	r2, [r7, #8]
 80087e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr
 8008800:	40012c00 	.word	0x40012c00
 8008804:	40013400 	.word	0x40013400
 8008808:	40000400 	.word	0x40000400
 800880c:	40000800 	.word	0x40000800
 8008810:	40014000 	.word	0x40014000

08008814 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800881e:	2300      	movs	r3, #0
 8008820:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008828:	2b01      	cmp	r3, #1
 800882a:	d101      	bne.n	8008830 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800882c:	2302      	movs	r3, #2
 800882e:	e073      	b.n	8008918 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	4313      	orrs	r3, r2
 8008844:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	4313      	orrs	r3, r2
 8008852:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	4313      	orrs	r3, r2
 8008860:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4313      	orrs	r3, r2
 800886e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	4313      	orrs	r3, r2
 800887c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	695b      	ldr	r3, [r3, #20]
 8008888:	4313      	orrs	r3, r2
 800888a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008896:	4313      	orrs	r3, r2
 8008898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	699b      	ldr	r3, [r3, #24]
 80088a4:	041b      	lsls	r3, r3, #16
 80088a6:	4313      	orrs	r3, r2
 80088a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	69db      	ldr	r3, [r3, #28]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a19      	ldr	r2, [pc, #100]	@ (8008924 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d004      	beq.n	80088cc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a18      	ldr	r2, [pc, #96]	@ (8008928 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d11c      	bne.n	8008906 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088d6:	051b      	lsls	r3, r3, #20
 80088d8:	4313      	orrs	r3, r2
 80088da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	6a1b      	ldr	r3, [r3, #32]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088f4:	4313      	orrs	r3, r2
 80088f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008902:	4313      	orrs	r3, r2
 8008904:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008916:	2300      	movs	r3, #0
}
 8008918:	4618      	mov	r0, r3
 800891a:	3714      	adds	r7, #20
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr
 8008924:	40012c00 	.word	0x40012c00
 8008928:	40013400 	.word	0x40013400

0800892c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d101      	bne.n	800893e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e042      	b.n	80089c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008944:	2b00      	cmp	r3, #0
 8008946:	d106      	bne.n	8008956 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f7f9 fc7d 	bl	8002250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2224      	movs	r2, #36	@ 0x24
 800895a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f022 0201 	bic.w	r2, r2, #1
 800896c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008972:	2b00      	cmp	r3, #0
 8008974:	d002      	beq.n	800897c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 ff6e 	bl	8009858 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 fc9f 	bl	80092c0 <UART_SetConfig>
 8008982:	4603      	mov	r3, r0
 8008984:	2b01      	cmp	r3, #1
 8008986:	d101      	bne.n	800898c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	e01b      	b.n	80089c4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	685a      	ldr	r2, [r3, #4]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800899a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	689a      	ldr	r2, [r3, #8]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80089aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f042 0201 	orr.w	r2, r2, #1
 80089ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 ffed 	bl	800999c <UART_CheckIdleState>
 80089c2:	4603      	mov	r3, r0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b08a      	sub	sp, #40	@ 0x28
 80089d0:	af02      	add	r7, sp, #8
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	603b      	str	r3, [r7, #0]
 80089d8:	4613      	mov	r3, r2
 80089da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089e2:	2b20      	cmp	r3, #32
 80089e4:	d17b      	bne.n	8008ade <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d002      	beq.n	80089f2 <HAL_UART_Transmit+0x26>
 80089ec:	88fb      	ldrh	r3, [r7, #6]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d101      	bne.n	80089f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e074      	b.n	8008ae0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2221      	movs	r2, #33	@ 0x21
 8008a02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a06:	f7f9 fd6f 	bl	80024e8 <HAL_GetTick>
 8008a0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	88fa      	ldrh	r2, [r7, #6]
 8008a10:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	88fa      	ldrh	r2, [r7, #6]
 8008a18:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a24:	d108      	bne.n	8008a38 <HAL_UART_Transmit+0x6c>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d104      	bne.n	8008a38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	61bb      	str	r3, [r7, #24]
 8008a36:	e003      	b.n	8008a40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a40:	e030      	b.n	8008aa4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	9300      	str	r3, [sp, #0]
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	2180      	movs	r1, #128	@ 0x80
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f001 f84f 	bl	8009af0 <UART_WaitOnFlagUntilTimeout>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d005      	beq.n	8008a64 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2220      	movs	r2, #32
 8008a5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e03d      	b.n	8008ae0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d10b      	bne.n	8008a82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	881b      	ldrh	r3, [r3, #0]
 8008a6e:	461a      	mov	r2, r3
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a78:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	3302      	adds	r3, #2
 8008a7e:	61bb      	str	r3, [r7, #24]
 8008a80:	e007      	b.n	8008a92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	781a      	ldrb	r2, [r3, #0]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d1c8      	bne.n	8008a42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	2140      	movs	r1, #64	@ 0x40
 8008aba:	68f8      	ldr	r0, [r7, #12]
 8008abc:	f001 f818 	bl	8009af0 <UART_WaitOnFlagUntilTimeout>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d005      	beq.n	8008ad2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2220      	movs	r2, #32
 8008aca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e006      	b.n	8008ae0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2220      	movs	r2, #32
 8008ad6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008ada:	2300      	movs	r3, #0
 8008adc:	e000      	b.n	8008ae0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008ade:	2302      	movs	r3, #2
  }
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3720      	adds	r7, #32
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b08a      	sub	sp, #40	@ 0x28
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	4613      	mov	r3, r2
 8008af4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008afc:	2b20      	cmp	r3, #32
 8008afe:	d167      	bne.n	8008bd0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d002      	beq.n	8008b0c <HAL_UART_Transmit_DMA+0x24>
 8008b06:	88fb      	ldrh	r3, [r7, #6]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d101      	bne.n	8008b10 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e060      	b.n	8008bd2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	68ba      	ldr	r2, [r7, #8]
 8008b14:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	88fa      	ldrh	r2, [r7, #6]
 8008b1a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	88fa      	ldrh	r2, [r7, #6]
 8008b22:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2221      	movs	r2, #33	@ 0x21
 8008b32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d028      	beq.n	8008b90 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b42:	4a26      	ldr	r2, [pc, #152]	@ (8008bdc <HAL_UART_Transmit_DMA+0xf4>)
 8008b44:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b4a:	4a25      	ldr	r2, [pc, #148]	@ (8008be0 <HAL_UART_Transmit_DMA+0xf8>)
 8008b4c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b52:	4a24      	ldr	r2, [pc, #144]	@ (8008be4 <HAL_UART_Transmit_DMA+0xfc>)
 8008b54:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b66:	4619      	mov	r1, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	3328      	adds	r3, #40	@ 0x28
 8008b6e:	461a      	mov	r2, r3
 8008b70:	88fb      	ldrh	r3, [r7, #6]
 8008b72:	f7fc fc83 	bl	800547c <HAL_DMA_Start_IT>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d009      	beq.n	8008b90 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2210      	movs	r2, #16
 8008b80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2220      	movs	r2, #32
 8008b88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e020      	b.n	8008bd2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2240      	movs	r2, #64	@ 0x40
 8008b96:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	3308      	adds	r3, #8
 8008b9e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	e853 3f00 	ldrex	r3, [r3]
 8008ba6:	613b      	str	r3, [r7, #16]
   return(result);
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bae:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	3308      	adds	r3, #8
 8008bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bb8:	623a      	str	r2, [r7, #32]
 8008bba:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bbc:	69f9      	ldr	r1, [r7, #28]
 8008bbe:	6a3a      	ldr	r2, [r7, #32]
 8008bc0:	e841 2300 	strex	r3, r2, [r1]
 8008bc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d1e5      	bne.n	8008b98 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	e000      	b.n	8008bd2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008bd0:	2302      	movs	r3, #2
  }
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3728      	adds	r7, #40	@ 0x28
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	08009e67 	.word	0x08009e67
 8008be0:	08009f01 	.word	0x08009f01
 8008be4:	0800a087 	.word	0x0800a087

08008be8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b0ba      	sub	sp, #232	@ 0xe8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	69db      	ldr	r3, [r3, #28]
 8008bf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008c0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008c12:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008c16:	4013      	ands	r3, r2
 8008c18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008c1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d11b      	bne.n	8008c5c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c28:	f003 0320 	and.w	r3, r3, #32
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d015      	beq.n	8008c5c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c34:	f003 0320 	and.w	r3, r3, #32
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d105      	bne.n	8008c48 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008c3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d009      	beq.n	8008c5c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f000 82e3 	beq.w	8009218 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	4798      	blx	r3
      }
      return;
 8008c5a:	e2dd      	b.n	8009218 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008c5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f000 8123 	beq.w	8008eac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008c66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008c6a:	4b8d      	ldr	r3, [pc, #564]	@ (8008ea0 <HAL_UART_IRQHandler+0x2b8>)
 8008c6c:	4013      	ands	r3, r2
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d106      	bne.n	8008c80 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008c72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008c76:	4b8b      	ldr	r3, [pc, #556]	@ (8008ea4 <HAL_UART_IRQHandler+0x2bc>)
 8008c78:	4013      	ands	r3, r2
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f000 8116 	beq.w	8008eac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c84:	f003 0301 	and.w	r3, r3, #1
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d011      	beq.n	8008cb0 <HAL_UART_IRQHandler+0xc8>
 8008c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d00b      	beq.n	8008cb0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ca6:	f043 0201 	orr.w	r2, r3, #1
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cb4:	f003 0302 	and.w	r3, r3, #2
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d011      	beq.n	8008ce0 <HAL_UART_IRQHandler+0xf8>
 8008cbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cc0:	f003 0301 	and.w	r3, r3, #1
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00b      	beq.n	8008ce0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2202      	movs	r2, #2
 8008cce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cd6:	f043 0204 	orr.w	r2, r3, #4
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ce4:	f003 0304 	and.w	r3, r3, #4
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d011      	beq.n	8008d10 <HAL_UART_IRQHandler+0x128>
 8008cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cf0:	f003 0301 	and.w	r3, r3, #1
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d00b      	beq.n	8008d10 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2204      	movs	r2, #4
 8008cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d06:	f043 0202 	orr.w	r2, r3, #2
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d14:	f003 0308 	and.w	r3, r3, #8
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d017      	beq.n	8008d4c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d20:	f003 0320 	and.w	r3, r3, #32
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d105      	bne.n	8008d34 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008d28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008d2c:	4b5c      	ldr	r3, [pc, #368]	@ (8008ea0 <HAL_UART_IRQHandler+0x2b8>)
 8008d2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d00b      	beq.n	8008d4c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2208      	movs	r2, #8
 8008d3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d42:	f043 0208 	orr.w	r2, r3, #8
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d012      	beq.n	8008d7e <HAL_UART_IRQHandler+0x196>
 8008d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00c      	beq.n	8008d7e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d74:	f043 0220 	orr.w	r2, r3, #32
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f000 8249 	beq.w	800921c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d8e:	f003 0320 	and.w	r3, r3, #32
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d013      	beq.n	8008dbe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d9a:	f003 0320 	and.w	r3, r3, #32
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d105      	bne.n	8008dae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008da2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d007      	beq.n	8008dbe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d003      	beq.n	8008dbe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dc4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dd2:	2b40      	cmp	r3, #64	@ 0x40
 8008dd4:	d005      	beq.n	8008de2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008dd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008dda:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d054      	beq.n	8008e8c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 ffd9 	bl	8009d9a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008df2:	2b40      	cmp	r3, #64	@ 0x40
 8008df4:	d146      	bne.n	8008e84 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	3308      	adds	r3, #8
 8008dfc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008e04:	e853 3f00 	ldrex	r3, [r3]
 8008e08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008e0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008e10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	3308      	adds	r3, #8
 8008e1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008e22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008e26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008e2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008e32:	e841 2300 	strex	r3, r2, [r1]
 8008e36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008e3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d1d9      	bne.n	8008df6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d017      	beq.n	8008e7c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e52:	4a15      	ldr	r2, [pc, #84]	@ (8008ea8 <HAL_UART_IRQHandler+0x2c0>)
 8008e54:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7fc fbe1 	bl	8005624 <HAL_DMA_Abort_IT>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d019      	beq.n	8008e9c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008e76:	4610      	mov	r0, r2
 8008e78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e7a:	e00f      	b.n	8008e9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f9ff 	bl	8009280 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e82:	e00b      	b.n	8008e9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 f9fb 	bl	8009280 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e8a:	e007      	b.n	8008e9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 f9f7 	bl	8009280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008e9a:	e1bf      	b.n	800921c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e9c:	bf00      	nop
    return;
 8008e9e:	e1bd      	b.n	800921c <HAL_UART_IRQHandler+0x634>
 8008ea0:	10000001 	.word	0x10000001
 8008ea4:	04000120 	.word	0x04000120
 8008ea8:	0800a107 	.word	0x0800a107

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	f040 8153 	bne.w	800915c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008eba:	f003 0310 	and.w	r3, r3, #16
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	f000 814c 	beq.w	800915c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ec8:	f003 0310 	and.w	r3, r3, #16
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f000 8145 	beq.w	800915c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2210      	movs	r2, #16
 8008ed8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ee4:	2b40      	cmp	r3, #64	@ 0x40
 8008ee6:	f040 80bb 	bne.w	8009060 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008ef8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f000 818f 	beq.w	8009220 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	f080 8187 	bcs.w	8009220 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f003 0320 	and.w	r3, r3, #32
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f040 8087 	bne.w	800903e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008f3c:	e853 3f00 	ldrex	r3, [r3]
 8008f40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008f44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008f48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	461a      	mov	r2, r3
 8008f56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008f5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008f5e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f62:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008f66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008f6a:	e841 2300 	strex	r3, r2, [r1]
 8008f6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1da      	bne.n	8008f30 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	3308      	adds	r3, #8
 8008f80:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f84:	e853 3f00 	ldrex	r3, [r3]
 8008f88:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008f8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008f8c:	f023 0301 	bic.w	r3, r3, #1
 8008f90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	3308      	adds	r3, #8
 8008f9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008f9e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008fa2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008fa6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008faa:	e841 2300 	strex	r3, r2, [r1]
 8008fae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008fb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d1e1      	bne.n	8008f7a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	3308      	adds	r3, #8
 8008fbc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008fc0:	e853 3f00 	ldrex	r3, [r3]
 8008fc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008fc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008fc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	3308      	adds	r3, #8
 8008fd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008fda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008fdc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fde:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008fe0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008fe2:	e841 2300 	strex	r3, r2, [r1]
 8008fe6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008fe8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d1e3      	bne.n	8008fb6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2220      	movs	r2, #32
 8008ff2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009002:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009004:	e853 3f00 	ldrex	r3, [r3]
 8009008:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800900a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800900c:	f023 0310 	bic.w	r3, r3, #16
 8009010:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	461a      	mov	r2, r3
 800901a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800901e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009020:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009022:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009024:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009026:	e841 2300 	strex	r3, r2, [r1]
 800902a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800902c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1e4      	bne.n	8008ffc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009038:	4618      	mov	r0, r3
 800903a:	f7fc fa9a 	bl	8005572 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2202      	movs	r2, #2
 8009042:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009050:	b29b      	uxth	r3, r3
 8009052:	1ad3      	subs	r3, r2, r3
 8009054:	b29b      	uxth	r3, r3
 8009056:	4619      	mov	r1, r3
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f001 ff9b 	bl	800af94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800905e:	e0df      	b.n	8009220 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800906c:	b29b      	uxth	r3, r3
 800906e:	1ad3      	subs	r3, r2, r3
 8009070:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800907a:	b29b      	uxth	r3, r3
 800907c:	2b00      	cmp	r3, #0
 800907e:	f000 80d1 	beq.w	8009224 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8009082:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009086:	2b00      	cmp	r3, #0
 8009088:	f000 80cc 	beq.w	8009224 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009094:	e853 3f00 	ldrex	r3, [r3]
 8009098:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800909a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800909c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80090a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	461a      	mov	r2, r3
 80090aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80090ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80090b0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80090b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090b6:	e841 2300 	strex	r3, r2, [r1]
 80090ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80090bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1e4      	bne.n	800908c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	3308      	adds	r3, #8
 80090c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090cc:	e853 3f00 	ldrex	r3, [r3]
 80090d0:	623b      	str	r3, [r7, #32]
   return(result);
 80090d2:	6a3b      	ldr	r3, [r7, #32]
 80090d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090d8:	f023 0301 	bic.w	r3, r3, #1
 80090dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	3308      	adds	r3, #8
 80090e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80090ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80090ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80090f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090f2:	e841 2300 	strex	r3, r2, [r1]
 80090f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80090f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1e1      	bne.n	80090c2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2220      	movs	r2, #32
 8009102:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	e853 3f00 	ldrex	r3, [r3]
 800911e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f023 0310 	bic.w	r3, r3, #16
 8009126:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	461a      	mov	r2, r3
 8009130:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009134:	61fb      	str	r3, [r7, #28]
 8009136:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009138:	69b9      	ldr	r1, [r7, #24]
 800913a:	69fa      	ldr	r2, [r7, #28]
 800913c:	e841 2300 	strex	r3, r2, [r1]
 8009140:	617b      	str	r3, [r7, #20]
   return(result);
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1e4      	bne.n	8009112 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2202      	movs	r2, #2
 800914c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800914e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009152:	4619      	mov	r1, r3
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f001 ff1d 	bl	800af94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800915a:	e063      	b.n	8009224 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800915c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009160:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009164:	2b00      	cmp	r3, #0
 8009166:	d00e      	beq.n	8009186 <HAL_UART_IRQHandler+0x59e>
 8009168:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800916c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009170:	2b00      	cmp	r3, #0
 8009172:	d008      	beq.n	8009186 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800917c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f001 f802 	bl	800a188 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009184:	e051      	b.n	800922a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800918a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800918e:	2b00      	cmp	r3, #0
 8009190:	d014      	beq.n	80091bc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800919a:	2b00      	cmp	r3, #0
 800919c:	d105      	bne.n	80091aa <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800919e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d008      	beq.n	80091bc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d03a      	beq.n	8009228 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	4798      	blx	r3
    }
    return;
 80091ba:	e035      	b.n	8009228 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80091bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d009      	beq.n	80091dc <HAL_UART_IRQHandler+0x5f4>
 80091c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d003      	beq.n	80091dc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 ffac 	bl	800a132 <UART_EndTransmit_IT>
    return;
 80091da:	e026      	b.n	800922a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80091dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d009      	beq.n	80091fc <HAL_UART_IRQHandler+0x614>
 80091e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091ec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d003      	beq.n	80091fc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 ffdb 	bl	800a1b0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091fa:	e016      	b.n	800922a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80091fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009200:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009204:	2b00      	cmp	r3, #0
 8009206:	d010      	beq.n	800922a <HAL_UART_IRQHandler+0x642>
 8009208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800920c:	2b00      	cmp	r3, #0
 800920e:	da0c      	bge.n	800922a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 ffc3 	bl	800a19c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009216:	e008      	b.n	800922a <HAL_UART_IRQHandler+0x642>
      return;
 8009218:	bf00      	nop
 800921a:	e006      	b.n	800922a <HAL_UART_IRQHandler+0x642>
    return;
 800921c:	bf00      	nop
 800921e:	e004      	b.n	800922a <HAL_UART_IRQHandler+0x642>
      return;
 8009220:	bf00      	nop
 8009222:	e002      	b.n	800922a <HAL_UART_IRQHandler+0x642>
      return;
 8009224:	bf00      	nop
 8009226:	e000      	b.n	800922a <HAL_UART_IRQHandler+0x642>
    return;
 8009228:	bf00      	nop
  }
}
 800922a:	37e8      	adds	r7, #232	@ 0xe8
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009274:	bf00      	nop
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009288:	bf00      	nop
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092a2:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092aa:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80092ac:	68fa      	ldr	r2, [r7, #12]
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	4313      	orrs	r3, r2
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3714      	adds	r7, #20
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
	...

080092c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092c4:	b08c      	sub	sp, #48	@ 0x30
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80092ca:	2300      	movs	r3, #0
 80092cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	689a      	ldr	r2, [r3, #8]
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	691b      	ldr	r3, [r3, #16]
 80092d8:	431a      	orrs	r2, r3
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	695b      	ldr	r3, [r3, #20]
 80092de:	431a      	orrs	r2, r3
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	69db      	ldr	r3, [r3, #28]
 80092e4:	4313      	orrs	r3, r2
 80092e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	4bab      	ldr	r3, [pc, #684]	@ (800959c <UART_SetConfig+0x2dc>)
 80092f0:	4013      	ands	r3, r2
 80092f2:	697a      	ldr	r2, [r7, #20]
 80092f4:	6812      	ldr	r2, [r2, #0]
 80092f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092f8:	430b      	orrs	r3, r1
 80092fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	68da      	ldr	r2, [r3, #12]
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	430a      	orrs	r2, r1
 8009310:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	699b      	ldr	r3, [r3, #24]
 8009316:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4aa0      	ldr	r2, [pc, #640]	@ (80095a0 <UART_SetConfig+0x2e0>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d004      	beq.n	800932c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	6a1b      	ldr	r3, [r3, #32]
 8009326:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009328:	4313      	orrs	r3, r2
 800932a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009336:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800933a:	697a      	ldr	r2, [r7, #20]
 800933c:	6812      	ldr	r2, [r2, #0]
 800933e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009340:	430b      	orrs	r3, r1
 8009342:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800934a:	f023 010f 	bic.w	r1, r3, #15
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	430a      	orrs	r2, r1
 8009358:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a91      	ldr	r2, [pc, #580]	@ (80095a4 <UART_SetConfig+0x2e4>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d125      	bne.n	80093b0 <UART_SetConfig+0xf0>
 8009364:	4b90      	ldr	r3, [pc, #576]	@ (80095a8 <UART_SetConfig+0x2e8>)
 8009366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800936a:	f003 0303 	and.w	r3, r3, #3
 800936e:	2b03      	cmp	r3, #3
 8009370:	d81a      	bhi.n	80093a8 <UART_SetConfig+0xe8>
 8009372:	a201      	add	r2, pc, #4	@ (adr r2, 8009378 <UART_SetConfig+0xb8>)
 8009374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009378:	08009389 	.word	0x08009389
 800937c:	08009399 	.word	0x08009399
 8009380:	08009391 	.word	0x08009391
 8009384:	080093a1 	.word	0x080093a1
 8009388:	2301      	movs	r3, #1
 800938a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800938e:	e0d6      	b.n	800953e <UART_SetConfig+0x27e>
 8009390:	2302      	movs	r3, #2
 8009392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009396:	e0d2      	b.n	800953e <UART_SetConfig+0x27e>
 8009398:	2304      	movs	r3, #4
 800939a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800939e:	e0ce      	b.n	800953e <UART_SetConfig+0x27e>
 80093a0:	2308      	movs	r3, #8
 80093a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093a6:	e0ca      	b.n	800953e <UART_SetConfig+0x27e>
 80093a8:	2310      	movs	r3, #16
 80093aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093ae:	e0c6      	b.n	800953e <UART_SetConfig+0x27e>
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a7d      	ldr	r2, [pc, #500]	@ (80095ac <UART_SetConfig+0x2ec>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d138      	bne.n	800942c <UART_SetConfig+0x16c>
 80093ba:	4b7b      	ldr	r3, [pc, #492]	@ (80095a8 <UART_SetConfig+0x2e8>)
 80093bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093c0:	f003 030c 	and.w	r3, r3, #12
 80093c4:	2b0c      	cmp	r3, #12
 80093c6:	d82d      	bhi.n	8009424 <UART_SetConfig+0x164>
 80093c8:	a201      	add	r2, pc, #4	@ (adr r2, 80093d0 <UART_SetConfig+0x110>)
 80093ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ce:	bf00      	nop
 80093d0:	08009405 	.word	0x08009405
 80093d4:	08009425 	.word	0x08009425
 80093d8:	08009425 	.word	0x08009425
 80093dc:	08009425 	.word	0x08009425
 80093e0:	08009415 	.word	0x08009415
 80093e4:	08009425 	.word	0x08009425
 80093e8:	08009425 	.word	0x08009425
 80093ec:	08009425 	.word	0x08009425
 80093f0:	0800940d 	.word	0x0800940d
 80093f4:	08009425 	.word	0x08009425
 80093f8:	08009425 	.word	0x08009425
 80093fc:	08009425 	.word	0x08009425
 8009400:	0800941d 	.word	0x0800941d
 8009404:	2300      	movs	r3, #0
 8009406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800940a:	e098      	b.n	800953e <UART_SetConfig+0x27e>
 800940c:	2302      	movs	r3, #2
 800940e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009412:	e094      	b.n	800953e <UART_SetConfig+0x27e>
 8009414:	2304      	movs	r3, #4
 8009416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800941a:	e090      	b.n	800953e <UART_SetConfig+0x27e>
 800941c:	2308      	movs	r3, #8
 800941e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009422:	e08c      	b.n	800953e <UART_SetConfig+0x27e>
 8009424:	2310      	movs	r3, #16
 8009426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800942a:	e088      	b.n	800953e <UART_SetConfig+0x27e>
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a5f      	ldr	r2, [pc, #380]	@ (80095b0 <UART_SetConfig+0x2f0>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d125      	bne.n	8009482 <UART_SetConfig+0x1c2>
 8009436:	4b5c      	ldr	r3, [pc, #368]	@ (80095a8 <UART_SetConfig+0x2e8>)
 8009438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800943c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009440:	2b30      	cmp	r3, #48	@ 0x30
 8009442:	d016      	beq.n	8009472 <UART_SetConfig+0x1b2>
 8009444:	2b30      	cmp	r3, #48	@ 0x30
 8009446:	d818      	bhi.n	800947a <UART_SetConfig+0x1ba>
 8009448:	2b20      	cmp	r3, #32
 800944a:	d00a      	beq.n	8009462 <UART_SetConfig+0x1a2>
 800944c:	2b20      	cmp	r3, #32
 800944e:	d814      	bhi.n	800947a <UART_SetConfig+0x1ba>
 8009450:	2b00      	cmp	r3, #0
 8009452:	d002      	beq.n	800945a <UART_SetConfig+0x19a>
 8009454:	2b10      	cmp	r3, #16
 8009456:	d008      	beq.n	800946a <UART_SetConfig+0x1aa>
 8009458:	e00f      	b.n	800947a <UART_SetConfig+0x1ba>
 800945a:	2300      	movs	r3, #0
 800945c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009460:	e06d      	b.n	800953e <UART_SetConfig+0x27e>
 8009462:	2302      	movs	r3, #2
 8009464:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009468:	e069      	b.n	800953e <UART_SetConfig+0x27e>
 800946a:	2304      	movs	r3, #4
 800946c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009470:	e065      	b.n	800953e <UART_SetConfig+0x27e>
 8009472:	2308      	movs	r3, #8
 8009474:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009478:	e061      	b.n	800953e <UART_SetConfig+0x27e>
 800947a:	2310      	movs	r3, #16
 800947c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009480:	e05d      	b.n	800953e <UART_SetConfig+0x27e>
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a4b      	ldr	r2, [pc, #300]	@ (80095b4 <UART_SetConfig+0x2f4>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d125      	bne.n	80094d8 <UART_SetConfig+0x218>
 800948c:	4b46      	ldr	r3, [pc, #280]	@ (80095a8 <UART_SetConfig+0x2e8>)
 800948e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009492:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009496:	2bc0      	cmp	r3, #192	@ 0xc0
 8009498:	d016      	beq.n	80094c8 <UART_SetConfig+0x208>
 800949a:	2bc0      	cmp	r3, #192	@ 0xc0
 800949c:	d818      	bhi.n	80094d0 <UART_SetConfig+0x210>
 800949e:	2b80      	cmp	r3, #128	@ 0x80
 80094a0:	d00a      	beq.n	80094b8 <UART_SetConfig+0x1f8>
 80094a2:	2b80      	cmp	r3, #128	@ 0x80
 80094a4:	d814      	bhi.n	80094d0 <UART_SetConfig+0x210>
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d002      	beq.n	80094b0 <UART_SetConfig+0x1f0>
 80094aa:	2b40      	cmp	r3, #64	@ 0x40
 80094ac:	d008      	beq.n	80094c0 <UART_SetConfig+0x200>
 80094ae:	e00f      	b.n	80094d0 <UART_SetConfig+0x210>
 80094b0:	2300      	movs	r3, #0
 80094b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094b6:	e042      	b.n	800953e <UART_SetConfig+0x27e>
 80094b8:	2302      	movs	r3, #2
 80094ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094be:	e03e      	b.n	800953e <UART_SetConfig+0x27e>
 80094c0:	2304      	movs	r3, #4
 80094c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094c6:	e03a      	b.n	800953e <UART_SetConfig+0x27e>
 80094c8:	2308      	movs	r3, #8
 80094ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094ce:	e036      	b.n	800953e <UART_SetConfig+0x27e>
 80094d0:	2310      	movs	r3, #16
 80094d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094d6:	e032      	b.n	800953e <UART_SetConfig+0x27e>
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a30      	ldr	r2, [pc, #192]	@ (80095a0 <UART_SetConfig+0x2e0>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d12a      	bne.n	8009538 <UART_SetConfig+0x278>
 80094e2:	4b31      	ldr	r3, [pc, #196]	@ (80095a8 <UART_SetConfig+0x2e8>)
 80094e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80094ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80094f0:	d01a      	beq.n	8009528 <UART_SetConfig+0x268>
 80094f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80094f6:	d81b      	bhi.n	8009530 <UART_SetConfig+0x270>
 80094f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094fc:	d00c      	beq.n	8009518 <UART_SetConfig+0x258>
 80094fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009502:	d815      	bhi.n	8009530 <UART_SetConfig+0x270>
 8009504:	2b00      	cmp	r3, #0
 8009506:	d003      	beq.n	8009510 <UART_SetConfig+0x250>
 8009508:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800950c:	d008      	beq.n	8009520 <UART_SetConfig+0x260>
 800950e:	e00f      	b.n	8009530 <UART_SetConfig+0x270>
 8009510:	2300      	movs	r3, #0
 8009512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009516:	e012      	b.n	800953e <UART_SetConfig+0x27e>
 8009518:	2302      	movs	r3, #2
 800951a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800951e:	e00e      	b.n	800953e <UART_SetConfig+0x27e>
 8009520:	2304      	movs	r3, #4
 8009522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009526:	e00a      	b.n	800953e <UART_SetConfig+0x27e>
 8009528:	2308      	movs	r3, #8
 800952a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800952e:	e006      	b.n	800953e <UART_SetConfig+0x27e>
 8009530:	2310      	movs	r3, #16
 8009532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009536:	e002      	b.n	800953e <UART_SetConfig+0x27e>
 8009538:	2310      	movs	r3, #16
 800953a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a17      	ldr	r2, [pc, #92]	@ (80095a0 <UART_SetConfig+0x2e0>)
 8009544:	4293      	cmp	r3, r2
 8009546:	f040 80a8 	bne.w	800969a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800954a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800954e:	2b08      	cmp	r3, #8
 8009550:	d834      	bhi.n	80095bc <UART_SetConfig+0x2fc>
 8009552:	a201      	add	r2, pc, #4	@ (adr r2, 8009558 <UART_SetConfig+0x298>)
 8009554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009558:	0800957d 	.word	0x0800957d
 800955c:	080095bd 	.word	0x080095bd
 8009560:	08009585 	.word	0x08009585
 8009564:	080095bd 	.word	0x080095bd
 8009568:	0800958b 	.word	0x0800958b
 800956c:	080095bd 	.word	0x080095bd
 8009570:	080095bd 	.word	0x080095bd
 8009574:	080095bd 	.word	0x080095bd
 8009578:	08009593 	.word	0x08009593
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800957c:	f7fd f912 	bl	80067a4 <HAL_RCC_GetPCLK1Freq>
 8009580:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009582:	e021      	b.n	80095c8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009584:	4b0c      	ldr	r3, [pc, #48]	@ (80095b8 <UART_SetConfig+0x2f8>)
 8009586:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009588:	e01e      	b.n	80095c8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800958a:	f7fd f89d 	bl	80066c8 <HAL_RCC_GetSysClockFreq>
 800958e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009590:	e01a      	b.n	80095c8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009592:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009596:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009598:	e016      	b.n	80095c8 <UART_SetConfig+0x308>
 800959a:	bf00      	nop
 800959c:	cfff69f3 	.word	0xcfff69f3
 80095a0:	40008000 	.word	0x40008000
 80095a4:	40013800 	.word	0x40013800
 80095a8:	40021000 	.word	0x40021000
 80095ac:	40004400 	.word	0x40004400
 80095b0:	40004800 	.word	0x40004800
 80095b4:	40004c00 	.word	0x40004c00
 80095b8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80095bc:	2300      	movs	r3, #0
 80095be:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80095c6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80095c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f000 812a 	beq.w	8009824 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095d4:	4a9e      	ldr	r2, [pc, #632]	@ (8009850 <UART_SetConfig+0x590>)
 80095d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095da:	461a      	mov	r2, r3
 80095dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095de:	fbb3 f3f2 	udiv	r3, r3, r2
 80095e2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	685a      	ldr	r2, [r3, #4]
 80095e8:	4613      	mov	r3, r2
 80095ea:	005b      	lsls	r3, r3, #1
 80095ec:	4413      	add	r3, r2
 80095ee:	69ba      	ldr	r2, [r7, #24]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d305      	bcc.n	8009600 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095fa:	69ba      	ldr	r2, [r7, #24]
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d903      	bls.n	8009608 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009606:	e10d      	b.n	8009824 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800960a:	2200      	movs	r2, #0
 800960c:	60bb      	str	r3, [r7, #8]
 800960e:	60fa      	str	r2, [r7, #12]
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009614:	4a8e      	ldr	r2, [pc, #568]	@ (8009850 <UART_SetConfig+0x590>)
 8009616:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800961a:	b29b      	uxth	r3, r3
 800961c:	2200      	movs	r2, #0
 800961e:	603b      	str	r3, [r7, #0]
 8009620:	607a      	str	r2, [r7, #4]
 8009622:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009626:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800962a:	f7f7 fb55 	bl	8000cd8 <__aeabi_uldivmod>
 800962e:	4602      	mov	r2, r0
 8009630:	460b      	mov	r3, r1
 8009632:	4610      	mov	r0, r2
 8009634:	4619      	mov	r1, r3
 8009636:	f04f 0200 	mov.w	r2, #0
 800963a:	f04f 0300 	mov.w	r3, #0
 800963e:	020b      	lsls	r3, r1, #8
 8009640:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009644:	0202      	lsls	r2, r0, #8
 8009646:	6979      	ldr	r1, [r7, #20]
 8009648:	6849      	ldr	r1, [r1, #4]
 800964a:	0849      	lsrs	r1, r1, #1
 800964c:	2000      	movs	r0, #0
 800964e:	460c      	mov	r4, r1
 8009650:	4605      	mov	r5, r0
 8009652:	eb12 0804 	adds.w	r8, r2, r4
 8009656:	eb43 0905 	adc.w	r9, r3, r5
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	469a      	mov	sl, r3
 8009662:	4693      	mov	fp, r2
 8009664:	4652      	mov	r2, sl
 8009666:	465b      	mov	r3, fp
 8009668:	4640      	mov	r0, r8
 800966a:	4649      	mov	r1, r9
 800966c:	f7f7 fb34 	bl	8000cd8 <__aeabi_uldivmod>
 8009670:	4602      	mov	r2, r0
 8009672:	460b      	mov	r3, r1
 8009674:	4613      	mov	r3, r2
 8009676:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009678:	6a3b      	ldr	r3, [r7, #32]
 800967a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800967e:	d308      	bcc.n	8009692 <UART_SetConfig+0x3d2>
 8009680:	6a3b      	ldr	r3, [r7, #32]
 8009682:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009686:	d204      	bcs.n	8009692 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	6a3a      	ldr	r2, [r7, #32]
 800968e:	60da      	str	r2, [r3, #12]
 8009690:	e0c8      	b.n	8009824 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009698:	e0c4      	b.n	8009824 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	69db      	ldr	r3, [r3, #28]
 800969e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096a2:	d167      	bne.n	8009774 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80096a4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80096a8:	2b08      	cmp	r3, #8
 80096aa:	d828      	bhi.n	80096fe <UART_SetConfig+0x43e>
 80096ac:	a201      	add	r2, pc, #4	@ (adr r2, 80096b4 <UART_SetConfig+0x3f4>)
 80096ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b2:	bf00      	nop
 80096b4:	080096d9 	.word	0x080096d9
 80096b8:	080096e1 	.word	0x080096e1
 80096bc:	080096e9 	.word	0x080096e9
 80096c0:	080096ff 	.word	0x080096ff
 80096c4:	080096ef 	.word	0x080096ef
 80096c8:	080096ff 	.word	0x080096ff
 80096cc:	080096ff 	.word	0x080096ff
 80096d0:	080096ff 	.word	0x080096ff
 80096d4:	080096f7 	.word	0x080096f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096d8:	f7fd f864 	bl	80067a4 <HAL_RCC_GetPCLK1Freq>
 80096dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80096de:	e014      	b.n	800970a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096e0:	f7fd f876 	bl	80067d0 <HAL_RCC_GetPCLK2Freq>
 80096e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80096e6:	e010      	b.n	800970a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80096e8:	4b5a      	ldr	r3, [pc, #360]	@ (8009854 <UART_SetConfig+0x594>)
 80096ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80096ec:	e00d      	b.n	800970a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80096ee:	f7fc ffeb 	bl	80066c8 <HAL_RCC_GetSysClockFreq>
 80096f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80096f4:	e009      	b.n	800970a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80096fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80096fc:	e005      	b.n	800970a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80096fe:	2300      	movs	r3, #0
 8009700:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009708:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800970a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800970c:	2b00      	cmp	r3, #0
 800970e:	f000 8089 	beq.w	8009824 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009716:	4a4e      	ldr	r2, [pc, #312]	@ (8009850 <UART_SetConfig+0x590>)
 8009718:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800971c:	461a      	mov	r2, r3
 800971e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009720:	fbb3 f3f2 	udiv	r3, r3, r2
 8009724:	005a      	lsls	r2, r3, #1
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	085b      	lsrs	r3, r3, #1
 800972c:	441a      	add	r2, r3
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	fbb2 f3f3 	udiv	r3, r2, r3
 8009736:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009738:	6a3b      	ldr	r3, [r7, #32]
 800973a:	2b0f      	cmp	r3, #15
 800973c:	d916      	bls.n	800976c <UART_SetConfig+0x4ac>
 800973e:	6a3b      	ldr	r3, [r7, #32]
 8009740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009744:	d212      	bcs.n	800976c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009746:	6a3b      	ldr	r3, [r7, #32]
 8009748:	b29b      	uxth	r3, r3
 800974a:	f023 030f 	bic.w	r3, r3, #15
 800974e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009750:	6a3b      	ldr	r3, [r7, #32]
 8009752:	085b      	lsrs	r3, r3, #1
 8009754:	b29b      	uxth	r3, r3
 8009756:	f003 0307 	and.w	r3, r3, #7
 800975a:	b29a      	uxth	r2, r3
 800975c:	8bfb      	ldrh	r3, [r7, #30]
 800975e:	4313      	orrs	r3, r2
 8009760:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	8bfa      	ldrh	r2, [r7, #30]
 8009768:	60da      	str	r2, [r3, #12]
 800976a:	e05b      	b.n	8009824 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009772:	e057      	b.n	8009824 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009774:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009778:	2b08      	cmp	r3, #8
 800977a:	d828      	bhi.n	80097ce <UART_SetConfig+0x50e>
 800977c:	a201      	add	r2, pc, #4	@ (adr r2, 8009784 <UART_SetConfig+0x4c4>)
 800977e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009782:	bf00      	nop
 8009784:	080097a9 	.word	0x080097a9
 8009788:	080097b1 	.word	0x080097b1
 800978c:	080097b9 	.word	0x080097b9
 8009790:	080097cf 	.word	0x080097cf
 8009794:	080097bf 	.word	0x080097bf
 8009798:	080097cf 	.word	0x080097cf
 800979c:	080097cf 	.word	0x080097cf
 80097a0:	080097cf 	.word	0x080097cf
 80097a4:	080097c7 	.word	0x080097c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097a8:	f7fc fffc 	bl	80067a4 <HAL_RCC_GetPCLK1Freq>
 80097ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80097ae:	e014      	b.n	80097da <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097b0:	f7fd f80e 	bl	80067d0 <HAL_RCC_GetPCLK2Freq>
 80097b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80097b6:	e010      	b.n	80097da <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80097b8:	4b26      	ldr	r3, [pc, #152]	@ (8009854 <UART_SetConfig+0x594>)
 80097ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80097bc:	e00d      	b.n	80097da <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80097be:	f7fc ff83 	bl	80066c8 <HAL_RCC_GetSysClockFreq>
 80097c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80097c4:	e009      	b.n	80097da <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80097cc:	e005      	b.n	80097da <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80097ce:	2300      	movs	r3, #0
 80097d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80097d8:	bf00      	nop
    }

    if (pclk != 0U)
 80097da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d021      	beq.n	8009824 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097e4:	4a1a      	ldr	r2, [pc, #104]	@ (8009850 <UART_SetConfig+0x590>)
 80097e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097ea:	461a      	mov	r2, r3
 80097ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	085b      	lsrs	r3, r3, #1
 80097f8:	441a      	add	r2, r3
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009802:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009804:	6a3b      	ldr	r3, [r7, #32]
 8009806:	2b0f      	cmp	r3, #15
 8009808:	d909      	bls.n	800981e <UART_SetConfig+0x55e>
 800980a:	6a3b      	ldr	r3, [r7, #32]
 800980c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009810:	d205      	bcs.n	800981e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009812:	6a3b      	ldr	r3, [r7, #32]
 8009814:	b29a      	uxth	r2, r3
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	60da      	str	r2, [r3, #12]
 800981c:	e002      	b.n	8009824 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	2201      	movs	r2, #1
 8009828:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	2201      	movs	r2, #1
 8009830:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	2200      	movs	r2, #0
 8009838:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	2200      	movs	r2, #0
 800983e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009840:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009844:	4618      	mov	r0, r3
 8009846:	3730      	adds	r7, #48	@ 0x30
 8009848:	46bd      	mov	sp, r7
 800984a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800984e:	bf00      	nop
 8009850:	0800fddc 	.word	0x0800fddc
 8009854:	00f42400 	.word	0x00f42400

08009858 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009864:	f003 0308 	and.w	r3, r3, #8
 8009868:	2b00      	cmp	r3, #0
 800986a:	d00a      	beq.n	8009882 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	430a      	orrs	r2, r1
 8009880:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009886:	f003 0301 	and.w	r3, r3, #1
 800988a:	2b00      	cmp	r3, #0
 800988c:	d00a      	beq.n	80098a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	430a      	orrs	r2, r1
 80098a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098a8:	f003 0302 	and.w	r3, r3, #2
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d00a      	beq.n	80098c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	430a      	orrs	r2, r1
 80098c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ca:	f003 0304 	and.w	r3, r3, #4
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d00a      	beq.n	80098e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	430a      	orrs	r2, r1
 80098e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ec:	f003 0310 	and.w	r3, r3, #16
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00a      	beq.n	800990a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	430a      	orrs	r2, r1
 8009908:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800990e:	f003 0320 	and.w	r3, r3, #32
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00a      	beq.n	800992c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	689b      	ldr	r3, [r3, #8]
 800991c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	430a      	orrs	r2, r1
 800992a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009934:	2b00      	cmp	r3, #0
 8009936:	d01a      	beq.n	800996e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	430a      	orrs	r2, r1
 800994c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009952:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009956:	d10a      	bne.n	800996e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	430a      	orrs	r2, r1
 800996c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009976:	2b00      	cmp	r3, #0
 8009978:	d00a      	beq.n	8009990 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	430a      	orrs	r2, r1
 800998e:	605a      	str	r2, [r3, #4]
  }
}
 8009990:	bf00      	nop
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b098      	sub	sp, #96	@ 0x60
 80099a0:	af02      	add	r7, sp, #8
 80099a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80099ac:	f7f8 fd9c 	bl	80024e8 <HAL_GetTick>
 80099b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f003 0308 	and.w	r3, r3, #8
 80099bc:	2b08      	cmp	r3, #8
 80099be:	d12f      	bne.n	8009a20 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80099c4:	9300      	str	r3, [sp, #0]
 80099c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099c8:	2200      	movs	r2, #0
 80099ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f88e 	bl	8009af0 <UART_WaitOnFlagUntilTimeout>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d022      	beq.n	8009a20 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099e2:	e853 3f00 	ldrex	r3, [r3]
 80099e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80099e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80099ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	461a      	mov	r2, r3
 80099f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80099fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80099fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a00:	e841 2300 	strex	r3, r2, [r1]
 8009a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d1e6      	bne.n	80099da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2220      	movs	r2, #32
 8009a10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a1c:	2303      	movs	r3, #3
 8009a1e:	e063      	b.n	8009ae8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f003 0304 	and.w	r3, r3, #4
 8009a2a:	2b04      	cmp	r3, #4
 8009a2c:	d149      	bne.n	8009ac2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a2e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a36:	2200      	movs	r2, #0
 8009a38:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 f857 	bl	8009af0 <UART_WaitOnFlagUntilTimeout>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d03c      	beq.n	8009ac2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a50:	e853 3f00 	ldrex	r3, [r3]
 8009a54:	623b      	str	r3, [r7, #32]
   return(result);
 8009a56:	6a3b      	ldr	r3, [r7, #32]
 8009a58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	461a      	mov	r2, r3
 8009a64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a66:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a68:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a6e:	e841 2300 	strex	r3, r2, [r1]
 8009a72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d1e6      	bne.n	8009a48 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	3308      	adds	r3, #8
 8009a80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	e853 3f00 	ldrex	r3, [r3]
 8009a88:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f023 0301 	bic.w	r3, r3, #1
 8009a90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	3308      	adds	r3, #8
 8009a98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a9a:	61fa      	str	r2, [r7, #28]
 8009a9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9e:	69b9      	ldr	r1, [r7, #24]
 8009aa0:	69fa      	ldr	r2, [r7, #28]
 8009aa2:	e841 2300 	strex	r3, r2, [r1]
 8009aa6:	617b      	str	r3, [r7, #20]
   return(result);
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d1e5      	bne.n	8009a7a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2220      	movs	r2, #32
 8009ab2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009abe:	2303      	movs	r3, #3
 8009ac0:	e012      	b.n	8009ae8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2220      	movs	r2, #32
 8009ac6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2220      	movs	r2, #32
 8009ace:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ae6:	2300      	movs	r3, #0
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3758      	adds	r7, #88	@ 0x58
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	60f8      	str	r0, [r7, #12]
 8009af8:	60b9      	str	r1, [r7, #8]
 8009afa:	603b      	str	r3, [r7, #0]
 8009afc:	4613      	mov	r3, r2
 8009afe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b00:	e04f      	b.n	8009ba2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b02:	69bb      	ldr	r3, [r7, #24]
 8009b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b08:	d04b      	beq.n	8009ba2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b0a:	f7f8 fced 	bl	80024e8 <HAL_GetTick>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	1ad3      	subs	r3, r2, r3
 8009b14:	69ba      	ldr	r2, [r7, #24]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d302      	bcc.n	8009b20 <UART_WaitOnFlagUntilTimeout+0x30>
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d101      	bne.n	8009b24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009b20:	2303      	movs	r3, #3
 8009b22:	e04e      	b.n	8009bc2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f003 0304 	and.w	r3, r3, #4
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d037      	beq.n	8009ba2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	2b80      	cmp	r3, #128	@ 0x80
 8009b36:	d034      	beq.n	8009ba2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	2b40      	cmp	r3, #64	@ 0x40
 8009b3c:	d031      	beq.n	8009ba2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	69db      	ldr	r3, [r3, #28]
 8009b44:	f003 0308 	and.w	r3, r3, #8
 8009b48:	2b08      	cmp	r3, #8
 8009b4a:	d110      	bne.n	8009b6e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2208      	movs	r2, #8
 8009b52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b54:	68f8      	ldr	r0, [r7, #12]
 8009b56:	f000 f920 	bl	8009d9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2208      	movs	r2, #8
 8009b5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e029      	b.n	8009bc2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	69db      	ldr	r3, [r3, #28]
 8009b74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b7c:	d111      	bne.n	8009ba2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009b86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f000 f906 	bl	8009d9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2220      	movs	r2, #32
 8009b92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009b9e:	2303      	movs	r3, #3
 8009ba0:	e00f      	b.n	8009bc2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	69da      	ldr	r2, [r3, #28]
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	4013      	ands	r3, r2
 8009bac:	68ba      	ldr	r2, [r7, #8]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	bf0c      	ite	eq
 8009bb2:	2301      	moveq	r3, #1
 8009bb4:	2300      	movne	r3, #0
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	461a      	mov	r2, r3
 8009bba:	79fb      	ldrb	r3, [r7, #7]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d0a0      	beq.n	8009b02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3710      	adds	r7, #16
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
	...

08009bcc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b096      	sub	sp, #88	@ 0x58
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	68ba      	ldr	r2, [r7, #8]
 8009bde:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	88fa      	ldrh	r2, [r7, #6]
 8009be4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2222      	movs	r2, #34	@ 0x22
 8009bf4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d02d      	beq.n	8009c5e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c08:	4a40      	ldr	r2, [pc, #256]	@ (8009d0c <UART_Start_Receive_DMA+0x140>)
 8009c0a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c12:	4a3f      	ldr	r2, [pc, #252]	@ (8009d10 <UART_Start_Receive_DMA+0x144>)
 8009c14:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c1c:	4a3d      	ldr	r2, [pc, #244]	@ (8009d14 <UART_Start_Receive_DMA+0x148>)
 8009c1e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c26:	2200      	movs	r2, #0
 8009c28:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	3324      	adds	r3, #36	@ 0x24
 8009c36:	4619      	mov	r1, r3
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	88fb      	ldrh	r3, [r7, #6]
 8009c40:	f7fb fc1c 	bl	800547c <HAL_DMA_Start_IT>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d009      	beq.n	8009c5e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2210      	movs	r2, #16
 8009c4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2220      	movs	r2, #32
 8009c56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e051      	b.n	8009d02 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	691b      	ldr	r3, [r3, #16]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d018      	beq.n	8009c98 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c6e:	e853 3f00 	ldrex	r3, [r3]
 8009c72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	461a      	mov	r2, r3
 8009c82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c86:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c88:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009c8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c8c:	e841 2300 	strex	r3, r2, [r1]
 8009c90:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009c92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d1e6      	bne.n	8009c66 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	3308      	adds	r3, #8
 8009c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ca2:	e853 3f00 	ldrex	r3, [r3]
 8009ca6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009caa:	f043 0301 	orr.w	r3, r3, #1
 8009cae:	653b      	str	r3, [r7, #80]	@ 0x50
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	3308      	adds	r3, #8
 8009cb6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009cb8:	637a      	str	r2, [r7, #52]	@ 0x34
 8009cba:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cbc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009cbe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009cc0:	e841 2300 	strex	r3, r2, [r1]
 8009cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d1e5      	bne.n	8009c98 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	3308      	adds	r3, #8
 8009cd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	e853 3f00 	ldrex	r3, [r3]
 8009cda:	613b      	str	r3, [r7, #16]
   return(result);
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	3308      	adds	r3, #8
 8009cea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009cec:	623a      	str	r2, [r7, #32]
 8009cee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf0:	69f9      	ldr	r1, [r7, #28]
 8009cf2:	6a3a      	ldr	r2, [r7, #32]
 8009cf4:	e841 2300 	strex	r3, r2, [r1]
 8009cf8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009cfa:	69bb      	ldr	r3, [r7, #24]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d1e5      	bne.n	8009ccc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3758      	adds	r7, #88	@ 0x58
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	08009f1d 	.word	0x08009f1d
 8009d10:	0800a049 	.word	0x0800a049
 8009d14:	0800a087 	.word	0x0800a087

08009d18 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b08f      	sub	sp, #60	@ 0x3c
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d26:	6a3b      	ldr	r3, [r7, #32]
 8009d28:	e853 3f00 	ldrex	r3, [r3]
 8009d2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d2e:	69fb      	ldr	r3, [r7, #28]
 8009d30:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009d34:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d40:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d46:	e841 2300 	strex	r3, r2, [r1]
 8009d4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d1e6      	bne.n	8009d20 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	3308      	adds	r3, #8
 8009d58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	e853 3f00 	ldrex	r3, [r3]
 8009d60:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009d68:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	3308      	adds	r3, #8
 8009d70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d72:	61ba      	str	r2, [r7, #24]
 8009d74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d76:	6979      	ldr	r1, [r7, #20]
 8009d78:	69ba      	ldr	r2, [r7, #24]
 8009d7a:	e841 2300 	strex	r3, r2, [r1]
 8009d7e:	613b      	str	r3, [r7, #16]
   return(result);
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1e5      	bne.n	8009d52 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2220      	movs	r2, #32
 8009d8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009d8e:	bf00      	nop
 8009d90:	373c      	adds	r7, #60	@ 0x3c
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr

08009d9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d9a:	b480      	push	{r7}
 8009d9c:	b095      	sub	sp, #84	@ 0x54
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009daa:	e853 3f00 	ldrex	r3, [r3]
 8009dae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8009dc2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009dc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009dc8:	e841 2300 	strex	r3, r2, [r1]
 8009dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d1e6      	bne.n	8009da2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	3308      	adds	r3, #8
 8009dda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ddc:	6a3b      	ldr	r3, [r7, #32]
 8009dde:	e853 3f00 	ldrex	r3, [r3]
 8009de2:	61fb      	str	r3, [r7, #28]
   return(result);
 8009de4:	69fb      	ldr	r3, [r7, #28]
 8009de6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009dea:	f023 0301 	bic.w	r3, r3, #1
 8009dee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	3308      	adds	r3, #8
 8009df6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009df8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009dfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e00:	e841 2300 	strex	r3, r2, [r1]
 8009e04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d1e3      	bne.n	8009dd4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d118      	bne.n	8009e46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	e853 3f00 	ldrex	r3, [r3]
 8009e20:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	f023 0310 	bic.w	r3, r3, #16
 8009e28:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	461a      	mov	r2, r3
 8009e30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e32:	61bb      	str	r3, [r7, #24]
 8009e34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e36:	6979      	ldr	r1, [r7, #20]
 8009e38:	69ba      	ldr	r2, [r7, #24]
 8009e3a:	e841 2300 	strex	r3, r2, [r1]
 8009e3e:	613b      	str	r3, [r7, #16]
   return(result);
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d1e6      	bne.n	8009e14 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2220      	movs	r2, #32
 8009e4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2200      	movs	r2, #0
 8009e52:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009e5a:	bf00      	nop
 8009e5c:	3754      	adds	r7, #84	@ 0x54
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr

08009e66 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b090      	sub	sp, #64	@ 0x40
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e72:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f003 0320 	and.w	r3, r3, #32
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d137      	bne.n	8009ef2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009e82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e84:	2200      	movs	r2, #0
 8009e86:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	3308      	adds	r3, #8
 8009e90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e94:	e853 3f00 	ldrex	r3, [r3]
 8009e98:	623b      	str	r3, [r7, #32]
   return(result);
 8009e9a:	6a3b      	ldr	r3, [r7, #32]
 8009e9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ea0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	3308      	adds	r3, #8
 8009ea8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009eaa:	633a      	str	r2, [r7, #48]	@ 0x30
 8009eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009eb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009eb2:	e841 2300 	strex	r3, r2, [r1]
 8009eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1e5      	bne.n	8009e8a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	e853 3f00 	ldrex	r3, [r3]
 8009eca:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ed2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ed4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	461a      	mov	r2, r3
 8009eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009edc:	61fb      	str	r3, [r7, #28]
 8009ede:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee0:	69b9      	ldr	r1, [r7, #24]
 8009ee2:	69fa      	ldr	r2, [r7, #28]
 8009ee4:	e841 2300 	strex	r3, r2, [r1]
 8009ee8:	617b      	str	r3, [r7, #20]
   return(result);
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d1e6      	bne.n	8009ebe <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ef0:	e002      	b.n	8009ef8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009ef2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009ef4:	f7ff f99c 	bl	8009230 <HAL_UART_TxCpltCallback>
}
 8009ef8:	bf00      	nop
 8009efa:	3740      	adds	r7, #64	@ 0x40
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f0c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009f0e:	68f8      	ldr	r0, [r7, #12]
 8009f10:	f7ff f998 	bl	8009244 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f14:	bf00      	nop
 8009f16:	3710      	adds	r7, #16
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b09c      	sub	sp, #112	@ 0x70
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f28:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f003 0320 	and.w	r3, r3, #32
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d171      	bne.n	800a01c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009f38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f48:	e853 3f00 	ldrex	r3, [r3]
 8009f4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f60:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f66:	e841 2300 	strex	r3, r2, [r1]
 8009f6a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1e6      	bne.n	8009f40 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	3308      	adds	r3, #8
 8009f78:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f7c:	e853 3f00 	ldrex	r3, [r3]
 8009f80:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f84:	f023 0301 	bic.w	r3, r3, #1
 8009f88:	667b      	str	r3, [r7, #100]	@ 0x64
 8009f8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	3308      	adds	r3, #8
 8009f90:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009f92:	647a      	str	r2, [r7, #68]	@ 0x44
 8009f94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f9a:	e841 2300 	strex	r3, r2, [r1]
 8009f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d1e5      	bne.n	8009f72 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	3308      	adds	r3, #8
 8009fac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb0:	e853 3f00 	ldrex	r3, [r3]
 8009fb4:	623b      	str	r3, [r7, #32]
   return(result);
 8009fb6:	6a3b      	ldr	r3, [r7, #32]
 8009fb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fbc:	663b      	str	r3, [r7, #96]	@ 0x60
 8009fbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	3308      	adds	r3, #8
 8009fc4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009fc6:	633a      	str	r2, [r7, #48]	@ 0x30
 8009fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fce:	e841 2300 	strex	r3, r2, [r1]
 8009fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d1e5      	bne.n	8009fa6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009fda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fdc:	2220      	movs	r2, #32
 8009fde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fe2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fe4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d118      	bne.n	800a01c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	e853 3f00 	ldrex	r3, [r3]
 8009ff6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f023 0310 	bic.w	r3, r3, #16
 8009ffe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a000:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	461a      	mov	r2, r3
 800a006:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a008:	61fb      	str	r3, [r7, #28]
 800a00a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a00c:	69b9      	ldr	r1, [r7, #24]
 800a00e:	69fa      	ldr	r2, [r7, #28]
 800a010:	e841 2300 	strex	r3, r2, [r1]
 800a014:	617b      	str	r3, [r7, #20]
   return(result);
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d1e6      	bne.n	8009fea <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a01c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a01e:	2200      	movs	r2, #0
 800a020:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a022:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a024:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a026:	2b01      	cmp	r3, #1
 800a028:	d107      	bne.n	800a03a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a02a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a02c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a030:	4619      	mov	r1, r3
 800a032:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a034:	f000 ffae 	bl	800af94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a038:	e002      	b.n	800a040 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a03a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a03c:	f7ff f90c 	bl	8009258 <HAL_UART_RxCpltCallback>
}
 800a040:	bf00      	nop
 800a042:	3770      	adds	r7, #112	@ 0x70
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a054:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2201      	movs	r2, #1
 800a05a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a060:	2b01      	cmp	r3, #1
 800a062:	d109      	bne.n	800a078 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a06a:	085b      	lsrs	r3, r3, #1
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	4619      	mov	r1, r3
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f000 ff8f 	bl	800af94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a076:	e002      	b.n	800a07e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a078:	68f8      	ldr	r0, [r7, #12]
 800a07a:	f7ff f8f7 	bl	800926c <HAL_UART_RxHalfCpltCallback>
}
 800a07e:	bf00      	nop
 800a080:	3710      	adds	r7, #16
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	b086      	sub	sp, #24
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a092:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a09a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a0a2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0ae:	2b80      	cmp	r3, #128	@ 0x80
 800a0b0:	d109      	bne.n	800a0c6 <UART_DMAError+0x40>
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	2b21      	cmp	r3, #33	@ 0x21
 800a0b6:	d106      	bne.n	800a0c6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a0c0:	6978      	ldr	r0, [r7, #20]
 800a0c2:	f7ff fe29 	bl	8009d18 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0d0:	2b40      	cmp	r3, #64	@ 0x40
 800a0d2:	d109      	bne.n	800a0e8 <UART_DMAError+0x62>
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2b22      	cmp	r3, #34	@ 0x22
 800a0d8:	d106      	bne.n	800a0e8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a0e2:	6978      	ldr	r0, [r7, #20]
 800a0e4:	f7ff fe59 	bl	8009d9a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0ee:	f043 0210 	orr.w	r2, r3, #16
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0f8:	6978      	ldr	r0, [r7, #20]
 800a0fa:	f7ff f8c1 	bl	8009280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0fe:	bf00      	nop
 800a100:	3718      	adds	r7, #24
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a106:	b580      	push	{r7, lr}
 800a108:	b084      	sub	sp, #16
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a112:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2200      	movs	r2, #0
 800a118:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2200      	movs	r2, #0
 800a120:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f7ff f8ab 	bl	8009280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a12a:	bf00      	nop
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b088      	sub	sp, #32
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	e853 3f00 	ldrex	r3, [r3]
 800a146:	60bb      	str	r3, [r7, #8]
   return(result);
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a14e:	61fb      	str	r3, [r7, #28]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	461a      	mov	r2, r3
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	61bb      	str	r3, [r7, #24]
 800a15a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a15c:	6979      	ldr	r1, [r7, #20]
 800a15e:	69ba      	ldr	r2, [r7, #24]
 800a160:	e841 2300 	strex	r3, r2, [r1]
 800a164:	613b      	str	r3, [r7, #16]
   return(result);
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d1e6      	bne.n	800a13a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2220      	movs	r2, #32
 800a170:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f7ff f858 	bl	8009230 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a180:	bf00      	nop
 800a182:	3720      	adds	r7, #32
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a190:	bf00      	nop
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a1a4:	bf00      	nop
 800a1a6:	370c      	adds	r7, #12
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a1b8:	bf00      	nop
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b085      	sub	sp, #20
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d101      	bne.n	800a1da <HAL_UARTEx_DisableFifoMode+0x16>
 800a1d6:	2302      	movs	r3, #2
 800a1d8:	e027      	b.n	800a22a <HAL_UARTEx_DisableFifoMode+0x66>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2224      	movs	r2, #36	@ 0x24
 800a1e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f022 0201 	bic.w	r2, r2, #1
 800a200:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a208:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2220      	movs	r2, #32
 800a21c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3714      	adds	r7, #20
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr

0800a236 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b084      	sub	sp, #16
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
 800a23e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a246:	2b01      	cmp	r3, #1
 800a248:	d101      	bne.n	800a24e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a24a:	2302      	movs	r3, #2
 800a24c:	e02d      	b.n	800a2aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2201      	movs	r2, #1
 800a252:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2224      	movs	r2, #36	@ 0x24
 800a25a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f022 0201 	bic.w	r2, r2, #1
 800a274:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	683a      	ldr	r2, [r7, #0]
 800a286:	430a      	orrs	r2, r1
 800a288:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 f8a4 	bl	800a3d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	68fa      	ldr	r2, [r7, #12]
 800a296:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2220      	movs	r2, #32
 800a29c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a2a8:	2300      	movs	r3, #0
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b084      	sub	sp, #16
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
 800a2ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d101      	bne.n	800a2ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a2c6:	2302      	movs	r3, #2
 800a2c8:	e02d      	b.n	800a326 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2224      	movs	r2, #36	@ 0x24
 800a2d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f022 0201 	bic.w	r2, r2, #1
 800a2f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	683a      	ldr	r2, [r7, #0]
 800a302:	430a      	orrs	r2, r1
 800a304:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 f866 	bl	800a3d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	68fa      	ldr	r2, [r7, #12]
 800a312:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2220      	movs	r2, #32
 800a318:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2200      	movs	r2, #0
 800a320:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a324:	2300      	movs	r3, #0
}
 800a326:	4618      	mov	r0, r3
 800a328:	3710      	adds	r7, #16
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}

0800a32e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b08c      	sub	sp, #48	@ 0x30
 800a332:	af00      	add	r7, sp, #0
 800a334:	60f8      	str	r0, [r7, #12]
 800a336:	60b9      	str	r1, [r7, #8]
 800a338:	4613      	mov	r3, r2
 800a33a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a342:	2b20      	cmp	r3, #32
 800a344:	d142      	bne.n	800a3cc <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d002      	beq.n	800a352 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800a34c:	88fb      	ldrh	r3, [r7, #6]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d101      	bne.n	800a356 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800a352:	2301      	movs	r3, #1
 800a354:	e03b      	b.n	800a3ce <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2201      	movs	r2, #1
 800a35a:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2200      	movs	r2, #0
 800a360:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a362:	88fb      	ldrh	r3, [r7, #6]
 800a364:	461a      	mov	r2, r3
 800a366:	68b9      	ldr	r1, [r7, #8]
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f7ff fc2f 	bl	8009bcc <UART_Start_Receive_DMA>
 800a36e:	4603      	mov	r3, r0
 800a370:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a374:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d124      	bne.n	800a3c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a380:	2b01      	cmp	r3, #1
 800a382:	d11d      	bne.n	800a3c0 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2210      	movs	r2, #16
 800a38a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a392:	69bb      	ldr	r3, [r7, #24]
 800a394:	e853 3f00 	ldrex	r3, [r3]
 800a398:	617b      	str	r3, [r7, #20]
   return(result);
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	f043 0310 	orr.w	r3, r3, #16
 800a3a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3aa:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3ac:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ae:	6a39      	ldr	r1, [r7, #32]
 800a3b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3b2:	e841 2300 	strex	r3, r2, [r1]
 800a3b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3b8:	69fb      	ldr	r3, [r7, #28]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d1e6      	bne.n	800a38c <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800a3be:	e002      	b.n	800a3c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800a3c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a3ca:	e000      	b.n	800a3ce <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a3cc:	2302      	movs	r3, #2
  }
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3730      	adds	r7, #48	@ 0x30
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
	...

0800a3d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b085      	sub	sp, #20
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d108      	bne.n	800a3fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a3f8:	e031      	b.n	800a45e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a3fa:	2308      	movs	r3, #8
 800a3fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a3fe:	2308      	movs	r3, #8
 800a400:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	0e5b      	lsrs	r3, r3, #25
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	f003 0307 	and.w	r3, r3, #7
 800a410:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	0f5b      	lsrs	r3, r3, #29
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	f003 0307 	and.w	r3, r3, #7
 800a420:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a422:	7bbb      	ldrb	r3, [r7, #14]
 800a424:	7b3a      	ldrb	r2, [r7, #12]
 800a426:	4911      	ldr	r1, [pc, #68]	@ (800a46c <UARTEx_SetNbDataToProcess+0x94>)
 800a428:	5c8a      	ldrb	r2, [r1, r2]
 800a42a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a42e:	7b3a      	ldrb	r2, [r7, #12]
 800a430:	490f      	ldr	r1, [pc, #60]	@ (800a470 <UARTEx_SetNbDataToProcess+0x98>)
 800a432:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a434:	fb93 f3f2 	sdiv	r3, r3, r2
 800a438:	b29a      	uxth	r2, r3
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a440:	7bfb      	ldrb	r3, [r7, #15]
 800a442:	7b7a      	ldrb	r2, [r7, #13]
 800a444:	4909      	ldr	r1, [pc, #36]	@ (800a46c <UARTEx_SetNbDataToProcess+0x94>)
 800a446:	5c8a      	ldrb	r2, [r1, r2]
 800a448:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a44c:	7b7a      	ldrb	r2, [r7, #13]
 800a44e:	4908      	ldr	r1, [pc, #32]	@ (800a470 <UARTEx_SetNbDataToProcess+0x98>)
 800a450:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a452:	fb93 f3f2 	sdiv	r3, r3, r2
 800a456:	b29a      	uxth	r2, r3
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a45e:	bf00      	nop
 800a460:	3714      	adds	r7, #20
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr
 800a46a:	bf00      	nop
 800a46c:	0800fdf4 	.word	0x0800fdf4
 800a470:	0800fdfc 	.word	0x0800fdfc

0800a474 <goToZeroElecAngle>:
#include "pid.h"
#include "lowpass_filter.h"
#include "focLib.h"

void goToZeroElecAngle(BldcMotor *motor)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
    setTorque(motor, 0, OPEN_LOOP_TORQUE, 0);
 800a47c:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 800a4a0 <goToZeroElecAngle+0x2c>
 800a480:	eddf 0a08 	vldr	s1, [pc, #32]	@ 800a4a4 <goToZeroElecAngle+0x30>
 800a484:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 800a4a0 <goToZeroElecAngle+0x2c>
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 f95b 	bl	800a744 <setTorque>
    delay(700);
 800a48e:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800a492:	f000 ff3d 	bl	800b310 <delay>
}
 800a496:	bf00      	nop
 800a498:	3708      	adds	r7, #8
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	00000000 	.word	0x00000000
 800a4a4:	4013cd3a 	.word	0x4013cd3a

0800a4a8 <encoderInit>:

#include "encoder.h"
#include "math_utils.h"
#include "focLib.h"
void encoderInit(MagEncoder *encoder, float _Ts, float (*_getRawAngle)(void), Direction _direction)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b085      	sub	sp, #20
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	ed87 0a02 	vstr	s0, [r7, #8]
 800a4b4:	6079      	str	r1, [r7, #4]
 800a4b6:	4613      	mov	r3, r2
 800a4b8:	70fb      	strb	r3, [r7, #3]
    encoder->angle_prev = 0;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f04f 0200 	mov.w	r2, #0
 800a4c0:	601a      	str	r2, [r3, #0]
    encoder->vel_angle_prev = 0;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f04f 0200 	mov.w	r2, #0
 800a4c8:	605a      	str	r2, [r3, #4]
    encoder->full_rotations = 0;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	609a      	str	r2, [r3, #8]
    encoder->vel_full_rotations = 0;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	60da      	str	r2, [r3, #12]
    encoder->shaftAngle = 0;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f04f 0200 	mov.w	r2, #0
 800a4dc:	611a      	str	r2, [r3, #16]
    encoder->fullAngle = 0;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f04f 0200 	mov.w	r2, #0
 800a4e4:	615a      	str	r2, [r3, #20]
    encoder->velocity = 0;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f04f 0200 	mov.w	r2, #0
 800a4ec:	619a      	str	r2, [r3, #24]
    encoder->Ts = _Ts;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	68ba      	ldr	r2, [r7, #8]
 800a4f2:	61da      	str	r2, [r3, #28]
    encoder->getRawAngle = _getRawAngle;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	625a      	str	r2, [r3, #36]	@ 0x24
    encoder->direction = _direction;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	78fa      	ldrb	r2, [r7, #3]
 800a4fe:	f883 2020 	strb.w	r2, [r3, #32]
}
 800a502:	bf00      	nop
 800a504:	3714      	adds	r7, #20
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr

0800a50e <lpfInit>:
#include "lowpass_filter.h"

void lpfInit(LowPassFilter *filter, const float _Tf, const float _dt)
{
 800a50e:	b480      	push	{r7}
 800a510:	b085      	sub	sp, #20
 800a512:	af00      	add	r7, sp, #0
 800a514:	60f8      	str	r0, [r7, #12]
 800a516:	ed87 0a02 	vstr	s0, [r7, #8]
 800a51a:	edc7 0a01 	vstr	s1, [r7, #4]
    filter->Tf = _Tf;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	68ba      	ldr	r2, [r7, #8]
 800a522:	601a      	str	r2, [r3, #0]
    filter->dt = _dt;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	605a      	str	r2, [r3, #4]
    filter->y_prev = 0;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f04f 0200 	mov.w	r2, #0
 800a530:	609a      	str	r2, [r3, #8]
}
 800a532:	bf00      	nop
 800a534:	3714      	adds	r7, #20
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr
	...

0800a540 <_sin>:
#include "focLib.h"
// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b086      	sub	sp, #24
 800a544:	af00      	add	r7, sp, #0
 800a546:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0, 804, 1608, 2411, 3212, 4011, 4808, 5602, 6393, 7180, 7962, 8740, 9512, 10279, 11039, 11793, 12540, 13279, 14010, 14733, 15447, 16151, 16846, 17531, 18205, 18868, 19520, 20160, 20788, 21403, 22006, 22595, 23170, 23732, 24279, 24812, 25330, 25833, 26320, 26791, 27246, 27684, 28106, 28511, 28899, 29269, 29622, 29957, 30274, 30572, 30853, 31114, 31357, 31581, 31786, 31972, 32138, 32286, 32413, 32522, 32610, 32679, 32729, 32758, 32768};
  unsigned int i = (unsigned int)(a * (64 * 4 * 256.0 / _2PI));
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f7f6 f824 	bl	8000598 <__aeabi_f2d>
 800a550:	a339      	add	r3, pc, #228	@ (adr r3, 800a638 <_sin+0xf8>)
 800a552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a556:	f7f6 f877 	bl	8000648 <__aeabi_dmul>
 800a55a:	4602      	mov	r2, r0
 800a55c:	460b      	mov	r3, r1
 800a55e:	4610      	mov	r0, r2
 800a560:	4619      	mov	r1, r3
 800a562:	f7f6 fb49 	bl	8000bf8 <__aeabi_d2uiz>
 800a566:	4603      	mov	r3, r0
 800a568:	60fb      	str	r3, [r7, #12]
  int t1, t2, frac = i & 0xff;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	0a1b      	lsrs	r3, r3, #8
 800a574:	b2db      	uxtb	r3, r3
 800a576:	60fb      	str	r3, [r7, #12]
  if (i < 64)
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2b3f      	cmp	r3, #63	@ 0x3f
 800a57c:	d80b      	bhi.n	800a596 <_sin+0x56>
  {
    t1 = sine_array[i];
 800a57e:	4a2c      	ldr	r2, [pc, #176]	@ (800a630 <_sin+0xf0>)
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a586:	617b      	str	r3, [r7, #20]
    t2 = sine_array[i + 1];
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	3301      	adds	r3, #1
 800a58c:	4a28      	ldr	r2, [pc, #160]	@ (800a630 <_sin+0xf0>)
 800a58e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a592:	613b      	str	r3, [r7, #16]
 800a594:	e033      	b.n	800a5fe <_sin+0xbe>
  }
  else if (i < 128)
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2b7f      	cmp	r3, #127	@ 0x7f
 800a59a:	d80e      	bhi.n	800a5ba <_sin+0x7a>
  {
    t1 = sine_array[128 - i];
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800a5a2:	4a23      	ldr	r2, [pc, #140]	@ (800a630 <_sin+0xf0>)
 800a5a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5a8:	617b      	str	r3, [r7, #20]
    t2 = sine_array[127 - i];
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800a5b0:	4a1f      	ldr	r2, [pc, #124]	@ (800a630 <_sin+0xf0>)
 800a5b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5b6:	613b      	str	r3, [r7, #16]
 800a5b8:	e021      	b.n	800a5fe <_sin+0xbe>
  }
  else if (i < 192)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2bbf      	cmp	r3, #191	@ 0xbf
 800a5be:	d80e      	bhi.n	800a5de <_sin+0x9e>
  {
    t1 = -sine_array[-128 + i];
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	3b80      	subs	r3, #128	@ 0x80
 800a5c4:	4a1a      	ldr	r2, [pc, #104]	@ (800a630 <_sin+0xf0>)
 800a5c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5ca:	425b      	negs	r3, r3
 800a5cc:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[-127 + i];
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	3b7f      	subs	r3, #127	@ 0x7f
 800a5d2:	4a17      	ldr	r2, [pc, #92]	@ (800a630 <_sin+0xf0>)
 800a5d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5d8:	425b      	negs	r3, r3
 800a5da:	613b      	str	r3, [r7, #16]
 800a5dc:	e00f      	b.n	800a5fe <_sin+0xbe>
  }
  else
  {
    t1 = -sine_array[256 - i];
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800a5e4:	4a12      	ldr	r2, [pc, #72]	@ (800a630 <_sin+0xf0>)
 800a5e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5ea:	425b      	negs	r3, r3
 800a5ec:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[255 - i];
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800a5f4:	4a0e      	ldr	r2, [pc, #56]	@ (800a630 <_sin+0xf0>)
 800a5f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5fa:	425b      	negs	r3, r3
 800a5fc:	613b      	str	r3, [r7, #16]
  }
  return (1.0f / 32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 800a5fe:	693a      	ldr	r2, [r7, #16]
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	1ad3      	subs	r3, r2, r3
 800a604:	68ba      	ldr	r2, [r7, #8]
 800a606:	fb02 f303 	mul.w	r3, r2, r3
 800a60a:	121a      	asrs	r2, r3, #8
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	4413      	add	r3, r2
 800a610:	ee07 3a90 	vmov	s15, r3
 800a614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a618:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800a634 <_sin+0xf4>
 800a61c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a620:	eeb0 0a67 	vmov.f32	s0, s15
 800a624:	3718      	adds	r7, #24
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	f3af 8000 	nop.w
 800a630:	2000000c 	.word	0x2000000c
 800a634:	38000000 	.word	0x38000000
 800a638:	6446f9b4 	.word	0x6446f9b4
 800a63c:	40c45f30 	.word	0x40c45f30

0800a640 <_cos>:
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 800a64a:	edd7 7a01 	vldr	s15, [r7, #4]
 800a64e:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800a698 <_cos+0x58>
 800a652:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a656:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 800a65a:	edd7 7a03 	vldr	s15, [r7, #12]
 800a65e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800a69c <_cos+0x5c>
 800a662:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a66a:	dd06      	ble.n	800a67a <_cos+0x3a>
 800a66c:	edd7 7a03 	vldr	s15, [r7, #12]
 800a670:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800a69c <_cos+0x5c>
 800a674:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a678:	e001      	b.n	800a67e <_cos+0x3e>
 800a67a:	edd7 7a03 	vldr	s15, [r7, #12]
 800a67e:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 800a682:	ed97 0a03 	vldr	s0, [r7, #12]
 800a686:	f7ff ff5b 	bl	800a540 <_sin>
 800a68a:	eef0 7a40 	vmov.f32	s15, s0
}
 800a68e:	eeb0 0a67 	vmov.f32	s0, s15
 800a692:	3710      	adds	r7, #16
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}
 800a698:	3fc90fdb 	.word	0x3fc90fdb
 800a69c:	40c90fdb 	.word	0x40c90fdb

0800a6a0 <_sincos>:

__attribute__((weak)) void _sincos(float a, float *s, float *c)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	ed87 0a03 	vstr	s0, [r7, #12]
 800a6aa:	60b8      	str	r0, [r7, #8]
 800a6ac:	6079      	str	r1, [r7, #4]
  *s = _sin(a);
 800a6ae:	ed97 0a03 	vldr	s0, [r7, #12]
 800a6b2:	f7ff ff45 	bl	800a540 <_sin>
 800a6b6:	eef0 7a40 	vmov.f32	s15, s0
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	edc3 7a00 	vstr	s15, [r3]
  *c = _cos(a);
 800a6c0:	ed97 0a03 	vldr	s0, [r7, #12]
 800a6c4:	f7ff ffbc 	bl	800a640 <_cos>
 800a6c8:	eef0 7a40 	vmov.f32	s15, s0
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	edc3 7a00 	vstr	s15, [r3]
}
 800a6d2:	bf00      	nop
 800a6d4:	3710      	adds	r7, #16
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}

0800a6da <pidInit>:
#include "pid.h"
#include "math_utils.h"

void pidInit(PidController *pidController, float _P, float _I, float _D, float _ramp, float _limit, float _Ts)
{
 800a6da:	b480      	push	{r7}
 800a6dc:	b089      	sub	sp, #36	@ 0x24
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	61f8      	str	r0, [r7, #28]
 800a6e2:	ed87 0a06 	vstr	s0, [r7, #24]
 800a6e6:	edc7 0a05 	vstr	s1, [r7, #20]
 800a6ea:	ed87 1a04 	vstr	s2, [r7, #16]
 800a6ee:	edc7 1a03 	vstr	s3, [r7, #12]
 800a6f2:	ed87 2a02 	vstr	s4, [r7, #8]
 800a6f6:	edc7 2a01 	vstr	s5, [r7, #4]
    pidController->P = _P;
 800a6fa:	69fb      	ldr	r3, [r7, #28]
 800a6fc:	69ba      	ldr	r2, [r7, #24]
 800a6fe:	601a      	str	r2, [r3, #0]
    pidController->I = _I;
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	697a      	ldr	r2, [r7, #20]
 800a704:	605a      	str	r2, [r3, #4]
    pidController->D = _D;
 800a706:	69fb      	ldr	r3, [r7, #28]
 800a708:	693a      	ldr	r2, [r7, #16]
 800a70a:	609a      	str	r2, [r3, #8]
    pidController->output_ramp = _ramp;
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	68fa      	ldr	r2, [r7, #12]
 800a710:	60da      	str	r2, [r3, #12]
    pidController->limit = _limit;
 800a712:	69fb      	ldr	r3, [r7, #28]
 800a714:	68ba      	ldr	r2, [r7, #8]
 800a716:	611a      	str	r2, [r3, #16]
    pidController->Ts = _Ts;
 800a718:	69fb      	ldr	r3, [r7, #28]
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	621a      	str	r2, [r3, #32]
    pidController->error_prev = 0;
 800a71e:	69fb      	ldr	r3, [r7, #28]
 800a720:	f04f 0200 	mov.w	r2, #0
 800a724:	615a      	str	r2, [r3, #20]
    pidController->output_prev = 0;
 800a726:	69fb      	ldr	r3, [r7, #28]
 800a728:	f04f 0200 	mov.w	r2, #0
 800a72c:	619a      	str	r2, [r3, #24]
    pidController->integral_prev = 0;
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	f04f 0200 	mov.w	r2, #0
 800a734:	61da      	str	r2, [r3, #28]
}
 800a736:	bf00      	nop
 800a738:	3724      	adds	r7, #36	@ 0x24
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr
	...

0800a744 <setTorque>:
    motor->updatePwm(HALP_PWM_PERIOD * motor->Ta, HALP_PWM_PERIOD * motor->Tb, HALP_PWM_PERIOD * motor->Tc);
}
#elif 1

void setTorque(BldcMotor *motor, float Uq, float Ud, float angle_el)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b08e      	sub	sp, #56	@ 0x38
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	ed87 0a02 	vstr	s0, [r7, #8]
 800a750:	edc7 0a01 	vstr	s1, [r7, #4]
 800a754:	ed87 1a00 	vstr	s2, [r7]
    float Ualpha, Ubeta;
    float Ua, Ub, Uc;

    // Sinusoidal PWM modulation
    // Inverse Park + Clarke transformation
    _sincos(angle_el, &_sa, &_ca);
 800a758:	f107 0214 	add.w	r2, r7, #20
 800a75c:	f107 0310 	add.w	r3, r7, #16
 800a760:	4611      	mov	r1, r2
 800a762:	4618      	mov	r0, r3
 800a764:	ed97 0a00 	vldr	s0, [r7]
 800a768:	f7ff ff9a 	bl	800a6a0 <_sincos>

    // Inverse park transform
    Ualpha = _ca * Ud - _sa * Uq; // -sin(angle) * Uq;
 800a76c:	ed97 7a05 	vldr	s14, [r7, #20]
 800a770:	edd7 7a01 	vldr	s15, [r7, #4]
 800a774:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a778:	edd7 6a04 	vldr	s13, [r7, #16]
 800a77c:	edd7 7a02 	vldr	s15, [r7, #8]
 800a780:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a784:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a788:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    Ubeta = _sa * Ud + _ca * Uq;  //  cos(angle) * Uq;
 800a78c:	ed97 7a04 	vldr	s14, [r7, #16]
 800a790:	edd7 7a01 	vldr	s15, [r7, #4]
 800a794:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a798:	edd7 6a05 	vldr	s13, [r7, #20]
 800a79c:	edd7 7a02 	vldr	s15, [r7, #8]
 800a7a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a7a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7a8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Clarke transform
    Ua = Ualpha;
 800a7ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Ub = -0.5f * Ualpha + _SQRT3_2 * Ubeta;
 800a7b0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800a7b4:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800a7b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a7bc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800a7c0:	eddf 6a95 	vldr	s13, [pc, #596]	@ 800aa18 <setTorque+0x2d4>
 800a7c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a7c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7cc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    Uc = -0.5f * Ualpha - _SQRT3_2 * Ubeta;
 800a7d0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800a7d4:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800a7d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a7dc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800a7e0:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 800aa18 <setTorque+0x2d4>
 800a7e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a7e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7ec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    center = UqMAX / 2;
 800a7f0:	4b8a      	ldr	r3, [pc, #552]	@ (800aa1c <setTorque+0x2d8>)
 800a7f2:	623b      	str	r3, [r7, #32]

    // discussed here: https://community.simplefoc.com/t/embedded-world-2023-stm32-cordic-co-processor/3107/165?u=candas1
    // a bit more info here: https://microchipdeveloper.com/mct5001:which-zsm-is-best
    // Midpoint Clamp
    float Umin = min(Ua, min(Ub, Uc));
 800a7f4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800a7f8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800a7fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a804:	d502      	bpl.n	800a80c <setTorque+0xc8>
 800a806:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800a80a:	e001      	b.n	800a810 <setTorque+0xcc>
 800a80c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800a810:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800a814:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a81c:	dd01      	ble.n	800a822 <setTorque+0xde>
 800a81e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a820:	e00b      	b.n	800a83a <setTorque+0xf6>
 800a822:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800a826:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800a82a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a82e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a832:	d501      	bpl.n	800a838 <setTorque+0xf4>
 800a834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a836:	e000      	b.n	800a83a <setTorque+0xf6>
 800a838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a83a:	61fb      	str	r3, [r7, #28]
    float Umax = max(Ua, max(Ub, Uc));
 800a83c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800a840:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800a844:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a84c:	dd02      	ble.n	800a854 <setTorque+0x110>
 800a84e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800a852:	e001      	b.n	800a858 <setTorque+0x114>
 800a854:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800a858:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800a85c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a864:	d501      	bpl.n	800a86a <setTorque+0x126>
 800a866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a868:	e00b      	b.n	800a882 <setTorque+0x13e>
 800a86a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800a86e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800a872:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a87a:	dd01      	ble.n	800a880 <setTorque+0x13c>
 800a87c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a87e:	e000      	b.n	800a882 <setTorque+0x13e>
 800a880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a882:	61bb      	str	r3, [r7, #24]
    center -= (Umax + Umin) / 2;
 800a884:	ed97 7a06 	vldr	s14, [r7, #24]
 800a888:	edd7 7a07 	vldr	s15, [r7, #28]
 800a88c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a890:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800a894:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a898:	ed97 7a08 	vldr	s14, [r7, #32]
 800a89c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8a0:	edc7 7a08 	vstr	s15, [r7, #32]

    Ua += center;
 800a8a4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800a8a8:	edd7 7a08 	vldr	s15, [r7, #32]
 800a8ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8b0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    Ub += center;
 800a8b4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800a8b8:	edd7 7a08 	vldr	s15, [r7, #32]
 800a8bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8c0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    Uc += center;
 800a8c4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800a8c8:	edd7 7a08 	vldr	s15, [r7, #32]
 800a8cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8d0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    motor->Ta = _constrain(Ua / U_DC, 0.0f, 1.0f);
 800a8d4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800a8d8:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800a8dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a8e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8e8:	d502      	bpl.n	800a8f0 <setTorque+0x1ac>
 800a8ea:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800aa20 <setTorque+0x2dc>
 800a8ee:	e015      	b.n	800a91c <setTorque+0x1d8>
 800a8f0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800a8f4:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800a8f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a8fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a900:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a908:	dd02      	ble.n	800a910 <setTorque+0x1cc>
 800a90a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a90e:	e005      	b.n	800a91c <setTorque+0x1d8>
 800a910:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800a914:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800a918:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	edc3 7a4a 	vstr	s15, [r3, #296]	@ 0x128
    motor->Tb = _constrain(Ub / U_DC, 0.0f, 1.0f);
 800a922:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800a926:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800a92a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a92e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a936:	d502      	bpl.n	800a93e <setTorque+0x1fa>
 800a938:	eddf 7a39 	vldr	s15, [pc, #228]	@ 800aa20 <setTorque+0x2dc>
 800a93c:	e015      	b.n	800a96a <setTorque+0x226>
 800a93e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800a942:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800a946:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a94a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a94e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a956:	dd02      	ble.n	800a95e <setTorque+0x21a>
 800a958:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a95c:	e005      	b.n	800a96a <setTorque+0x226>
 800a95e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800a962:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800a966:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	edc3 7a4b 	vstr	s15, [r3, #300]	@ 0x12c
    motor->Tc = _constrain(Uc / U_DC, 0.0f, 1.0f);
 800a970:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800a974:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800a978:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a97c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a984:	d502      	bpl.n	800a98c <setTorque+0x248>
 800a986:	eddf 7a26 	vldr	s15, [pc, #152]	@ 800aa20 <setTorque+0x2dc>
 800a98a:	e015      	b.n	800a9b8 <setTorque+0x274>
 800a98c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800a990:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800a994:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a998:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a99c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a9a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9a4:	dd02      	ble.n	800a9ac <setTorque+0x268>
 800a9a6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a9aa:	e005      	b.n	800a9b8 <setTorque+0x274>
 800a9ac:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800a9b0:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800a9b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	edc3 7a4c 	vstr	s15, [r3, #304]	@ 0x130

    motor->updatePwm(HALP_PWM_PERIOD * motor->Tb, HALP_PWM_PERIOD * motor->Ta, HALP_PWM_PERIOD * motor->Tc);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800a9c4:	68fa      	ldr	r2, [r7, #12]
 800a9c6:	edd2 7a4b 	vldr	s15, [r2, #300]	@ 0x12c
 800a9ca:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800aa24 <setTorque+0x2e0>
 800a9ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a9d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9d6:	ee17 2a90 	vmov	r2, s15
 800a9da:	b290      	uxth	r0, r2
 800a9dc:	68fa      	ldr	r2, [r7, #12]
 800a9de:	edd2 7a4a 	vldr	s15, [r2, #296]	@ 0x128
 800a9e2:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800aa24 <setTorque+0x2e0>
 800a9e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a9ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9ee:	ee17 2a90 	vmov	r2, s15
 800a9f2:	b291      	uxth	r1, r2
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	edd2 7a4c 	vldr	s15, [r2, #304]	@ 0x130
 800a9fa:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800aa24 <setTorque+0x2e0>
 800a9fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aa02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa06:	ee17 2a90 	vmov	r2, s15
 800aa0a:	b292      	uxth	r2, r2
 800aa0c:	4798      	blx	r3
    // set the voltages in driver
    // driver->setPwm(Ua, Ub, Uc);
}
 800aa0e:	bf00      	nop
 800aa10:	3738      	adds	r7, #56	@ 0x38
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	3f5db3d7 	.word	0x3f5db3d7
 800aa1c:	4013cd3a 	.word	0x4013cd3a
 800aa20:	00000000 	.word	0x00000000
 800aa24:	45fa0000 	.word	0x45fa0000

0800aa28 <motorInit>:
static void working(void);

// should be called before interruption enabled

static void motorInit()
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b086      	sub	sp, #24
 800aa2c:	af00      	add	r7, sp, #0
#if 1
    motor1.pole_pairs = 7;
 800aa2e:	4bc7      	ldr	r3, [pc, #796]	@ (800ad4c <motorInit+0x324>)
 800aa30:	2207      	movs	r2, #7
 800aa32:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    motor1.updatePwm = updatePwm1;
 800aa36:	4bc5      	ldr	r3, [pc, #788]	@ (800ad4c <motorInit+0x324>)
 800aa38:	4ac5      	ldr	r2, [pc, #788]	@ (800ad50 <motorInit+0x328>)
 800aa3a:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    motor1.startPwm = startPwm1;
 800aa3e:	4bc3      	ldr	r3, [pc, #780]	@ (800ad4c <motorInit+0x324>)
 800aa40:	4ac4      	ldr	r2, [pc, #784]	@ (800ad54 <motorInit+0x32c>)
 800aa42:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    motor1.stopPwm = stopPwm1;
 800aa46:	4bc1      	ldr	r3, [pc, #772]	@ (800ad4c <motorInit+0x324>)
 800aa48:	4ac3      	ldr	r2, [pc, #780]	@ (800ad58 <motorInit+0x330>)
 800aa4a:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    motor1.zeroElectricAngleOffSet = 0;
 800aa4e:	4bbf      	ldr	r3, [pc, #764]	@ (800ad4c <motorInit+0x324>)
 800aa50:	f04f 0200 	mov.w	r2, #0
 800aa54:	635a      	str	r2, [r3, #52]	@ 0x34
    motor1.Ts = 100 * 1e-6f;
 800aa56:	4bbd      	ldr	r3, [pc, #756]	@ (800ad4c <motorInit+0x324>)
 800aa58:	4ac0      	ldr	r2, [pc, #768]	@ (800ad5c <motorInit+0x334>)
 800aa5a:	62da      	str	r2, [r3, #44]	@ 0x2c
    motor1.torqueType = CURRENT;
 800aa5c:	4bbb      	ldr	r3, [pc, #748]	@ (800ad4c <motorInit+0x324>)
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

    motor1.controlType = VELOCITY_OPEN_LOOP;
 800aa64:	4bb9      	ldr	r3, [pc, #740]	@ (800ad4c <motorInit+0x324>)
 800aa66:	2201      	movs	r2, #1
 800aa68:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

    motor1.state = MOTOR_CALIBRATE;
 800aa6c:	4bb7      	ldr	r3, [pc, #732]	@ (800ad4c <motorInit+0x324>)
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    encoderInit(&motor1.magEncoder, motor1.Ts, _1_MT6701_GetRawAngle, UNKNOWN);
 800aa74:	4bb5      	ldr	r3, [pc, #724]	@ (800ad4c <motorInit+0x324>)
 800aa76:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	49b8      	ldr	r1, [pc, #736]	@ (800ad60 <motorInit+0x338>)
 800aa7e:	eeb0 0a67 	vmov.f32	s0, s15
 800aa82:	48b2      	ldr	r0, [pc, #712]	@ (800ad4c <motorInit+0x324>)
 800aa84:	f7ff fd10 	bl	800a4a8 <encoderInit>

    if (motor1.controlType == TORQUE && motor1.torqueType == CURRENT)
 800aa88:	4bb0      	ldr	r3, [pc, #704]	@ (800ad4c <motorInit+0x324>)
 800aa8a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d12d      	bne.n	800aaee <motorInit+0xc6>
 800aa92:	4bae      	ldr	r3, [pc, #696]	@ (800ad4c <motorInit+0x324>)
 800aa94:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d128      	bne.n	800aaee <motorInit+0xc6>
    {
        float kp, ki;
        kp = 500.0f;
 800aa9c:	4bb1      	ldr	r3, [pc, #708]	@ (800ad64 <motorInit+0x33c>)
 800aa9e:	617b      	str	r3, [r7, #20]
        ki = 50.0f;
 800aaa0:	4bb1      	ldr	r3, [pc, #708]	@ (800ad68 <motorInit+0x340>)
 800aaa2:	613b      	str	r3, [r7, #16]
        pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800aaa4:	4ba9      	ldr	r3, [pc, #676]	@ (800ad4c <motorInit+0x324>)
 800aaa6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800aaaa:	eef0 2a67 	vmov.f32	s5, s15
 800aaae:	ed9f 2aaf 	vldr	s4, [pc, #700]	@ 800ad6c <motorInit+0x344>
 800aab2:	eddf 1aaf 	vldr	s3, [pc, #700]	@ 800ad70 <motorInit+0x348>
 800aab6:	ed9f 1aae 	vldr	s2, [pc, #696]	@ 800ad70 <motorInit+0x348>
 800aaba:	edd7 0a04 	vldr	s1, [r7, #16]
 800aabe:	ed97 0a05 	vldr	s0, [r7, #20]
 800aac2:	48ac      	ldr	r0, [pc, #688]	@ (800ad74 <motorInit+0x34c>)
 800aac4:	f7ff fe09 	bl	800a6da <pidInit>
        pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800aac8:	4ba0      	ldr	r3, [pc, #640]	@ (800ad4c <motorInit+0x324>)
 800aaca:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800aace:	eef0 2a67 	vmov.f32	s5, s15
 800aad2:	ed9f 2aa6 	vldr	s4, [pc, #664]	@ 800ad6c <motorInit+0x344>
 800aad6:	eddf 1aa6 	vldr	s3, [pc, #664]	@ 800ad70 <motorInit+0x348>
 800aada:	ed9f 1aa5 	vldr	s2, [pc, #660]	@ 800ad70 <motorInit+0x348>
 800aade:	edd7 0a04 	vldr	s1, [r7, #16]
 800aae2:	ed97 0a05 	vldr	s0, [r7, #20]
 800aae6:	48a4      	ldr	r0, [pc, #656]	@ (800ad78 <motorInit+0x350>)
 800aae8:	f7ff fdf7 	bl	800a6da <pidInit>
    {
 800aaec:	e0c0      	b.n	800ac70 <motorInit+0x248>
    }
    else if (motor1.controlType == VELOCITY)
 800aaee:	4b97      	ldr	r3, [pc, #604]	@ (800ad4c <motorInit+0x324>)
 800aaf0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800aaf4:	2b02      	cmp	r3, #2
 800aaf6:	d152      	bne.n	800ab9e <motorInit+0x176>
    {
        if (motor1.torqueType == CURRENT)
 800aaf8:	4b94      	ldr	r3, [pc, #592]	@ (800ad4c <motorInit+0x324>)
 800aafa:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d13a      	bne.n	800ab78 <motorInit+0x150>
        {
            pidInit(&motor1.velocityPID, 0.02, 0.01, 0, 0, CURRENT_MAX, motor1.Ts);
 800ab02:	4b92      	ldr	r3, [pc, #584]	@ (800ad4c <motorInit+0x324>)
 800ab04:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ab08:	eef0 2a67 	vmov.f32	s5, s15
 800ab0c:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800ab10:	eddf 1a97 	vldr	s3, [pc, #604]	@ 800ad70 <motorInit+0x348>
 800ab14:	ed9f 1a96 	vldr	s2, [pc, #600]	@ 800ad70 <motorInit+0x348>
 800ab18:	eddf 0a98 	vldr	s1, [pc, #608]	@ 800ad7c <motorInit+0x354>
 800ab1c:	ed9f 0a98 	vldr	s0, [pc, #608]	@ 800ad80 <motorInit+0x358>
 800ab20:	4898      	ldr	r0, [pc, #608]	@ (800ad84 <motorInit+0x35c>)
 800ab22:	f7ff fdda 	bl	800a6da <pidInit>

            float kp, ki;
            kp = 500.0f;
 800ab26:	4b8f      	ldr	r3, [pc, #572]	@ (800ad64 <motorInit+0x33c>)
 800ab28:	607b      	str	r3, [r7, #4]
            ki = 50.0f;
 800ab2a:	4b8f      	ldr	r3, [pc, #572]	@ (800ad68 <motorInit+0x340>)
 800ab2c:	603b      	str	r3, [r7, #0]
            pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800ab2e:	4b87      	ldr	r3, [pc, #540]	@ (800ad4c <motorInit+0x324>)
 800ab30:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ab34:	eef0 2a67 	vmov.f32	s5, s15
 800ab38:	ed9f 2a8c 	vldr	s4, [pc, #560]	@ 800ad6c <motorInit+0x344>
 800ab3c:	eddf 1a8c 	vldr	s3, [pc, #560]	@ 800ad70 <motorInit+0x348>
 800ab40:	ed9f 1a8b 	vldr	s2, [pc, #556]	@ 800ad70 <motorInit+0x348>
 800ab44:	edd7 0a00 	vldr	s1, [r7]
 800ab48:	ed97 0a01 	vldr	s0, [r7, #4]
 800ab4c:	4889      	ldr	r0, [pc, #548]	@ (800ad74 <motorInit+0x34c>)
 800ab4e:	f7ff fdc4 	bl	800a6da <pidInit>
            pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800ab52:	4b7e      	ldr	r3, [pc, #504]	@ (800ad4c <motorInit+0x324>)
 800ab54:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ab58:	eef0 2a67 	vmov.f32	s5, s15
 800ab5c:	ed9f 2a83 	vldr	s4, [pc, #524]	@ 800ad6c <motorInit+0x344>
 800ab60:	eddf 1a83 	vldr	s3, [pc, #524]	@ 800ad70 <motorInit+0x348>
 800ab64:	ed9f 1a82 	vldr	s2, [pc, #520]	@ 800ad70 <motorInit+0x348>
 800ab68:	edd7 0a00 	vldr	s1, [r7]
 800ab6c:	ed97 0a01 	vldr	s0, [r7, #4]
 800ab70:	4881      	ldr	r0, [pc, #516]	@ (800ad78 <motorInit+0x350>)
 800ab72:	f7ff fdb2 	bl	800a6da <pidInit>
 800ab76:	e07b      	b.n	800ac70 <motorInit+0x248>
        }
        else
        {
            pidInit(&motor1.velocityPID, 0.15, 0.05, 0, 0, UqMAX, motor1.Ts);
 800ab78:	4b74      	ldr	r3, [pc, #464]	@ (800ad4c <motorInit+0x324>)
 800ab7a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ab7e:	eef0 2a67 	vmov.f32	s5, s15
 800ab82:	ed9f 2a7a 	vldr	s4, [pc, #488]	@ 800ad6c <motorInit+0x344>
 800ab86:	eddf 1a7a 	vldr	s3, [pc, #488]	@ 800ad70 <motorInit+0x348>
 800ab8a:	ed9f 1a79 	vldr	s2, [pc, #484]	@ 800ad70 <motorInit+0x348>
 800ab8e:	eddf 0a7e 	vldr	s1, [pc, #504]	@ 800ad88 <motorInit+0x360>
 800ab92:	ed9f 0a7e 	vldr	s0, [pc, #504]	@ 800ad8c <motorInit+0x364>
 800ab96:	487b      	ldr	r0, [pc, #492]	@ (800ad84 <motorInit+0x35c>)
 800ab98:	f7ff fd9f 	bl	800a6da <pidInit>
 800ab9c:	e068      	b.n	800ac70 <motorInit+0x248>
        }
    }
    else if (motor1.controlType == ANGLE)
 800ab9e:	4b6b      	ldr	r3, [pc, #428]	@ (800ad4c <motorInit+0x324>)
 800aba0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800aba4:	2b03      	cmp	r3, #3
 800aba6:	d163      	bne.n	800ac70 <motorInit+0x248>
    {
        if (motor1.torqueType == CURRENT)
 800aba8:	4b68      	ldr	r3, [pc, #416]	@ (800ad4c <motorInit+0x324>)
 800abaa:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d14c      	bne.n	800ac4c <motorInit+0x224>
        {
            pidInit(&motor1.anglePID, 2, 0, 0, 0, MAX_VELOCITY, motor1.Ts);
 800abb2:	4b66      	ldr	r3, [pc, #408]	@ (800ad4c <motorInit+0x324>)
 800abb4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800abb8:	eef0 2a67 	vmov.f32	s5, s15
 800abbc:	ed9f 2a74 	vldr	s4, [pc, #464]	@ 800ad90 <motorInit+0x368>
 800abc0:	eddf 1a6b 	vldr	s3, [pc, #428]	@ 800ad70 <motorInit+0x348>
 800abc4:	ed9f 1a6a 	vldr	s2, [pc, #424]	@ 800ad70 <motorInit+0x348>
 800abc8:	eddf 0a69 	vldr	s1, [pc, #420]	@ 800ad70 <motorInit+0x348>
 800abcc:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800abd0:	4870      	ldr	r0, [pc, #448]	@ (800ad94 <motorInit+0x36c>)
 800abd2:	f7ff fd82 	bl	800a6da <pidInit>

            pidInit(&motor1.velocityPID, -0.02, -0.01, 0, 0, CURRENT_MAX, motor1.Ts);
 800abd6:	4b5d      	ldr	r3, [pc, #372]	@ (800ad4c <motorInit+0x324>)
 800abd8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800abdc:	eef0 2a67 	vmov.f32	s5, s15
 800abe0:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800abe4:	eddf 1a62 	vldr	s3, [pc, #392]	@ 800ad70 <motorInit+0x348>
 800abe8:	ed9f 1a61 	vldr	s2, [pc, #388]	@ 800ad70 <motorInit+0x348>
 800abec:	eddf 0a6a 	vldr	s1, [pc, #424]	@ 800ad98 <motorInit+0x370>
 800abf0:	ed9f 0a6a 	vldr	s0, [pc, #424]	@ 800ad9c <motorInit+0x374>
 800abf4:	4863      	ldr	r0, [pc, #396]	@ (800ad84 <motorInit+0x35c>)
 800abf6:	f7ff fd70 	bl	800a6da <pidInit>

            // pidInit(&motor1.anglePID, -0.001, -0.0001, 0, 0, CURRENT_MAX / 2, motor1.Ts);

            float kp, ki;
            kp = -200;
 800abfa:	4b69      	ldr	r3, [pc, #420]	@ (800ada0 <motorInit+0x378>)
 800abfc:	60fb      	str	r3, [r7, #12]
            ki = -20;
 800abfe:	4b69      	ldr	r3, [pc, #420]	@ (800ada4 <motorInit+0x37c>)
 800ac00:	60bb      	str	r3, [r7, #8]
            pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800ac02:	4b52      	ldr	r3, [pc, #328]	@ (800ad4c <motorInit+0x324>)
 800ac04:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ac08:	eef0 2a67 	vmov.f32	s5, s15
 800ac0c:	ed9f 2a57 	vldr	s4, [pc, #348]	@ 800ad6c <motorInit+0x344>
 800ac10:	eddf 1a57 	vldr	s3, [pc, #348]	@ 800ad70 <motorInit+0x348>
 800ac14:	ed9f 1a56 	vldr	s2, [pc, #344]	@ 800ad70 <motorInit+0x348>
 800ac18:	edd7 0a02 	vldr	s1, [r7, #8]
 800ac1c:	ed97 0a03 	vldr	s0, [r7, #12]
 800ac20:	4854      	ldr	r0, [pc, #336]	@ (800ad74 <motorInit+0x34c>)
 800ac22:	f7ff fd5a 	bl	800a6da <pidInit>
            pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800ac26:	4b49      	ldr	r3, [pc, #292]	@ (800ad4c <motorInit+0x324>)
 800ac28:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ac2c:	eef0 2a67 	vmov.f32	s5, s15
 800ac30:	ed9f 2a4e 	vldr	s4, [pc, #312]	@ 800ad6c <motorInit+0x344>
 800ac34:	eddf 1a4e 	vldr	s3, [pc, #312]	@ 800ad70 <motorInit+0x348>
 800ac38:	ed9f 1a4d 	vldr	s2, [pc, #308]	@ 800ad70 <motorInit+0x348>
 800ac3c:	edd7 0a02 	vldr	s1, [r7, #8]
 800ac40:	ed97 0a03 	vldr	s0, [r7, #12]
 800ac44:	484c      	ldr	r0, [pc, #304]	@ (800ad78 <motorInit+0x350>)
 800ac46:	f7ff fd48 	bl	800a6da <pidInit>
 800ac4a:	e011      	b.n	800ac70 <motorInit+0x248>
        }
        else
        {
            pidInit(&motor1.anglePID, 0.3, 0.001, 0, 0, UqMAX / 2, motor1.Ts);
 800ac4c:	4b3f      	ldr	r3, [pc, #252]	@ (800ad4c <motorInit+0x324>)
 800ac4e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ac52:	eef0 2a67 	vmov.f32	s5, s15
 800ac56:	ed9f 2a54 	vldr	s4, [pc, #336]	@ 800ada8 <motorInit+0x380>
 800ac5a:	eddf 1a45 	vldr	s3, [pc, #276]	@ 800ad70 <motorInit+0x348>
 800ac5e:	ed9f 1a44 	vldr	s2, [pc, #272]	@ 800ad70 <motorInit+0x348>
 800ac62:	eddf 0a52 	vldr	s1, [pc, #328]	@ 800adac <motorInit+0x384>
 800ac66:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 800adb0 <motorInit+0x388>
 800ac6a:	484a      	ldr	r0, [pc, #296]	@ (800ad94 <motorInit+0x36c>)
 800ac6c:	f7ff fd35 	bl	800a6da <pidInit>
        }
    }

    lpfInit(&motor1.IqFilter, 0.05, motor1.Ts);
 800ac70:	4b36      	ldr	r3, [pc, #216]	@ (800ad4c <motorInit+0x324>)
 800ac72:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ac76:	eef0 0a67 	vmov.f32	s1, s15
 800ac7a:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 800ad88 <motorInit+0x360>
 800ac7e:	484d      	ldr	r0, [pc, #308]	@ (800adb4 <motorInit+0x38c>)
 800ac80:	f7ff fc45 	bl	800a50e <lpfInit>
    lpfInit(&motor1.IdFilter, 0.05, motor1.Ts);
 800ac84:	4b31      	ldr	r3, [pc, #196]	@ (800ad4c <motorInit+0x324>)
 800ac86:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ac8a:	eef0 0a67 	vmov.f32	s1, s15
 800ac8e:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 800ad88 <motorInit+0x360>
 800ac92:	4849      	ldr	r0, [pc, #292]	@ (800adb8 <motorInit+0x390>)
 800ac94:	f7ff fc3b 	bl	800a50e <lpfInit>
    lpfInit(&motor1.velocityFilter, 0.01, motor1.Ts);
 800ac98:	4b2c      	ldr	r3, [pc, #176]	@ (800ad4c <motorInit+0x324>)
 800ac9a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ac9e:	eef0 0a67 	vmov.f32	s1, s15
 800aca2:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 800ad7c <motorInit+0x354>
 800aca6:	4845      	ldr	r0, [pc, #276]	@ (800adbc <motorInit+0x394>)
 800aca8:	f7ff fc31 	bl	800a50e <lpfInit>

#endif
    motor2.pole_pairs = 7;
 800acac:	4b44      	ldr	r3, [pc, #272]	@ (800adc0 <motorInit+0x398>)
 800acae:	2207      	movs	r2, #7
 800acb0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    motor2.updatePwm = updatePwm2;
 800acb4:	4b42      	ldr	r3, [pc, #264]	@ (800adc0 <motorInit+0x398>)
 800acb6:	4a43      	ldr	r2, [pc, #268]	@ (800adc4 <motorInit+0x39c>)
 800acb8:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    motor2.startPwm = startPwm2;
 800acbc:	4b40      	ldr	r3, [pc, #256]	@ (800adc0 <motorInit+0x398>)
 800acbe:	4a42      	ldr	r2, [pc, #264]	@ (800adc8 <motorInit+0x3a0>)
 800acc0:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    motor2.stopPwm = stopPwm2;
 800acc4:	4b3e      	ldr	r3, [pc, #248]	@ (800adc0 <motorInit+0x398>)
 800acc6:	4a41      	ldr	r2, [pc, #260]	@ (800adcc <motorInit+0x3a4>)
 800acc8:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    motor2.zeroElectricAngleOffSet = 0;
 800accc:	4b3c      	ldr	r3, [pc, #240]	@ (800adc0 <motorInit+0x398>)
 800acce:	f04f 0200 	mov.w	r2, #0
 800acd2:	635a      	str	r2, [r3, #52]	@ 0x34
    motor2.Ts = 100 * 1e-6f;
 800acd4:	4b3a      	ldr	r3, [pc, #232]	@ (800adc0 <motorInit+0x398>)
 800acd6:	4a21      	ldr	r2, [pc, #132]	@ (800ad5c <motorInit+0x334>)
 800acd8:	62da      	str	r2, [r3, #44]	@ 0x2c
    motor2.torqueType = CURRENT;
 800acda:	4b39      	ldr	r3, [pc, #228]	@ (800adc0 <motorInit+0x398>)
 800acdc:	2201      	movs	r2, #1
 800acde:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    motor2.controlType = VELOCITY_OPEN_LOOP;
 800ace2:	4b37      	ldr	r3, [pc, #220]	@ (800adc0 <motorInit+0x398>)
 800ace4:	2201      	movs	r2, #1
 800ace6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

    motor2.state = MOTOR_CALIBRATE;
 800acea:	4b35      	ldr	r3, [pc, #212]	@ (800adc0 <motorInit+0x398>)
 800acec:	2200      	movs	r2, #0
 800acee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    encoderInit(&motor2.magEncoder, motor1.Ts, _2_MT6701_GetRawAngle, UNKNOWN);
 800acf2:	4b16      	ldr	r3, [pc, #88]	@ (800ad4c <motorInit+0x324>)
 800acf4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800acf8:	2201      	movs	r2, #1
 800acfa:	4935      	ldr	r1, [pc, #212]	@ (800add0 <motorInit+0x3a8>)
 800acfc:	eeb0 0a67 	vmov.f32	s0, s15
 800ad00:	482f      	ldr	r0, [pc, #188]	@ (800adc0 <motorInit+0x398>)
 800ad02:	f7ff fbd1 	bl	800a4a8 <encoderInit>

    lpfInit(&motor2.IqFilter, 0.05, motor1.Ts);
 800ad06:	4b11      	ldr	r3, [pc, #68]	@ (800ad4c <motorInit+0x324>)
 800ad08:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ad0c:	eef0 0a67 	vmov.f32	s1, s15
 800ad10:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 800ad88 <motorInit+0x360>
 800ad14:	482f      	ldr	r0, [pc, #188]	@ (800add4 <motorInit+0x3ac>)
 800ad16:	f7ff fbfa 	bl	800a50e <lpfInit>
    lpfInit(&motor2.IdFilter, 0.05, motor1.Ts);
 800ad1a:	4b0c      	ldr	r3, [pc, #48]	@ (800ad4c <motorInit+0x324>)
 800ad1c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ad20:	eef0 0a67 	vmov.f32	s1, s15
 800ad24:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 800ad88 <motorInit+0x360>
 800ad28:	482b      	ldr	r0, [pc, #172]	@ (800add8 <motorInit+0x3b0>)
 800ad2a:	f7ff fbf0 	bl	800a50e <lpfInit>
    lpfInit(&motor2.velocityFilter, 0.01, motor1.Ts);
 800ad2e:	4b07      	ldr	r3, [pc, #28]	@ (800ad4c <motorInit+0x324>)
 800ad30:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ad34:	eef0 0a67 	vmov.f32	s1, s15
 800ad38:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 800ad7c <motorInit+0x354>
 800ad3c:	4827      	ldr	r0, [pc, #156]	@ (800addc <motorInit+0x3b4>)
 800ad3e:	f7ff fbe6 	bl	800a50e <lpfInit>
}
 800ad42:	bf00      	nop
 800ad44:	3718      	adds	r7, #24
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	20000624 	.word	0x20000624
 800ad50:	0800b261 	.word	0x0800b261
 800ad54:	0800b219 	.word	0x0800b219
 800ad58:	0800b23d 	.word	0x0800b23d
 800ad5c:	38d1b717 	.word	0x38d1b717
 800ad60:	0800b10d 	.word	0x0800b10d
 800ad64:	43fa0000 	.word	0x43fa0000
 800ad68:	42480000 	.word	0x42480000
 800ad6c:	4093cd3a 	.word	0x4093cd3a
 800ad70:	00000000 	.word	0x00000000
 800ad74:	20000688 	.word	0x20000688
 800ad78:	200006ac 	.word	0x200006ac
 800ad7c:	3c23d70a 	.word	0x3c23d70a
 800ad80:	3ca3d70a 	.word	0x3ca3d70a
 800ad84:	200006d0 	.word	0x200006d0
 800ad88:	3d4ccccd 	.word	0x3d4ccccd
 800ad8c:	3e19999a 	.word	0x3e19999a
 800ad90:	43960000 	.word	0x43960000
 800ad94:	200006f4 	.word	0x200006f4
 800ad98:	bc23d70a 	.word	0xbc23d70a
 800ad9c:	bca3d70a 	.word	0xbca3d70a
 800ada0:	c3480000 	.word	0xc3480000
 800ada4:	c1a00000 	.word	0xc1a00000
 800ada8:	4013cd3a 	.word	0x4013cd3a
 800adac:	3a83126f 	.word	0x3a83126f
 800adb0:	3e99999a 	.word	0x3e99999a
 800adb4:	20000718 	.word	0x20000718
 800adb8:	20000724 	.word	0x20000724
 800adbc:	20000730 	.word	0x20000730
 800adc0:	20000764 	.word	0x20000764
 800adc4:	0800b2dd 	.word	0x0800b2dd
 800adc8:	0800b295 	.word	0x0800b295
 800adcc:	0800b2b9 	.word	0x0800b2b9
 800add0:	0800b1dd 	.word	0x0800b1dd
 800add4:	20000858 	.word	0x20000858
 800add8:	20000864 	.word	0x20000864
 800addc:	20000870 	.word	0x20000870

0800ade0 <appInit>:
void appInit()
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	af00      	add	r7, sp, #0
    motorInit();
 800ade4:	f7ff fe20 	bl	800aa28 <motorInit>
    devState = WORK;
 800ade8:	4b02      	ldr	r3, [pc, #8]	@ (800adf4 <appInit+0x14>)
 800adea:	2201      	movs	r2, #1
 800adec:	701a      	strb	r2, [r3, #0]
    //     printLog("IMU_Init failed\n");
    // }
    // else
    //     init_quaternion();
    //    MPU6050_Init(); // MPU6050初始化
}
 800adee:	bf00      	nop
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	2000008e 	.word	0x2000008e

0800adf8 <appRunning>:
static bool zeroReset, _1s;
void appRunning()
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	af00      	add	r7, sp, #0
    _1s = getOneSecFlag();
 800adfc:	f000 fbea 	bl	800b5d4 <getOneSecFlag>
 800ae00:	4603      	mov	r3, r0
 800ae02:	461a      	mov	r2, r3
 800ae04:	4b11      	ldr	r3, [pc, #68]	@ (800ae4c <appRunning+0x54>)
 800ae06:	701a      	strb	r2, [r3, #0]
    //  getKeyState(&keyState);
    // commander_run(&motor1);
    if (++flashCnt >= 10)
 800ae08:	4b11      	ldr	r3, [pc, #68]	@ (800ae50 <appRunning+0x58>)
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	b2da      	uxtb	r2, r3
 800ae10:	4b0f      	ldr	r3, [pc, #60]	@ (800ae50 <appRunning+0x58>)
 800ae12:	701a      	strb	r2, [r3, #0]
 800ae14:	4b0e      	ldr	r3, [pc, #56]	@ (800ae50 <appRunning+0x58>)
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	2b09      	cmp	r3, #9
 800ae1a:	d902      	bls.n	800ae22 <appRunning+0x2a>
        flashCnt = 0;
 800ae1c:	4b0c      	ldr	r3, [pc, #48]	@ (800ae50 <appRunning+0x58>)
 800ae1e:	2200      	movs	r2, #0
 800ae20:	701a      	strb	r2, [r3, #0]

    ledOn = 0;
 800ae22:	4b0c      	ldr	r3, [pc, #48]	@ (800ae54 <appRunning+0x5c>)
 800ae24:	2200      	movs	r2, #0
 800ae26:	701a      	strb	r2, [r3, #0]
    //         motor1.target = goalTorqueV;
    //     else
    //         motor1.target = goalTorqueC;
    // }

    switch (devState)
 800ae28:	4b0b      	ldr	r3, [pc, #44]	@ (800ae58 <appRunning+0x60>)
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d002      	beq.n	800ae36 <appRunning+0x3e>
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d003      	beq.n	800ae3c <appRunning+0x44>
 800ae34:	e005      	b.n	800ae42 <appRunning+0x4a>
    {
    case STANDBY:
        standingBy();
 800ae36:	f000 f811 	bl	800ae5c <standingBy>
        break;
 800ae3a:	e002      	b.n	800ae42 <appRunning+0x4a>

    case WORK:
        working();
 800ae3c:	f000 f85a 	bl	800aef4 <working>
        break;
 800ae40:	bf00      	nop
    }

    LED_drive();
 800ae42:	f000 f901 	bl	800b048 <LED_drive>
}
 800ae46:	bf00      	nop
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	200008a5 	.word	0x200008a5
 800ae50:	20000620 	.word	0x20000620
 800ae54:	20000971 	.word	0x20000971
 800ae58:	2000008e 	.word	0x2000008e

0800ae5c <standingBy>:
static void standingBy()
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	af00      	add	r7, sp, #0
    static uchar cnt;

    ledOn = 1;
 800ae60:	4b1d      	ldr	r3, [pc, #116]	@ (800aed8 <standingBy+0x7c>)
 800ae62:	2201      	movs	r2, #1
 800ae64:	701a      	strb	r2, [r3, #0]
    // setTorque(&motor1, 0, OPEN_LOOP_TORQUE, 0);
    if (zeroReset == 0)
 800ae66:	4b1d      	ldr	r3, [pc, #116]	@ (800aedc <standingBy+0x80>)
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d109      	bne.n	800ae82 <standingBy+0x26>
    {
        goToZeroElecAngle(&motor1);
 800ae6e:	481c      	ldr	r0, [pc, #112]	@ (800aee0 <standingBy+0x84>)
 800ae70:	f7ff fb00 	bl	800a474 <goToZeroElecAngle>
        goToZeroElecAngle(&motor2);
 800ae74:	481b      	ldr	r0, [pc, #108]	@ (800aee4 <standingBy+0x88>)
 800ae76:	f7ff fafd 	bl	800a474 <goToZeroElecAngle>
        zeroReset = 1;
 800ae7a:	4b18      	ldr	r3, [pc, #96]	@ (800aedc <standingBy+0x80>)
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	701a      	strb	r2, [r3, #0]
 800ae80:	e007      	b.n	800ae92 <standingBy+0x36>
    }
    else
    {
        motor1.stopPwm();
 800ae82:	4b17      	ldr	r3, [pc, #92]	@ (800aee0 <standingBy+0x84>)
 800ae84:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800ae88:	4798      	blx	r3
        motor2.stopPwm();
 800ae8a:	4b16      	ldr	r3, [pc, #88]	@ (800aee4 <standingBy+0x88>)
 800ae8c:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800ae90:	4798      	blx	r3
    }

    if (++cnt >= 10)
 800ae92:	4b15      	ldr	r3, [pc, #84]	@ (800aee8 <standingBy+0x8c>)
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	3301      	adds	r3, #1
 800ae98:	b2da      	uxtb	r2, r3
 800ae9a:	4b13      	ldr	r3, [pc, #76]	@ (800aee8 <standingBy+0x8c>)
 800ae9c:	701a      	strb	r2, [r3, #0]
 800ae9e:	4b12      	ldr	r3, [pc, #72]	@ (800aee8 <standingBy+0x8c>)
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	2b09      	cmp	r3, #9
 800aea4:	d915      	bls.n	800aed2 <standingBy+0x76>
    {
        WORK_INIT;
 800aea6:	4b11      	ldr	r3, [pc, #68]	@ (800aeec <standingBy+0x90>)
 800aea8:	2201      	movs	r2, #1
 800aeaa:	701a      	strb	r2, [r3, #0]
 800aeac:	4b10      	ldr	r3, [pc, #64]	@ (800aef0 <standingBy+0x94>)
 800aeae:	2200      	movs	r2, #0
 800aeb0:	701a      	strb	r2, [r3, #0]
 800aeb2:	4b0b      	ldr	r3, [pc, #44]	@ (800aee0 <standingBy+0x84>)
 800aeb4:	2202      	movs	r2, #2
 800aeb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800aeba:	4b09      	ldr	r3, [pc, #36]	@ (800aee0 <standingBy+0x84>)
 800aebc:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800aec0:	4798      	blx	r3
 800aec2:	4b08      	ldr	r3, [pc, #32]	@ (800aee4 <standingBy+0x88>)
 800aec4:	2202      	movs	r2, #2
 800aec6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800aeca:	4b06      	ldr	r3, [pc, #24]	@ (800aee4 <standingBy+0x88>)
 800aecc:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800aed0:	4798      	blx	r3
    }
}
 800aed2:	bf00      	nop
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	20000971 	.word	0x20000971
 800aedc:	200008a4 	.word	0x200008a4
 800aee0:	20000624 	.word	0x20000624
 800aee4:	20000764 	.word	0x20000764
 800aee8:	200008a6 	.word	0x200008a6
 800aeec:	2000008e 	.word	0x2000008e
 800aef0:	20000620 	.word	0x20000620

0800aef4 <working>:

static void working(void)
{
 800aef4:	b480      	push	{r7}
 800aef6:	af00      	add	r7, sp, #0
    zeroReset = 0;
 800aef8:	4b07      	ldr	r3, [pc, #28]	@ (800af18 <working+0x24>)
 800aefa:	2200      	movs	r2, #0
 800aefc:	701a      	strb	r2, [r3, #0]
    if (flashCnt < 5)
 800aefe:	4b07      	ldr	r3, [pc, #28]	@ (800af1c <working+0x28>)
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	2b04      	cmp	r3, #4
 800af04:	d802      	bhi.n	800af0c <working+0x18>
        ledOn = 1;
 800af06:	4b06      	ldr	r3, [pc, #24]	@ (800af20 <working+0x2c>)
 800af08:	2201      	movs	r2, #1
 800af0a:	701a      	strb	r2, [r3, #0]
    //        //     {
    //        //         bldcMotor.focTarget = 23;
    //        //     }
    //        // }
    //    }
}
 800af0c:	bf00      	nop
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr
 800af16:	bf00      	nop
 800af18:	200008a4 	.word	0x200008a4
 800af1c:	20000620 	.word	0x20000620
 800af20:	20000971 	.word	0x20000971

0800af24 <txDataProcess>:

void txDataProcess()
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b082      	sub	sp, #8
 800af28:	af00      	add	r7, sp, #0
    // if (on)
    //     _1_MT6701_CS_Enable;
    // else
    //     _1_MT6701_CS_Disable;
    uint16_t rawData1, rawData2;
    rawData1 = _1_MT6701_GetRawData();
 800af2a:	f000 f8a5 	bl	800b078 <_1_MT6701_GetRawData>
 800af2e:	4603      	mov	r3, r0
 800af30:	80fb      	strh	r3, [r7, #6]
     rawData2 = _2_MT6701_GetRawData();
 800af32:	f000 f909 	bl	800b148 <_2_MT6701_GetRawData>
 800af36:	4603      	mov	r3, r0
 800af38:	80bb      	strh	r3, [r7, #4]

    sprintf(txBuffer, "rawData1: %d,rawData2: %d\n", rawData1, rawData2);
 800af3a:	88fa      	ldrh	r2, [r7, #6]
 800af3c:	88bb      	ldrh	r3, [r7, #4]
 800af3e:	4904      	ldr	r1, [pc, #16]	@ (800af50 <txDataProcess+0x2c>)
 800af40:	4804      	ldr	r0, [pc, #16]	@ (800af54 <txDataProcess+0x30>)
 800af42:	f002 f8b9 	bl	800d0b8 <siprintf>
    // sprintf(txBuffer, "target:%.2f fullAngle:%.2f velocity:%.2f Uq:%.2f Ud:%.2f Iq:%.2f Id:%.2f elec_angle:%.2f\n", motor1.target, motor1.magEncoder.fullAngle, motor1.magEncoder.velocity, motor1.Uq, motor1.Ud, motor1.Iq, motor1.Id, motor1.angle_el);
    // sprintf(txBuffer, "_1_fullAngle:%.2f _1_velocity:%.2f _2_fullAngle:%.2f _2_velocity:%.2f\n", motor1.magEncoder.fullAngle, motor1.magEncoder.velocity, motor2.magEncoder.fullAngle, motor2.magEncoder.velocity);
    // sprintf(txBuffer, "target:%.2f  velocity:%.2f  Uq:%.2f\n", motor1.target, motor1.magEncoder.velocity, motor1.Uq);
    // sprintf(txBuffer, "target:%.2f,velocity:%.2f,Uq%.2f,Ud%.2f,Iq:%.2f,Id:%.2f\n", motor1.target, motor1.magEncoder.velocity, motor1.Uq, motor1.Ud, motor1.Iq, motor1.Id);
    // sprintf(txBuffer, "offset_ia:%f offset_ib:%f, Ia:%f, Ib:%f\n", motor1.offset_ia, motor1.offset_ib, motor1.Ia, motor1.Ib);
}
 800af46:	bf00      	nop
 800af48:	3708      	adds	r7, #8
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	0800fd78 	.word	0x0800fd78
 800af54:	200008a8 	.word	0x200008a8

0800af58 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_SET);
 800af60:	2201      	movs	r2, #1
 800af62:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800af66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800af6a:	f7fa fe93 	bl	8005c94 <HAL_GPIO_WritePin>
    if (hadc == &hadc1)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	4a07      	ldr	r2, [pc, #28]	@ (800af90 <HAL_ADCEx_InjectedConvCpltCallback+0x38>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d101      	bne.n	800af7a <HAL_ADCEx_InjectedConvCpltCallback+0x22>
    {

        // foc(&motor1, hadc1.Instance->JDR1, hadc2.Instance->JDR1);
        // foc(&motor2, hadc1.Instance->JDR2, hadc2.Instance->JDR2);
        dealPer100us();
 800af76:	f000 fa67 	bl	800b448 <dealPer100us>

        memcpy(tempData, (uint8_t *)&load_data, sizeof(load_data));
        HAL_UART_Transmit_DMA(&huart3, (uint8_t *)tempData, sizeof(tempData));
#endif
    }
    HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 800af7a:	2200      	movs	r2, #0
 800af7c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800af80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800af84:	f7fa fe86 	bl	8005c94 <HAL_GPIO_WritePin>
}
 800af88:	bf00      	nop
 800af8a:	3708      	adds	r7, #8
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	20000274 	.word	0x20000274

0800af94 <HAL_UARTEx_RxEventCallback>:
bool toProcessData;
uint8_t aRxBuffer;
float comm1, comm2, comm3, comm4, comm5, comm6, comm7, comm8, comm9, comm10, comm11;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b082      	sub	sp, #8
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	460b      	mov	r3, r1
 800af9e:	807b      	strh	r3, [r7, #2]
  if (huart == &huart3)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	4a07      	ldr	r2, [pc, #28]	@ (800afc0 <HAL_UARTEx_RxEventCallback+0x2c>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d107      	bne.n	800afb8 <HAL_UARTEx_RxEventCallback+0x24>
  {
    // HAL_UART_Transmit_DMA(&huart3, rxBuffer, Size);
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 800afa8:	2264      	movs	r2, #100	@ 0x64
 800afaa:	4906      	ldr	r1, [pc, #24]	@ (800afc4 <HAL_UARTEx_RxEventCallback+0x30>)
 800afac:	4804      	ldr	r0, [pc, #16]	@ (800afc0 <HAL_UARTEx_RxEventCallback+0x2c>)
 800afae:	f7ff f9be 	bl	800a32e <HAL_UARTEx_ReceiveToIdle_DMA>
    toProcessData = 1;
 800afb2:	4b05      	ldr	r3, [pc, #20]	@ (800afc8 <HAL_UARTEx_RxEventCallback+0x34>)
 800afb4:	2201      	movs	r2, #1
 800afb6:	701a      	strb	r2, [r3, #0]
  }
}
 800afb8:	bf00      	nop
 800afba:	3708      	adds	r7, #8
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}
 800afc0:	200004c8 	.word	0x200004c8
 800afc4:	2000090c 	.word	0x2000090c
 800afc8:	20000970 	.word	0x20000970

0800afcc <printLog>:

// DMA模式
void printLog(const char *format, ...)
{
 800afcc:	b40f      	push	{r0, r1, r2, r3}
 800afce:	b580      	push	{r7, lr}
 800afd0:	b0c2      	sub	sp, #264	@ 0x108
 800afd2:	af00      	add	r7, sp, #0
  // length = vsnprintf((char *)txBuffer, sizeof(txBuffer), (char *)format, args);
  // va_end(args);
  // HAL_UART_Transmit_DMA(&huart3, (const char *)txBuffer, length);

  va_list args;           // 定义参数列表变量
  va_start(args, format); // 从format位置开始接收参数表，放在arg里面
 800afd4:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800afd8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

  char strBuf[256];               // 定义输出的字符串
  vsprintf(strBuf, format, args); // 使用vsprintf将格式化的数据写入缓冲区
 800afdc:	1d3b      	adds	r3, r7, #4
 800afde:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800afe2:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 800afe6:	4618      	mov	r0, r3
 800afe8:	f002 f8e0 	bl	800d1ac <vsiprintf>
  va_end(args);                   // 结束可变参数的使用

  // 等待上次的数据发送完成，避免新的数据覆盖正在传输的数据，导致混乱
  while (HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX)
 800afec:	bf00      	nop
 800afee:	480d      	ldr	r0, [pc, #52]	@ (800b024 <printLog+0x58>)
 800aff0:	f7fe f950 	bl	8009294 <HAL_UART_GetState>
 800aff4:	4603      	mov	r3, r0
 800aff6:	2b21      	cmp	r3, #33	@ 0x21
 800aff8:	d0f9      	beq.n	800afee <printLog+0x22>
  {
    // Wait for DMA transfer to complete
  }
  HAL_UART_Transmit(&huart3, (uint8_t *)strBuf, strlen(strBuf), 1000);
 800affa:	1d3b      	adds	r3, r7, #4
 800affc:	4618      	mov	r0, r3
 800affe:	f7f5 f95f 	bl	80002c0 <strlen>
 800b002:	4603      	mov	r3, r0
 800b004:	b29a      	uxth	r2, r3
 800b006:	1d39      	adds	r1, r7, #4
 800b008:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b00c:	4805      	ldr	r0, [pc, #20]	@ (800b024 <printLog+0x58>)
 800b00e:	f7fd fcdd 	bl	80089cc <HAL_UART_Transmit>
}
 800b012:	bf00      	nop
 800b014:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800b018:	46bd      	mov	sp, r7
 800b01a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b01e:	b004      	add	sp, #16
 800b020:	4770      	bx	lr
 800b022:	bf00      	nop
 800b024:	200004c8 	.word	0x200004c8

0800b028 <uartTx>:
//   va_end(args);
//   HAL_UART_Transmit_DMA(&huart3, (const char *)txBuffer, length);
// }

void uartTx()
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	af00      	add	r7, sp, #0

#if SHOW_WAVE == 0
  txDataProcess();
 800b02c:	f7ff ff7a 	bl	800af24 <txDataProcess>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
 800b030:	2264      	movs	r2, #100	@ 0x64
 800b032:	4903      	ldr	r1, [pc, #12]	@ (800b040 <uartTx+0x18>)
 800b034:	4803      	ldr	r0, [pc, #12]	@ (800b044 <uartTx+0x1c>)
 800b036:	f7fd fd57 	bl	8008ae8 <HAL_UART_Transmit_DMA>
 // memset(txBuffer, 0, sizeof(txBuffer));
#endif
}
 800b03a:	bf00      	nop
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	200008a8 	.word	0x200008a8
 800b044:	200004c8 	.word	0x200004c8

0800b048 <LED_drive>:
#include "led.h"

bool ledOn;

void LED_drive()
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	af00      	add	r7, sp, #0
    if (ledOn)
 800b04c:	4b08      	ldr	r3, [pc, #32]	@ (800b070 <LED_drive+0x28>)
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d005      	beq.n	800b060 <LED_drive+0x18>
        LED_ON;
 800b054:	2200      	movs	r2, #0
 800b056:	2101      	movs	r1, #1
 800b058:	4806      	ldr	r0, [pc, #24]	@ (800b074 <LED_drive+0x2c>)
 800b05a:	f7fa fe1b 	bl	8005c94 <HAL_GPIO_WritePin>
    else
        LED_OFF;
}
 800b05e:	e004      	b.n	800b06a <LED_drive+0x22>
        LED_OFF;
 800b060:	2201      	movs	r2, #1
 800b062:	2101      	movs	r1, #1
 800b064:	4803      	ldr	r0, [pc, #12]	@ (800b074 <LED_drive+0x2c>)
 800b066:	f7fa fe15 	bl	8005c94 <HAL_GPIO_WritePin>
}
 800b06a:	bf00      	nop
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	20000971 	.word	0x20000971
 800b074:	48000400 	.word	0x48000400

0800b078 <_1_MT6701_GetRawData>:
#include "focLib.h"
#include "time_utils.h"
// static unsigned int rotationCount, rotationCount_Last;

uint16_t _1_MT6701_GetRawData(void)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af02      	add	r7, sp, #8
    uint16_t rawData;
    uint16_t txData = 0xFFFF;
 800b07e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b082:	803b      	strh	r3, [r7, #0]
    uint16_t timeOut = 200;
 800b084:	23c8      	movs	r3, #200	@ 0xc8
 800b086:	80fb      	strh	r3, [r7, #6]

    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800b088:	e009      	b.n	800b09e <_1_MT6701_GetRawData+0x26>
    {
        if (timeOut-- == 0)
 800b08a:	88fb      	ldrh	r3, [r7, #6]
 800b08c:	1e5a      	subs	r2, r3, #1
 800b08e:	80fa      	strh	r2, [r7, #6]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d104      	bne.n	800b09e <_1_MT6701_GetRawData+0x26>
        {
            printLog("SPI state error!\r\n");
 800b094:	4819      	ldr	r0, [pc, #100]	@ (800b0fc <_1_MT6701_GetRawData+0x84>)
 800b096:	f7ff ff99 	bl	800afcc <printLog>
            return 0; // 在超时时直接返回，避免继续执行后续代码
 800b09a:	2300      	movs	r3, #0
 800b09c:	e02a      	b.n	800b0f4 <_1_MT6701_GetRawData+0x7c>
    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800b09e:	4818      	ldr	r0, [pc, #96]	@ (800b100 <_1_MT6701_GetRawData+0x88>)
 800b0a0:	f7fc f8af 	bl	8007202 <HAL_SPI_GetState>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d1ef      	bne.n	800b08a <_1_MT6701_GetRawData+0x12>
        }
    }

    _1_MT6701_CS_Enable;
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	2108      	movs	r1, #8
 800b0ae:	4815      	ldr	r0, [pc, #84]	@ (800b104 <_1_MT6701_GetRawData+0x8c>)
 800b0b0:	f7fa fdf0 	bl	8005c94 <HAL_GPIO_WritePin>

    HAL_StatusTypeDef spiStatus = HAL_SPI_TransmitReceive(&hspi3, (uint8_t *)&txData, (uint8_t *)&rawData, 1, HAL_MAX_DELAY);
 800b0b4:	1cba      	adds	r2, r7, #2
 800b0b6:	4639      	mov	r1, r7
 800b0b8:	f04f 33ff 	mov.w	r3, #4294967295
 800b0bc:	9300      	str	r3, [sp, #0]
 800b0be:	2301      	movs	r3, #1
 800b0c0:	480f      	ldr	r0, [pc, #60]	@ (800b100 <_1_MT6701_GetRawData+0x88>)
 800b0c2:	f7fb fe7c 	bl	8006dbe <HAL_SPI_TransmitReceive>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	717b      	strb	r3, [r7, #5]
    if (spiStatus != HAL_OK)
 800b0ca:	797b      	ldrb	r3, [r7, #5]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d009      	beq.n	800b0e4 <_1_MT6701_GetRawData+0x6c>
    {
        _1_MT6701_CS_Disable;
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	2108      	movs	r1, #8
 800b0d4:	480b      	ldr	r0, [pc, #44]	@ (800b104 <_1_MT6701_GetRawData+0x8c>)
 800b0d6:	f7fa fddd 	bl	8005c94 <HAL_GPIO_WritePin>
        printLog("MT6701 read data error!\r\n");
 800b0da:	480b      	ldr	r0, [pc, #44]	@ (800b108 <_1_MT6701_GetRawData+0x90>)
 800b0dc:	f7ff ff76 	bl	800afcc <printLog>
        return 0; // 在SPI传输错误时直接返回，避免继续执行后续代码
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	e007      	b.n	800b0f4 <_1_MT6701_GetRawData+0x7c>
    }

    _1_MT6701_CS_Disable;
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	2108      	movs	r1, #8
 800b0e8:	4806      	ldr	r0, [pc, #24]	@ (800b104 <_1_MT6701_GetRawData+0x8c>)
 800b0ea:	f7fa fdd3 	bl	8005c94 <HAL_GPIO_WritePin>

    return rawData >> 2; // 取高14位的角度数据
 800b0ee:	887b      	ldrh	r3, [r7, #2]
 800b0f0:	089b      	lsrs	r3, r3, #2
 800b0f2:	b29b      	uxth	r3, r3
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3708      	adds	r7, #8
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	0800fd94 	.word	0x0800fd94
 800b100:	200003c8 	.word	0x200003c8
 800b104:	48000400 	.word	0x48000400
 800b108:	0800fda8 	.word	0x0800fda8

0800b10c <_1_MT6701_GetRawAngle>:

// 将传感器原始数据转化为弧度
float _1_MT6701_GetRawAngle(void)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b082      	sub	sp, #8
 800b110:	af00      	add	r7, sp, #0
    uint16_t rawData = _1_MT6701_GetRawData();
 800b112:	f7ff ffb1 	bl	800b078 <_1_MT6701_GetRawData>
 800b116:	4603      	mov	r3, r0
 800b118:	80fb      	strh	r3, [r7, #6]
    return (float)rawData / 16384.0f * _2PI;
 800b11a:	88fb      	ldrh	r3, [r7, #6]
 800b11c:	ee07 3a90 	vmov	s15, r3
 800b120:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b124:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800b140 <_1_MT6701_GetRawAngle+0x34>
 800b128:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b12c:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800b144 <_1_MT6701_GetRawAngle+0x38>
 800b130:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800b134:	eeb0 0a67 	vmov.f32	s0, s15
 800b138:	3708      	adds	r7, #8
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	46800000 	.word	0x46800000
 800b144:	40c90fdb 	.word	0x40c90fdb

0800b148 <_2_MT6701_GetRawData>:

uint16_t _2_MT6701_GetRawData(void)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af02      	add	r7, sp, #8
    uint16_t rawData;
    uint16_t txData = 0xFFFF;
 800b14e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b152:	803b      	strh	r3, [r7, #0]
    uint16_t timeOut = 200;
 800b154:	23c8      	movs	r3, #200	@ 0xc8
 800b156:	80fb      	strh	r3, [r7, #6]

    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800b158:	e009      	b.n	800b16e <_2_MT6701_GetRawData+0x26>
    {
        if (timeOut-- == 0)
 800b15a:	88fb      	ldrh	r3, [r7, #6]
 800b15c:	1e5a      	subs	r2, r3, #1
 800b15e:	80fa      	strh	r2, [r7, #6]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d104      	bne.n	800b16e <_2_MT6701_GetRawData+0x26>
        {
            printLog("SPI state error!\r\n");
 800b164:	4819      	ldr	r0, [pc, #100]	@ (800b1cc <_2_MT6701_GetRawData+0x84>)
 800b166:	f7ff ff31 	bl	800afcc <printLog>
            return 0; // 在超时时直接返回，避免继续执行后续代码
 800b16a:	2300      	movs	r3, #0
 800b16c:	e02a      	b.n	800b1c4 <_2_MT6701_GetRawData+0x7c>
    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800b16e:	4818      	ldr	r0, [pc, #96]	@ (800b1d0 <_2_MT6701_GetRawData+0x88>)
 800b170:	f7fc f847 	bl	8007202 <HAL_SPI_GetState>
 800b174:	4603      	mov	r3, r0
 800b176:	2b01      	cmp	r3, #1
 800b178:	d1ef      	bne.n	800b15a <_2_MT6701_GetRawData+0x12>
        }
    }

    _2_MT6701_CS_Enable;
 800b17a:	2200      	movs	r2, #0
 800b17c:	2110      	movs	r1, #16
 800b17e:	4815      	ldr	r0, [pc, #84]	@ (800b1d4 <_2_MT6701_GetRawData+0x8c>)
 800b180:	f7fa fd88 	bl	8005c94 <HAL_GPIO_WritePin>

    HAL_StatusTypeDef spiStatus = HAL_SPI_TransmitReceive(&hspi3, (uint8_t *)&txData, (uint8_t *)&rawData, 1, HAL_MAX_DELAY);
 800b184:	1cba      	adds	r2, r7, #2
 800b186:	4639      	mov	r1, r7
 800b188:	f04f 33ff 	mov.w	r3, #4294967295
 800b18c:	9300      	str	r3, [sp, #0]
 800b18e:	2301      	movs	r3, #1
 800b190:	480f      	ldr	r0, [pc, #60]	@ (800b1d0 <_2_MT6701_GetRawData+0x88>)
 800b192:	f7fb fe14 	bl	8006dbe <HAL_SPI_TransmitReceive>
 800b196:	4603      	mov	r3, r0
 800b198:	717b      	strb	r3, [r7, #5]
    if (spiStatus != HAL_OK)
 800b19a:	797b      	ldrb	r3, [r7, #5]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d009      	beq.n	800b1b4 <_2_MT6701_GetRawData+0x6c>
    {
        _2_MT6701_CS_Disable;
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	2110      	movs	r1, #16
 800b1a4:	480b      	ldr	r0, [pc, #44]	@ (800b1d4 <_2_MT6701_GetRawData+0x8c>)
 800b1a6:	f7fa fd75 	bl	8005c94 <HAL_GPIO_WritePin>
        printLog("MT6701 read data error!\r\n");
 800b1aa:	480b      	ldr	r0, [pc, #44]	@ (800b1d8 <_2_MT6701_GetRawData+0x90>)
 800b1ac:	f7ff ff0e 	bl	800afcc <printLog>
        return 0; // 在SPI传输错误时直接返回，避免继续执行后续代码
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	e007      	b.n	800b1c4 <_2_MT6701_GetRawData+0x7c>
    }

    _2_MT6701_CS_Disable;
 800b1b4:	2201      	movs	r2, #1
 800b1b6:	2110      	movs	r1, #16
 800b1b8:	4806      	ldr	r0, [pc, #24]	@ (800b1d4 <_2_MT6701_GetRawData+0x8c>)
 800b1ba:	f7fa fd6b 	bl	8005c94 <HAL_GPIO_WritePin>

    return rawData >> 2; // 取高14位的角度数据
 800b1be:	887b      	ldrh	r3, [r7, #2]
 800b1c0:	089b      	lsrs	r3, r3, #2
 800b1c2:	b29b      	uxth	r3, r3
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	0800fd94 	.word	0x0800fd94
 800b1d0:	200003c8 	.word	0x200003c8
 800b1d4:	48000800 	.word	0x48000800
 800b1d8:	0800fda8 	.word	0x0800fda8

0800b1dc <_2_MT6701_GetRawAngle>:

// 将传感器原始数据转化为弧度
float _2_MT6701_GetRawAngle(void)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b082      	sub	sp, #8
 800b1e0:	af00      	add	r7, sp, #0
    uint16_t rawData = _2_MT6701_GetRawData();
 800b1e2:	f7ff ffb1 	bl	800b148 <_2_MT6701_GetRawData>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	80fb      	strh	r3, [r7, #6]
    return (float)rawData / 16384.0f * _2PI;
 800b1ea:	88fb      	ldrh	r3, [r7, #6]
 800b1ec:	ee07 3a90 	vmov	s15, r3
 800b1f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b1f4:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800b210 <_2_MT6701_GetRawAngle+0x34>
 800b1f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b1fc:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800b214 <_2_MT6701_GetRawAngle+0x38>
 800b200:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800b204:	eeb0 0a67 	vmov.f32	s0, s15
 800b208:	3708      	adds	r7, #8
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	46800000 	.word	0x46800000
 800b214:	40c90fdb 	.word	0x40c90fdb

0800b218 <startPwm1>:
#include "pwm.h"

 void startPwm1()
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800b21c:	2100      	movs	r1, #0
 800b21e:	4806      	ldr	r0, [pc, #24]	@ (800b238 <startPwm1+0x20>)
 800b220:	f7fc fa7e 	bl	8007720 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800b224:	2104      	movs	r1, #4
 800b226:	4804      	ldr	r0, [pc, #16]	@ (800b238 <startPwm1+0x20>)
 800b228:	f7fc fa7a 	bl	8007720 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800b22c:	2108      	movs	r1, #8
 800b22e:	4802      	ldr	r0, [pc, #8]	@ (800b238 <startPwm1+0x20>)
 800b230:	f7fc fa76 	bl	8007720 <HAL_TIM_PWM_Start>

}
 800b234:	bf00      	nop
 800b236:	bd80      	pop	{r7, pc}
 800b238:	2000047c 	.word	0x2000047c

0800b23c <stopPwm1>:
 void stopPwm1()
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 800b240:	2100      	movs	r1, #0
 800b242:	4806      	ldr	r0, [pc, #24]	@ (800b25c <stopPwm1+0x20>)
 800b244:	f7fc fb6c 	bl	8007920 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 800b248:	2104      	movs	r1, #4
 800b24a:	4804      	ldr	r0, [pc, #16]	@ (800b25c <stopPwm1+0x20>)
 800b24c:	f7fc fb68 	bl	8007920 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 800b250:	2108      	movs	r1, #8
 800b252:	4802      	ldr	r0, [pc, #8]	@ (800b25c <stopPwm1+0x20>)
 800b254:	f7fc fb64 	bl	8007920 <HAL_TIM_PWM_Stop>

}
 800b258:	bf00      	nop
 800b25a:	bd80      	pop	{r7, pc}
 800b25c:	2000047c 	.word	0x2000047c

0800b260 <updatePwm1>:
 void updatePwm1(unsigned short int a, unsigned short int b, unsigned short int c)
{
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	4603      	mov	r3, r0
 800b268:	80fb      	strh	r3, [r7, #6]
 800b26a:	460b      	mov	r3, r1
 800b26c:	80bb      	strh	r3, [r7, #4]
 800b26e:	4613      	mov	r3, r2
 800b270:	807b      	strh	r3, [r7, #2]
    TIM8->CCR1 = a;
 800b272:	4a07      	ldr	r2, [pc, #28]	@ (800b290 <updatePwm1+0x30>)
 800b274:	88fb      	ldrh	r3, [r7, #6]
 800b276:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM8->CCR2 = b;
 800b278:	4a05      	ldr	r2, [pc, #20]	@ (800b290 <updatePwm1+0x30>)
 800b27a:	88bb      	ldrh	r3, [r7, #4]
 800b27c:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM8->CCR3 = c;
 800b27e:	4a04      	ldr	r2, [pc, #16]	@ (800b290 <updatePwm1+0x30>)
 800b280:	887b      	ldrh	r3, [r7, #2]
 800b282:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800b284:	bf00      	nop
 800b286:	370c      	adds	r7, #12
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr
 800b290:	40013400 	.word	0x40013400

0800b294 <startPwm2>:

 void startPwm2()
{
 800b294:	b580      	push	{r7, lr}
 800b296:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800b298:	2100      	movs	r1, #0
 800b29a:	4806      	ldr	r0, [pc, #24]	@ (800b2b4 <startPwm2+0x20>)
 800b29c:	f7fc fa40 	bl	8007720 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800b2a0:	2104      	movs	r1, #4
 800b2a2:	4804      	ldr	r0, [pc, #16]	@ (800b2b4 <startPwm2+0x20>)
 800b2a4:	f7fc fa3c 	bl	8007720 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800b2a8:	2108      	movs	r1, #8
 800b2aa:	4802      	ldr	r0, [pc, #8]	@ (800b2b4 <startPwm2+0x20>)
 800b2ac:	f7fc fa38 	bl	8007720 <HAL_TIM_PWM_Start>
 
}
 800b2b0:	bf00      	nop
 800b2b2:	bd80      	pop	{r7, pc}
 800b2b4:	20000430 	.word	0x20000430

0800b2b8 <stopPwm2>:
 void stopPwm2()
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800b2bc:	2100      	movs	r1, #0
 800b2be:	4806      	ldr	r0, [pc, #24]	@ (800b2d8 <stopPwm2+0x20>)
 800b2c0:	f7fc fb2e 	bl	8007920 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800b2c4:	2104      	movs	r1, #4
 800b2c6:	4804      	ldr	r0, [pc, #16]	@ (800b2d8 <stopPwm2+0x20>)
 800b2c8:	f7fc fb2a 	bl	8007920 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800b2cc:	2108      	movs	r1, #8
 800b2ce:	4802      	ldr	r0, [pc, #8]	@ (800b2d8 <stopPwm2+0x20>)
 800b2d0:	f7fc fb26 	bl	8007920 <HAL_TIM_PWM_Stop>
 
}
 800b2d4:	bf00      	nop
 800b2d6:	bd80      	pop	{r7, pc}
 800b2d8:	20000430 	.word	0x20000430

0800b2dc <updatePwm2>:

 void updatePwm2(unsigned short int a, unsigned short int b, unsigned short int c)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b083      	sub	sp, #12
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	80fb      	strh	r3, [r7, #6]
 800b2e6:	460b      	mov	r3, r1
 800b2e8:	80bb      	strh	r3, [r7, #4]
 800b2ea:	4613      	mov	r3, r2
 800b2ec:	807b      	strh	r3, [r7, #2]
    TIM1->CCR1 = a;
 800b2ee:	4a07      	ldr	r2, [pc, #28]	@ (800b30c <updatePwm2+0x30>)
 800b2f0:	88fb      	ldrh	r3, [r7, #6]
 800b2f2:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR2 = b;
 800b2f4:	4a05      	ldr	r2, [pc, #20]	@ (800b30c <updatePwm2+0x30>)
 800b2f6:	88bb      	ldrh	r3, [r7, #4]
 800b2f8:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM1->CCR3 = c;
 800b2fa:	4a04      	ldr	r2, [pc, #16]	@ (800b30c <updatePwm2+0x30>)
 800b2fc:	887b      	ldrh	r3, [r7, #2]
 800b2fe:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800b300:	bf00      	nop
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr
 800b30c:	40012c00 	.word	0x40012c00

0800b310 <delay>:
#include "time_utils.h"

__IO uint32_t m, tms, u, t0;

void delay(uint32_t _ms)
{
 800b310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b314:	b082      	sub	sp, #8
 800b316:	af00      	add	r7, sp, #0
 800b318:	6078      	str	r0, [r7, #4]
    t0 = micros();
 800b31a:	f000 f83b 	bl	800b394 <micros>
 800b31e:	4602      	mov	r2, r0
 800b320:	460b      	mov	r3, r1
 800b322:	4b11      	ldr	r3, [pc, #68]	@ (800b368 <delay+0x58>)
 800b324:	601a      	str	r2, [r3, #0]
    while (micros() - t0 < _ms * 1000)
 800b326:	e000      	b.n	800b32a <delay+0x1a>
        __NOP();
 800b328:	bf00      	nop
    while (micros() - t0 < _ms * 1000)
 800b32a:	f000 f833 	bl	800b394 <micros>
 800b32e:	4602      	mov	r2, r0
 800b330:	460b      	mov	r3, r1
 800b332:	490d      	ldr	r1, [pc, #52]	@ (800b368 <delay+0x58>)
 800b334:	6809      	ldr	r1, [r1, #0]
 800b336:	2000      	movs	r0, #0
 800b338:	468a      	mov	sl, r1
 800b33a:	4683      	mov	fp, r0
 800b33c:	ebb2 040a 	subs.w	r4, r2, sl
 800b340:	eb63 050b 	sbc.w	r5, r3, fp
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b34a:	fb02 f303 	mul.w	r3, r2, r3
 800b34e:	2200      	movs	r2, #0
 800b350:	4698      	mov	r8, r3
 800b352:	4691      	mov	r9, r2
 800b354:	4544      	cmp	r4, r8
 800b356:	eb75 0309 	sbcs.w	r3, r5, r9
 800b35a:	d3e5      	bcc.n	800b328 <delay+0x18>
}
 800b35c:	bf00      	nop
 800b35e:	bf00      	nop
 800b360:	3708      	adds	r7, #8
 800b362:	46bd      	mov	sp, r7
 800b364:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b368:	20000980 	.word	0x20000980

0800b36c <LL_SYSTICK_IsActiveCounterFlag>:
    while (_us--)
        __NOP();
}

__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag()
{
 800b36c:	b480      	push	{r7}
 800b36e:	af00      	add	r7, sp, #0
    return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 800b370:	4b07      	ldr	r3, [pc, #28]	@ (800b390 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b37c:	bf0c      	ite	eq
 800b37e:	2301      	moveq	r3, #1
 800b380:	2300      	movne	r3, #0
 800b382:	b2db      	uxtb	r3, r3
}
 800b384:	4618      	mov	r0, r3
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr
 800b38e:	bf00      	nop
 800b390:	e000e010 	.word	0xe000e010

0800b394 <micros>:

uint64_t micros()
{
 800b394:	b5b0      	push	{r4, r5, r7, lr}
 800b396:	af00      	add	r7, sp, #0
    /* Ensure COUNTFLAG is reset by reading SysTick control and status register */
    LL_SYSTICK_IsActiveCounterFlag();
 800b398:	f7ff ffe8 	bl	800b36c <LL_SYSTICK_IsActiveCounterFlag>
    m = HAL_GetTick();
 800b39c:	f7f7 f8a4 	bl	80024e8 <HAL_GetTick>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	4a1c      	ldr	r2, [pc, #112]	@ (800b414 <micros+0x80>)
 800b3a4:	6013      	str	r3, [r2, #0]
    tms = SysTick->LOAD + 1;
 800b3a6:	4b1c      	ldr	r3, [pc, #112]	@ (800b418 <micros+0x84>)
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	4a1b      	ldr	r2, [pc, #108]	@ (800b41c <micros+0x88>)
 800b3ae:	6013      	str	r3, [r2, #0]
    u = tms - SysTick->VAL;
 800b3b0:	4b1a      	ldr	r3, [pc, #104]	@ (800b41c <micros+0x88>)
 800b3b2:	681a      	ldr	r2, [r3, #0]
 800b3b4:	4b18      	ldr	r3, [pc, #96]	@ (800b418 <micros+0x84>)
 800b3b6:	689b      	ldr	r3, [r3, #8]
 800b3b8:	1ad3      	subs	r3, r2, r3
 800b3ba:	4a19      	ldr	r2, [pc, #100]	@ (800b420 <micros+0x8c>)
 800b3bc:	6013      	str	r3, [r2, #0]
    if (LL_SYSTICK_IsActiveCounterFlag())
 800b3be:	f7ff ffd5 	bl	800b36c <LL_SYSTICK_IsActiveCounterFlag>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d00b      	beq.n	800b3e0 <micros+0x4c>
    {
        m = HAL_GetTick();
 800b3c8:	f7f7 f88e 	bl	80024e8 <HAL_GetTick>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	4a11      	ldr	r2, [pc, #68]	@ (800b414 <micros+0x80>)
 800b3d0:	6013      	str	r3, [r2, #0]
        u = tms - SysTick->VAL;
 800b3d2:	4b12      	ldr	r3, [pc, #72]	@ (800b41c <micros+0x88>)
 800b3d4:	681a      	ldr	r2, [r3, #0]
 800b3d6:	4b10      	ldr	r3, [pc, #64]	@ (800b418 <micros+0x84>)
 800b3d8:	689b      	ldr	r3, [r3, #8]
 800b3da:	1ad3      	subs	r3, r2, r3
 800b3dc:	4a10      	ldr	r2, [pc, #64]	@ (800b420 <micros+0x8c>)
 800b3de:	6013      	str	r3, [r2, #0]
    }
    return (m * 1000 + (u * 1000) / tms);
 800b3e0:	4b0c      	ldr	r3, [pc, #48]	@ (800b414 <micros+0x80>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b3e8:	fb03 f202 	mul.w	r2, r3, r2
 800b3ec:	4b0c      	ldr	r3, [pc, #48]	@ (800b420 <micros+0x8c>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b3f4:	fb03 f101 	mul.w	r1, r3, r1
 800b3f8:	4b08      	ldr	r3, [pc, #32]	@ (800b41c <micros+0x88>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	fbb1 f3f3 	udiv	r3, r1, r3
 800b400:	4413      	add	r3, r2
 800b402:	2200      	movs	r2, #0
 800b404:	461c      	mov	r4, r3
 800b406:	4615      	mov	r5, r2
 800b408:	4622      	mov	r2, r4
 800b40a:	462b      	mov	r3, r5
}
 800b40c:	4610      	mov	r0, r2
 800b40e:	4619      	mov	r1, r3
 800b410:	bdb0      	pop	{r4, r5, r7, pc}
 800b412:	bf00      	nop
 800b414:	20000974 	.word	0x20000974
 800b418:	e000e010 	.word	0xe000e010
 800b41c:	20000978 	.word	0x20000978
 800b420:	2000097c 	.word	0x2000097c

0800b424 <userMain>:
float HallTheta = 0;
float HallSpeed = 0;
uint8_t HallReadTemp = 0;
// static bool powerLost;
void userMain(void)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	af00      	add	r7, sp, #0
	// 	imu_ahrs_update();
	// 	imu_attitude_update();
	
	// }

	if (get100MsFlag())
 800b428:	f000 f8e8 	bl	800b5fc <get100MsFlag>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d001      	beq.n	800b436 <userMain+0x12>
	{
		appRunning();
 800b432:	f7ff fce1 	bl	800adf8 <appRunning>
	}
#if SHOW_WAVE == 0 //&& COMMAMNDER == 0
	if (get500MsFlag())
 800b436:	f000 f8f5 	bl	800b624 <get500MsFlag>
 800b43a:	4603      	mov	r3, r0
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d001      	beq.n	800b444 <userMain+0x20>
	{
		uartTx();
 800b440:	f7ff fdf2 	bl	800b028 <uartTx>
	}
#endif
}
 800b444:	bf00      	nop
 800b446:	bd80      	pop	{r7, pc}

0800b448 <dealPer100us>:


static bool _5msFlag, _10msFlag, _20msFlag, _30msFlag, _100msFlag, _500msFlag, _1s;
static void dealPerMs();
void dealPer100us()
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	af00      	add	r7, sp, #0
    static unsigned char cnt;
    if (++cnt >= 10)
 800b44c:	4b08      	ldr	r3, [pc, #32]	@ (800b470 <dealPer100us+0x28>)
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	3301      	adds	r3, #1
 800b452:	b2da      	uxtb	r2, r3
 800b454:	4b06      	ldr	r3, [pc, #24]	@ (800b470 <dealPer100us+0x28>)
 800b456:	701a      	strb	r2, [r3, #0]
 800b458:	4b05      	ldr	r3, [pc, #20]	@ (800b470 <dealPer100us+0x28>)
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	2b09      	cmp	r3, #9
 800b45e:	d904      	bls.n	800b46a <dealPer100us+0x22>
    {
        cnt = 0;
 800b460:	4b03      	ldr	r3, [pc, #12]	@ (800b470 <dealPer100us+0x28>)
 800b462:	2200      	movs	r2, #0
 800b464:	701a      	strb	r2, [r3, #0]
        dealPerMs();
 800b466:	f000 f805 	bl	800b474 <dealPerMs>
    }

}
 800b46a:	bf00      	nop
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	20000993 	.word	0x20000993

0800b474 <dealPerMs>:

static void dealPerMs()
{
 800b474:	b480      	push	{r7}
 800b476:	af00      	add	r7, sp, #0
    static unsigned char _5msCnt, _30msCnt, _20msCnt, _100msCnt, _10msCnt;
    static uint _500msCnt, _1000msCnt;
    if (++_5msCnt >= 5)
 800b478:	4b45      	ldr	r3, [pc, #276]	@ (800b590 <dealPerMs+0x11c>)
 800b47a:	781b      	ldrb	r3, [r3, #0]
 800b47c:	3301      	adds	r3, #1
 800b47e:	b2da      	uxtb	r2, r3
 800b480:	4b43      	ldr	r3, [pc, #268]	@ (800b590 <dealPerMs+0x11c>)
 800b482:	701a      	strb	r2, [r3, #0]
 800b484:	4b42      	ldr	r3, [pc, #264]	@ (800b590 <dealPerMs+0x11c>)
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	2b04      	cmp	r3, #4
 800b48a:	d905      	bls.n	800b498 <dealPerMs+0x24>
    {
        _5msCnt = 0;
 800b48c:	4b40      	ldr	r3, [pc, #256]	@ (800b590 <dealPerMs+0x11c>)
 800b48e:	2200      	movs	r2, #0
 800b490:	701a      	strb	r2, [r3, #0]
        _5msFlag = 1;
 800b492:	4b40      	ldr	r3, [pc, #256]	@ (800b594 <dealPerMs+0x120>)
 800b494:	2201      	movs	r2, #1
 800b496:	701a      	strb	r2, [r3, #0]
    }

    if (++_10msCnt >= 10)
 800b498:	4b3f      	ldr	r3, [pc, #252]	@ (800b598 <dealPerMs+0x124>)
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	3301      	adds	r3, #1
 800b49e:	b2da      	uxtb	r2, r3
 800b4a0:	4b3d      	ldr	r3, [pc, #244]	@ (800b598 <dealPerMs+0x124>)
 800b4a2:	701a      	strb	r2, [r3, #0]
 800b4a4:	4b3c      	ldr	r3, [pc, #240]	@ (800b598 <dealPerMs+0x124>)
 800b4a6:	781b      	ldrb	r3, [r3, #0]
 800b4a8:	2b09      	cmp	r3, #9
 800b4aa:	d905      	bls.n	800b4b8 <dealPerMs+0x44>
    {
        _10msCnt = 0;
 800b4ac:	4b3a      	ldr	r3, [pc, #232]	@ (800b598 <dealPerMs+0x124>)
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	701a      	strb	r2, [r3, #0]
        _10msFlag = 1;
 800b4b2:	4b3a      	ldr	r3, [pc, #232]	@ (800b59c <dealPerMs+0x128>)
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	701a      	strb	r2, [r3, #0]
    }

    if (++_20msCnt >= 20)
 800b4b8:	4b39      	ldr	r3, [pc, #228]	@ (800b5a0 <dealPerMs+0x12c>)
 800b4ba:	781b      	ldrb	r3, [r3, #0]
 800b4bc:	3301      	adds	r3, #1
 800b4be:	b2da      	uxtb	r2, r3
 800b4c0:	4b37      	ldr	r3, [pc, #220]	@ (800b5a0 <dealPerMs+0x12c>)
 800b4c2:	701a      	strb	r2, [r3, #0]
 800b4c4:	4b36      	ldr	r3, [pc, #216]	@ (800b5a0 <dealPerMs+0x12c>)
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	2b13      	cmp	r3, #19
 800b4ca:	d905      	bls.n	800b4d8 <dealPerMs+0x64>
    {
        _20msCnt = 0;
 800b4cc:	4b34      	ldr	r3, [pc, #208]	@ (800b5a0 <dealPerMs+0x12c>)
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	701a      	strb	r2, [r3, #0]
        _20msFlag = 1;
 800b4d2:	4b34      	ldr	r3, [pc, #208]	@ (800b5a4 <dealPerMs+0x130>)
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	701a      	strb	r2, [r3, #0]
    }

    if (++_30msCnt >= 30)
 800b4d8:	4b33      	ldr	r3, [pc, #204]	@ (800b5a8 <dealPerMs+0x134>)
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	3301      	adds	r3, #1
 800b4de:	b2da      	uxtb	r2, r3
 800b4e0:	4b31      	ldr	r3, [pc, #196]	@ (800b5a8 <dealPerMs+0x134>)
 800b4e2:	701a      	strb	r2, [r3, #0]
 800b4e4:	4b30      	ldr	r3, [pc, #192]	@ (800b5a8 <dealPerMs+0x134>)
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	2b1d      	cmp	r3, #29
 800b4ea:	d905      	bls.n	800b4f8 <dealPerMs+0x84>
    {
        _30msCnt = 0;
 800b4ec:	4b2e      	ldr	r3, [pc, #184]	@ (800b5a8 <dealPerMs+0x134>)
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	701a      	strb	r2, [r3, #0]
        _30msFlag = 1;
 800b4f2:	4b2e      	ldr	r3, [pc, #184]	@ (800b5ac <dealPerMs+0x138>)
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	701a      	strb	r2, [r3, #0]
    }

    if (++_100msCnt >= 100)
 800b4f8:	4b2d      	ldr	r3, [pc, #180]	@ (800b5b0 <dealPerMs+0x13c>)
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	b2da      	uxtb	r2, r3
 800b500:	4b2b      	ldr	r3, [pc, #172]	@ (800b5b0 <dealPerMs+0x13c>)
 800b502:	701a      	strb	r2, [r3, #0]
 800b504:	4b2a      	ldr	r3, [pc, #168]	@ (800b5b0 <dealPerMs+0x13c>)
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	2b63      	cmp	r3, #99	@ 0x63
 800b50a:	d905      	bls.n	800b518 <dealPerMs+0xa4>
    {
        _100msCnt = 0;
 800b50c:	4b28      	ldr	r3, [pc, #160]	@ (800b5b0 <dealPerMs+0x13c>)
 800b50e:	2200      	movs	r2, #0
 800b510:	701a      	strb	r2, [r3, #0]
        _100msFlag = 1;
 800b512:	4b28      	ldr	r3, [pc, #160]	@ (800b5b4 <dealPerMs+0x140>)
 800b514:	2201      	movs	r2, #1
 800b516:	701a      	strb	r2, [r3, #0]
    }

    if (++_500msCnt >= 500)
 800b518:	4b27      	ldr	r3, [pc, #156]	@ (800b5b8 <dealPerMs+0x144>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	3301      	adds	r3, #1
 800b51e:	4a26      	ldr	r2, [pc, #152]	@ (800b5b8 <dealPerMs+0x144>)
 800b520:	6013      	str	r3, [r2, #0]
 800b522:	4b25      	ldr	r3, [pc, #148]	@ (800b5b8 <dealPerMs+0x144>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800b52a:	d305      	bcc.n	800b538 <dealPerMs+0xc4>
    {
        _500msCnt = 0;
 800b52c:	4b22      	ldr	r3, [pc, #136]	@ (800b5b8 <dealPerMs+0x144>)
 800b52e:	2200      	movs	r2, #0
 800b530:	601a      	str	r2, [r3, #0]
        _500msFlag = 1;
 800b532:	4b22      	ldr	r3, [pc, #136]	@ (800b5bc <dealPerMs+0x148>)
 800b534:	2201      	movs	r2, #1
 800b536:	701a      	strb	r2, [r3, #0]
    }
    if (++_1000msCnt >= 1000)
 800b538:	4b21      	ldr	r3, [pc, #132]	@ (800b5c0 <dealPerMs+0x14c>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	3301      	adds	r3, #1
 800b53e:	4a20      	ldr	r2, [pc, #128]	@ (800b5c0 <dealPerMs+0x14c>)
 800b540:	6013      	str	r3, [r2, #0]
 800b542:	4b1f      	ldr	r3, [pc, #124]	@ (800b5c0 <dealPerMs+0x14c>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b54a:	d305      	bcc.n	800b558 <dealPerMs+0xe4>
    {
        _1000msCnt = 0;
 800b54c:	4b1c      	ldr	r3, [pc, #112]	@ (800b5c0 <dealPerMs+0x14c>)
 800b54e:	2200      	movs	r2, #0
 800b550:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800b552:	4b1c      	ldr	r3, [pc, #112]	@ (800b5c4 <dealPerMs+0x150>)
 800b554:	2201      	movs	r2, #1
 800b556:	701a      	strb	r2, [r3, #0]

        cnt = 0;
    }

#else
    frequence = 50;
 800b558:	4b1b      	ldr	r3, [pc, #108]	@ (800b5c8 <dealPerMs+0x154>)
 800b55a:	2232      	movs	r2, #50	@ 0x32
 800b55c:	701a      	strb	r2, [r3, #0]
            _1s = 1;
        }
    }
#else

    if (++_1msCnt >= 1000)
 800b55e:	4b1b      	ldr	r3, [pc, #108]	@ (800b5cc <dealPerMs+0x158>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	3301      	adds	r3, #1
 800b564:	4a19      	ldr	r2, [pc, #100]	@ (800b5cc <dealPerMs+0x158>)
 800b566:	6013      	str	r3, [r2, #0]
 800b568:	4b18      	ldr	r3, [pc, #96]	@ (800b5cc <dealPerMs+0x158>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b570:	d305      	bcc.n	800b57e <dealPerMs+0x10a>
    {
        _1msCnt = 0;
 800b572:	4b16      	ldr	r3, [pc, #88]	@ (800b5cc <dealPerMs+0x158>)
 800b574:	2200      	movs	r2, #0
 800b576:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800b578:	4b12      	ldr	r3, [pc, #72]	@ (800b5c4 <dealPerMs+0x150>)
 800b57a:	2201      	movs	r2, #1
 800b57c:	701a      	strb	r2, [r3, #0]
    }
#endif
#if SPEED_UP
    _1s = 1;
#endif
    _1ms = 1;
 800b57e:	4b14      	ldr	r3, [pc, #80]	@ (800b5d0 <dealPerMs+0x15c>)
 800b580:	2201      	movs	r2, #1
 800b582:	701a      	strb	r2, [r3, #0]




}
 800b584:	bf00      	nop
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr
 800b58e:	bf00      	nop
 800b590:	20000994 	.word	0x20000994
 800b594:	2000098d 	.word	0x2000098d
 800b598:	20000995 	.word	0x20000995
 800b59c:	2000098e 	.word	0x2000098e
 800b5a0:	20000996 	.word	0x20000996
 800b5a4:	2000098f 	.word	0x2000098f
 800b5a8:	20000997 	.word	0x20000997
 800b5ac:	20000990 	.word	0x20000990
 800b5b0:	20000998 	.word	0x20000998
 800b5b4:	20000991 	.word	0x20000991
 800b5b8:	2000099c 	.word	0x2000099c
 800b5bc:	20000992 	.word	0x20000992
 800b5c0:	200009a0 	.word	0x200009a0
 800b5c4:	20000984 	.word	0x20000984
 800b5c8:	2000098c 	.word	0x2000098c
 800b5cc:	20000988 	.word	0x20000988
 800b5d0:	20000985 	.word	0x20000985

0800b5d4 <getOneSecFlag>:
}



bool getOneSecFlag()
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	af00      	add	r7, sp, #0
    if (_1s)
 800b5d8:	4b07      	ldr	r3, [pc, #28]	@ (800b5f8 <getOneSecFlag+0x24>)
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d004      	beq.n	800b5ea <getOneSecFlag+0x16>
    {
        _1s = 0;
 800b5e0:	4b05      	ldr	r3, [pc, #20]	@ (800b5f8 <getOneSecFlag+0x24>)
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	701a      	strb	r2, [r3, #0]
        return 1;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e000      	b.n	800b5ec <getOneSecFlag+0x18>
    }
    else
        return 0;
 800b5ea:	2300      	movs	r3, #0
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr
 800b5f6:	bf00      	nop
 800b5f8:	20000984 	.word	0x20000984

0800b5fc <get100MsFlag>:
        return 0;
    }
}

bool get100MsFlag()
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	af00      	add	r7, sp, #0
    if (_100msFlag)
 800b600:	4b07      	ldr	r3, [pc, #28]	@ (800b620 <get100MsFlag+0x24>)
 800b602:	781b      	ldrb	r3, [r3, #0]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d004      	beq.n	800b612 <get100MsFlag+0x16>
    {
        _100msFlag = 0;
 800b608:	4b05      	ldr	r3, [pc, #20]	@ (800b620 <get100MsFlag+0x24>)
 800b60a:	2200      	movs	r2, #0
 800b60c:	701a      	strb	r2, [r3, #0]
        return 1;
 800b60e:	2301      	movs	r3, #1
 800b610:	e000      	b.n	800b614 <get100MsFlag+0x18>
    }
    else
    {
        return 0;
 800b612:	2300      	movs	r3, #0
    }
}
 800b614:	4618      	mov	r0, r3
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop
 800b620:	20000991 	.word	0x20000991

0800b624 <get500MsFlag>:

bool get500MsFlag()
{
 800b624:	b480      	push	{r7}
 800b626:	af00      	add	r7, sp, #0
    if (_500msFlag)
 800b628:	4b07      	ldr	r3, [pc, #28]	@ (800b648 <get500MsFlag+0x24>)
 800b62a:	781b      	ldrb	r3, [r3, #0]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d004      	beq.n	800b63a <get500MsFlag+0x16>
    {
        _500msFlag = 0;
 800b630:	4b05      	ldr	r3, [pc, #20]	@ (800b648 <get500MsFlag+0x24>)
 800b632:	2200      	movs	r2, #0
 800b634:	701a      	strb	r2, [r3, #0]
        return 1;
 800b636:	2301      	movs	r3, #1
 800b638:	e000      	b.n	800b63c <get500MsFlag+0x18>
    }
    else
    {
        return 0;
 800b63a:	2300      	movs	r3, #0
    }
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr
 800b646:	bf00      	nop
 800b648:	20000992 	.word	0x20000992

0800b64c <sulp>:
 800b64c:	b570      	push	{r4, r5, r6, lr}
 800b64e:	4604      	mov	r4, r0
 800b650:	460d      	mov	r5, r1
 800b652:	ec45 4b10 	vmov	d0, r4, r5
 800b656:	4616      	mov	r6, r2
 800b658:	f003 fc6e 	bl	800ef38 <__ulp>
 800b65c:	ec51 0b10 	vmov	r0, r1, d0
 800b660:	b17e      	cbz	r6, 800b682 <sulp+0x36>
 800b662:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b666:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	dd09      	ble.n	800b682 <sulp+0x36>
 800b66e:	051b      	lsls	r3, r3, #20
 800b670:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b674:	2400      	movs	r4, #0
 800b676:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b67a:	4622      	mov	r2, r4
 800b67c:	462b      	mov	r3, r5
 800b67e:	f7f4 ffe3 	bl	8000648 <__aeabi_dmul>
 800b682:	ec41 0b10 	vmov	d0, r0, r1
 800b686:	bd70      	pop	{r4, r5, r6, pc}

0800b688 <_strtod_l>:
 800b688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b68c:	b09f      	sub	sp, #124	@ 0x7c
 800b68e:	460c      	mov	r4, r1
 800b690:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b692:	2200      	movs	r2, #0
 800b694:	921a      	str	r2, [sp, #104]	@ 0x68
 800b696:	9005      	str	r0, [sp, #20]
 800b698:	f04f 0a00 	mov.w	sl, #0
 800b69c:	f04f 0b00 	mov.w	fp, #0
 800b6a0:	460a      	mov	r2, r1
 800b6a2:	9219      	str	r2, [sp, #100]	@ 0x64
 800b6a4:	7811      	ldrb	r1, [r2, #0]
 800b6a6:	292b      	cmp	r1, #43	@ 0x2b
 800b6a8:	d04a      	beq.n	800b740 <_strtod_l+0xb8>
 800b6aa:	d838      	bhi.n	800b71e <_strtod_l+0x96>
 800b6ac:	290d      	cmp	r1, #13
 800b6ae:	d832      	bhi.n	800b716 <_strtod_l+0x8e>
 800b6b0:	2908      	cmp	r1, #8
 800b6b2:	d832      	bhi.n	800b71a <_strtod_l+0x92>
 800b6b4:	2900      	cmp	r1, #0
 800b6b6:	d03b      	beq.n	800b730 <_strtod_l+0xa8>
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b6bc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b6be:	782a      	ldrb	r2, [r5, #0]
 800b6c0:	2a30      	cmp	r2, #48	@ 0x30
 800b6c2:	f040 80b3 	bne.w	800b82c <_strtod_l+0x1a4>
 800b6c6:	786a      	ldrb	r2, [r5, #1]
 800b6c8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b6cc:	2a58      	cmp	r2, #88	@ 0x58
 800b6ce:	d16e      	bne.n	800b7ae <_strtod_l+0x126>
 800b6d0:	9302      	str	r3, [sp, #8]
 800b6d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6d4:	9301      	str	r3, [sp, #4]
 800b6d6:	ab1a      	add	r3, sp, #104	@ 0x68
 800b6d8:	9300      	str	r3, [sp, #0]
 800b6da:	4a8e      	ldr	r2, [pc, #568]	@ (800b914 <_strtod_l+0x28c>)
 800b6dc:	9805      	ldr	r0, [sp, #20]
 800b6de:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b6e0:	a919      	add	r1, sp, #100	@ 0x64
 800b6e2:	f002 fd1b 	bl	800e11c <__gethex>
 800b6e6:	f010 060f 	ands.w	r6, r0, #15
 800b6ea:	4604      	mov	r4, r0
 800b6ec:	d005      	beq.n	800b6fa <_strtod_l+0x72>
 800b6ee:	2e06      	cmp	r6, #6
 800b6f0:	d128      	bne.n	800b744 <_strtod_l+0xbc>
 800b6f2:	3501      	adds	r5, #1
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	9519      	str	r5, [sp, #100]	@ 0x64
 800b6f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b6fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	f040 858e 	bne.w	800c21e <_strtod_l+0xb96>
 800b702:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b704:	b1cb      	cbz	r3, 800b73a <_strtod_l+0xb2>
 800b706:	4652      	mov	r2, sl
 800b708:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b70c:	ec43 2b10 	vmov	d0, r2, r3
 800b710:	b01f      	add	sp, #124	@ 0x7c
 800b712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b716:	2920      	cmp	r1, #32
 800b718:	d1ce      	bne.n	800b6b8 <_strtod_l+0x30>
 800b71a:	3201      	adds	r2, #1
 800b71c:	e7c1      	b.n	800b6a2 <_strtod_l+0x1a>
 800b71e:	292d      	cmp	r1, #45	@ 0x2d
 800b720:	d1ca      	bne.n	800b6b8 <_strtod_l+0x30>
 800b722:	2101      	movs	r1, #1
 800b724:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b726:	1c51      	adds	r1, r2, #1
 800b728:	9119      	str	r1, [sp, #100]	@ 0x64
 800b72a:	7852      	ldrb	r2, [r2, #1]
 800b72c:	2a00      	cmp	r2, #0
 800b72e:	d1c5      	bne.n	800b6bc <_strtod_l+0x34>
 800b730:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b732:	9419      	str	r4, [sp, #100]	@ 0x64
 800b734:	2b00      	cmp	r3, #0
 800b736:	f040 8570 	bne.w	800c21a <_strtod_l+0xb92>
 800b73a:	4652      	mov	r2, sl
 800b73c:	465b      	mov	r3, fp
 800b73e:	e7e5      	b.n	800b70c <_strtod_l+0x84>
 800b740:	2100      	movs	r1, #0
 800b742:	e7ef      	b.n	800b724 <_strtod_l+0x9c>
 800b744:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b746:	b13a      	cbz	r2, 800b758 <_strtod_l+0xd0>
 800b748:	2135      	movs	r1, #53	@ 0x35
 800b74a:	a81c      	add	r0, sp, #112	@ 0x70
 800b74c:	f003 fcee 	bl	800f12c <__copybits>
 800b750:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b752:	9805      	ldr	r0, [sp, #20]
 800b754:	f003 f8bc 	bl	800e8d0 <_Bfree>
 800b758:	3e01      	subs	r6, #1
 800b75a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b75c:	2e04      	cmp	r6, #4
 800b75e:	d806      	bhi.n	800b76e <_strtod_l+0xe6>
 800b760:	e8df f006 	tbb	[pc, r6]
 800b764:	201d0314 	.word	0x201d0314
 800b768:	14          	.byte	0x14
 800b769:	00          	.byte	0x00
 800b76a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b76e:	05e1      	lsls	r1, r4, #23
 800b770:	bf48      	it	mi
 800b772:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b776:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b77a:	0d1b      	lsrs	r3, r3, #20
 800b77c:	051b      	lsls	r3, r3, #20
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d1bb      	bne.n	800b6fa <_strtod_l+0x72>
 800b782:	f001 fd81 	bl	800d288 <__errno>
 800b786:	2322      	movs	r3, #34	@ 0x22
 800b788:	6003      	str	r3, [r0, #0]
 800b78a:	e7b6      	b.n	800b6fa <_strtod_l+0x72>
 800b78c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b790:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b794:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b798:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b79c:	e7e7      	b.n	800b76e <_strtod_l+0xe6>
 800b79e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b91c <_strtod_l+0x294>
 800b7a2:	e7e4      	b.n	800b76e <_strtod_l+0xe6>
 800b7a4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b7a8:	f04f 3aff 	mov.w	sl, #4294967295
 800b7ac:	e7df      	b.n	800b76e <_strtod_l+0xe6>
 800b7ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b7b0:	1c5a      	adds	r2, r3, #1
 800b7b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800b7b4:	785b      	ldrb	r3, [r3, #1]
 800b7b6:	2b30      	cmp	r3, #48	@ 0x30
 800b7b8:	d0f9      	beq.n	800b7ae <_strtod_l+0x126>
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d09d      	beq.n	800b6fa <_strtod_l+0x72>
 800b7be:	2301      	movs	r3, #1
 800b7c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b7c4:	930c      	str	r3, [sp, #48]	@ 0x30
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	9308      	str	r3, [sp, #32]
 800b7ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7cc:	461f      	mov	r7, r3
 800b7ce:	220a      	movs	r2, #10
 800b7d0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b7d2:	7805      	ldrb	r5, [r0, #0]
 800b7d4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b7d8:	b2d9      	uxtb	r1, r3
 800b7da:	2909      	cmp	r1, #9
 800b7dc:	d928      	bls.n	800b830 <_strtod_l+0x1a8>
 800b7de:	494e      	ldr	r1, [pc, #312]	@ (800b918 <_strtod_l+0x290>)
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	f001 fcf5 	bl	800d1d0 <strncmp>
 800b7e6:	2800      	cmp	r0, #0
 800b7e8:	d032      	beq.n	800b850 <_strtod_l+0x1c8>
 800b7ea:	2000      	movs	r0, #0
 800b7ec:	462a      	mov	r2, r5
 800b7ee:	4681      	mov	r9, r0
 800b7f0:	463d      	mov	r5, r7
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	2a65      	cmp	r2, #101	@ 0x65
 800b7f6:	d001      	beq.n	800b7fc <_strtod_l+0x174>
 800b7f8:	2a45      	cmp	r2, #69	@ 0x45
 800b7fa:	d114      	bne.n	800b826 <_strtod_l+0x19e>
 800b7fc:	b91d      	cbnz	r5, 800b806 <_strtod_l+0x17e>
 800b7fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b800:	4302      	orrs	r2, r0
 800b802:	d095      	beq.n	800b730 <_strtod_l+0xa8>
 800b804:	2500      	movs	r5, #0
 800b806:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b808:	1c62      	adds	r2, r4, #1
 800b80a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b80c:	7862      	ldrb	r2, [r4, #1]
 800b80e:	2a2b      	cmp	r2, #43	@ 0x2b
 800b810:	d077      	beq.n	800b902 <_strtod_l+0x27a>
 800b812:	2a2d      	cmp	r2, #45	@ 0x2d
 800b814:	d07b      	beq.n	800b90e <_strtod_l+0x286>
 800b816:	f04f 0c00 	mov.w	ip, #0
 800b81a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b81e:	2909      	cmp	r1, #9
 800b820:	f240 8082 	bls.w	800b928 <_strtod_l+0x2a0>
 800b824:	9419      	str	r4, [sp, #100]	@ 0x64
 800b826:	f04f 0800 	mov.w	r8, #0
 800b82a:	e0a2      	b.n	800b972 <_strtod_l+0x2ea>
 800b82c:	2300      	movs	r3, #0
 800b82e:	e7c7      	b.n	800b7c0 <_strtod_l+0x138>
 800b830:	2f08      	cmp	r7, #8
 800b832:	bfd5      	itete	le
 800b834:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b836:	9908      	ldrgt	r1, [sp, #32]
 800b838:	fb02 3301 	mlale	r3, r2, r1, r3
 800b83c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b840:	f100 0001 	add.w	r0, r0, #1
 800b844:	bfd4      	ite	le
 800b846:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b848:	9308      	strgt	r3, [sp, #32]
 800b84a:	3701      	adds	r7, #1
 800b84c:	9019      	str	r0, [sp, #100]	@ 0x64
 800b84e:	e7bf      	b.n	800b7d0 <_strtod_l+0x148>
 800b850:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b852:	1c5a      	adds	r2, r3, #1
 800b854:	9219      	str	r2, [sp, #100]	@ 0x64
 800b856:	785a      	ldrb	r2, [r3, #1]
 800b858:	b37f      	cbz	r7, 800b8ba <_strtod_l+0x232>
 800b85a:	4681      	mov	r9, r0
 800b85c:	463d      	mov	r5, r7
 800b85e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b862:	2b09      	cmp	r3, #9
 800b864:	d912      	bls.n	800b88c <_strtod_l+0x204>
 800b866:	2301      	movs	r3, #1
 800b868:	e7c4      	b.n	800b7f4 <_strtod_l+0x16c>
 800b86a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b86c:	1c5a      	adds	r2, r3, #1
 800b86e:	9219      	str	r2, [sp, #100]	@ 0x64
 800b870:	785a      	ldrb	r2, [r3, #1]
 800b872:	3001      	adds	r0, #1
 800b874:	2a30      	cmp	r2, #48	@ 0x30
 800b876:	d0f8      	beq.n	800b86a <_strtod_l+0x1e2>
 800b878:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b87c:	2b08      	cmp	r3, #8
 800b87e:	f200 84d3 	bhi.w	800c228 <_strtod_l+0xba0>
 800b882:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b884:	930c      	str	r3, [sp, #48]	@ 0x30
 800b886:	4681      	mov	r9, r0
 800b888:	2000      	movs	r0, #0
 800b88a:	4605      	mov	r5, r0
 800b88c:	3a30      	subs	r2, #48	@ 0x30
 800b88e:	f100 0301 	add.w	r3, r0, #1
 800b892:	d02a      	beq.n	800b8ea <_strtod_l+0x262>
 800b894:	4499      	add	r9, r3
 800b896:	eb00 0c05 	add.w	ip, r0, r5
 800b89a:	462b      	mov	r3, r5
 800b89c:	210a      	movs	r1, #10
 800b89e:	4563      	cmp	r3, ip
 800b8a0:	d10d      	bne.n	800b8be <_strtod_l+0x236>
 800b8a2:	1c69      	adds	r1, r5, #1
 800b8a4:	4401      	add	r1, r0
 800b8a6:	4428      	add	r0, r5
 800b8a8:	2808      	cmp	r0, #8
 800b8aa:	dc16      	bgt.n	800b8da <_strtod_l+0x252>
 800b8ac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b8ae:	230a      	movs	r3, #10
 800b8b0:	fb03 2300 	mla	r3, r3, r0, r2
 800b8b4:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	e018      	b.n	800b8ec <_strtod_l+0x264>
 800b8ba:	4638      	mov	r0, r7
 800b8bc:	e7da      	b.n	800b874 <_strtod_l+0x1ec>
 800b8be:	2b08      	cmp	r3, #8
 800b8c0:	f103 0301 	add.w	r3, r3, #1
 800b8c4:	dc03      	bgt.n	800b8ce <_strtod_l+0x246>
 800b8c6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b8c8:	434e      	muls	r6, r1
 800b8ca:	960a      	str	r6, [sp, #40]	@ 0x28
 800b8cc:	e7e7      	b.n	800b89e <_strtod_l+0x216>
 800b8ce:	2b10      	cmp	r3, #16
 800b8d0:	bfde      	ittt	le
 800b8d2:	9e08      	ldrle	r6, [sp, #32]
 800b8d4:	434e      	mulle	r6, r1
 800b8d6:	9608      	strle	r6, [sp, #32]
 800b8d8:	e7e1      	b.n	800b89e <_strtod_l+0x216>
 800b8da:	280f      	cmp	r0, #15
 800b8dc:	dceb      	bgt.n	800b8b6 <_strtod_l+0x22e>
 800b8de:	9808      	ldr	r0, [sp, #32]
 800b8e0:	230a      	movs	r3, #10
 800b8e2:	fb03 2300 	mla	r3, r3, r0, r2
 800b8e6:	9308      	str	r3, [sp, #32]
 800b8e8:	e7e5      	b.n	800b8b6 <_strtod_l+0x22e>
 800b8ea:	4629      	mov	r1, r5
 800b8ec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b8ee:	1c50      	adds	r0, r2, #1
 800b8f0:	9019      	str	r0, [sp, #100]	@ 0x64
 800b8f2:	7852      	ldrb	r2, [r2, #1]
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	460d      	mov	r5, r1
 800b8f8:	e7b1      	b.n	800b85e <_strtod_l+0x1d6>
 800b8fa:	f04f 0900 	mov.w	r9, #0
 800b8fe:	2301      	movs	r3, #1
 800b900:	e77d      	b.n	800b7fe <_strtod_l+0x176>
 800b902:	f04f 0c00 	mov.w	ip, #0
 800b906:	1ca2      	adds	r2, r4, #2
 800b908:	9219      	str	r2, [sp, #100]	@ 0x64
 800b90a:	78a2      	ldrb	r2, [r4, #2]
 800b90c:	e785      	b.n	800b81a <_strtod_l+0x192>
 800b90e:	f04f 0c01 	mov.w	ip, #1
 800b912:	e7f8      	b.n	800b906 <_strtod_l+0x27e>
 800b914:	0800fe1c 	.word	0x0800fe1c
 800b918:	0800fe04 	.word	0x0800fe04
 800b91c:	7ff00000 	.word	0x7ff00000
 800b920:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b922:	1c51      	adds	r1, r2, #1
 800b924:	9119      	str	r1, [sp, #100]	@ 0x64
 800b926:	7852      	ldrb	r2, [r2, #1]
 800b928:	2a30      	cmp	r2, #48	@ 0x30
 800b92a:	d0f9      	beq.n	800b920 <_strtod_l+0x298>
 800b92c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b930:	2908      	cmp	r1, #8
 800b932:	f63f af78 	bhi.w	800b826 <_strtod_l+0x19e>
 800b936:	3a30      	subs	r2, #48	@ 0x30
 800b938:	920e      	str	r2, [sp, #56]	@ 0x38
 800b93a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b93c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b93e:	f04f 080a 	mov.w	r8, #10
 800b942:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b944:	1c56      	adds	r6, r2, #1
 800b946:	9619      	str	r6, [sp, #100]	@ 0x64
 800b948:	7852      	ldrb	r2, [r2, #1]
 800b94a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b94e:	f1be 0f09 	cmp.w	lr, #9
 800b952:	d939      	bls.n	800b9c8 <_strtod_l+0x340>
 800b954:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b956:	1a76      	subs	r6, r6, r1
 800b958:	2e08      	cmp	r6, #8
 800b95a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b95e:	dc03      	bgt.n	800b968 <_strtod_l+0x2e0>
 800b960:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b962:	4588      	cmp	r8, r1
 800b964:	bfa8      	it	ge
 800b966:	4688      	movge	r8, r1
 800b968:	f1bc 0f00 	cmp.w	ip, #0
 800b96c:	d001      	beq.n	800b972 <_strtod_l+0x2ea>
 800b96e:	f1c8 0800 	rsb	r8, r8, #0
 800b972:	2d00      	cmp	r5, #0
 800b974:	d14e      	bne.n	800ba14 <_strtod_l+0x38c>
 800b976:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b978:	4308      	orrs	r0, r1
 800b97a:	f47f aebe 	bne.w	800b6fa <_strtod_l+0x72>
 800b97e:	2b00      	cmp	r3, #0
 800b980:	f47f aed6 	bne.w	800b730 <_strtod_l+0xa8>
 800b984:	2a69      	cmp	r2, #105	@ 0x69
 800b986:	d028      	beq.n	800b9da <_strtod_l+0x352>
 800b988:	dc25      	bgt.n	800b9d6 <_strtod_l+0x34e>
 800b98a:	2a49      	cmp	r2, #73	@ 0x49
 800b98c:	d025      	beq.n	800b9da <_strtod_l+0x352>
 800b98e:	2a4e      	cmp	r2, #78	@ 0x4e
 800b990:	f47f aece 	bne.w	800b730 <_strtod_l+0xa8>
 800b994:	499b      	ldr	r1, [pc, #620]	@ (800bc04 <_strtod_l+0x57c>)
 800b996:	a819      	add	r0, sp, #100	@ 0x64
 800b998:	f002 fde2 	bl	800e560 <__match>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	f43f aec7 	beq.w	800b730 <_strtod_l+0xa8>
 800b9a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b9a4:	781b      	ldrb	r3, [r3, #0]
 800b9a6:	2b28      	cmp	r3, #40	@ 0x28
 800b9a8:	d12e      	bne.n	800ba08 <_strtod_l+0x380>
 800b9aa:	4997      	ldr	r1, [pc, #604]	@ (800bc08 <_strtod_l+0x580>)
 800b9ac:	aa1c      	add	r2, sp, #112	@ 0x70
 800b9ae:	a819      	add	r0, sp, #100	@ 0x64
 800b9b0:	f002 fdea 	bl	800e588 <__hexnan>
 800b9b4:	2805      	cmp	r0, #5
 800b9b6:	d127      	bne.n	800ba08 <_strtod_l+0x380>
 800b9b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b9ba:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b9be:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b9c2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b9c6:	e698      	b.n	800b6fa <_strtod_l+0x72>
 800b9c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b9ca:	fb08 2101 	mla	r1, r8, r1, r2
 800b9ce:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b9d2:	920e      	str	r2, [sp, #56]	@ 0x38
 800b9d4:	e7b5      	b.n	800b942 <_strtod_l+0x2ba>
 800b9d6:	2a6e      	cmp	r2, #110	@ 0x6e
 800b9d8:	e7da      	b.n	800b990 <_strtod_l+0x308>
 800b9da:	498c      	ldr	r1, [pc, #560]	@ (800bc0c <_strtod_l+0x584>)
 800b9dc:	a819      	add	r0, sp, #100	@ 0x64
 800b9de:	f002 fdbf 	bl	800e560 <__match>
 800b9e2:	2800      	cmp	r0, #0
 800b9e4:	f43f aea4 	beq.w	800b730 <_strtod_l+0xa8>
 800b9e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b9ea:	4989      	ldr	r1, [pc, #548]	@ (800bc10 <_strtod_l+0x588>)
 800b9ec:	3b01      	subs	r3, #1
 800b9ee:	a819      	add	r0, sp, #100	@ 0x64
 800b9f0:	9319      	str	r3, [sp, #100]	@ 0x64
 800b9f2:	f002 fdb5 	bl	800e560 <__match>
 800b9f6:	b910      	cbnz	r0, 800b9fe <_strtod_l+0x376>
 800b9f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	9319      	str	r3, [sp, #100]	@ 0x64
 800b9fe:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800bc20 <_strtod_l+0x598>
 800ba02:	f04f 0a00 	mov.w	sl, #0
 800ba06:	e678      	b.n	800b6fa <_strtod_l+0x72>
 800ba08:	4882      	ldr	r0, [pc, #520]	@ (800bc14 <_strtod_l+0x58c>)
 800ba0a:	f001 fc79 	bl	800d300 <nan>
 800ba0e:	ec5b ab10 	vmov	sl, fp, d0
 800ba12:	e672      	b.n	800b6fa <_strtod_l+0x72>
 800ba14:	eba8 0309 	sub.w	r3, r8, r9
 800ba18:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ba1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba1c:	2f00      	cmp	r7, #0
 800ba1e:	bf08      	it	eq
 800ba20:	462f      	moveq	r7, r5
 800ba22:	2d10      	cmp	r5, #16
 800ba24:	462c      	mov	r4, r5
 800ba26:	bfa8      	it	ge
 800ba28:	2410      	movge	r4, #16
 800ba2a:	f7f4 fd93 	bl	8000554 <__aeabi_ui2d>
 800ba2e:	2d09      	cmp	r5, #9
 800ba30:	4682      	mov	sl, r0
 800ba32:	468b      	mov	fp, r1
 800ba34:	dc13      	bgt.n	800ba5e <_strtod_l+0x3d6>
 800ba36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	f43f ae5e 	beq.w	800b6fa <_strtod_l+0x72>
 800ba3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba40:	dd78      	ble.n	800bb34 <_strtod_l+0x4ac>
 800ba42:	2b16      	cmp	r3, #22
 800ba44:	dc5f      	bgt.n	800bb06 <_strtod_l+0x47e>
 800ba46:	4974      	ldr	r1, [pc, #464]	@ (800bc18 <_strtod_l+0x590>)
 800ba48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ba4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba50:	4652      	mov	r2, sl
 800ba52:	465b      	mov	r3, fp
 800ba54:	f7f4 fdf8 	bl	8000648 <__aeabi_dmul>
 800ba58:	4682      	mov	sl, r0
 800ba5a:	468b      	mov	fp, r1
 800ba5c:	e64d      	b.n	800b6fa <_strtod_l+0x72>
 800ba5e:	4b6e      	ldr	r3, [pc, #440]	@ (800bc18 <_strtod_l+0x590>)
 800ba60:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ba64:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ba68:	f7f4 fdee 	bl	8000648 <__aeabi_dmul>
 800ba6c:	4682      	mov	sl, r0
 800ba6e:	9808      	ldr	r0, [sp, #32]
 800ba70:	468b      	mov	fp, r1
 800ba72:	f7f4 fd6f 	bl	8000554 <__aeabi_ui2d>
 800ba76:	4602      	mov	r2, r0
 800ba78:	460b      	mov	r3, r1
 800ba7a:	4650      	mov	r0, sl
 800ba7c:	4659      	mov	r1, fp
 800ba7e:	f7f4 fc2d 	bl	80002dc <__adddf3>
 800ba82:	2d0f      	cmp	r5, #15
 800ba84:	4682      	mov	sl, r0
 800ba86:	468b      	mov	fp, r1
 800ba88:	ddd5      	ble.n	800ba36 <_strtod_l+0x3ae>
 800ba8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba8c:	1b2c      	subs	r4, r5, r4
 800ba8e:	441c      	add	r4, r3
 800ba90:	2c00      	cmp	r4, #0
 800ba92:	f340 8096 	ble.w	800bbc2 <_strtod_l+0x53a>
 800ba96:	f014 030f 	ands.w	r3, r4, #15
 800ba9a:	d00a      	beq.n	800bab2 <_strtod_l+0x42a>
 800ba9c:	495e      	ldr	r1, [pc, #376]	@ (800bc18 <_strtod_l+0x590>)
 800ba9e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800baa2:	4652      	mov	r2, sl
 800baa4:	465b      	mov	r3, fp
 800baa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baaa:	f7f4 fdcd 	bl	8000648 <__aeabi_dmul>
 800baae:	4682      	mov	sl, r0
 800bab0:	468b      	mov	fp, r1
 800bab2:	f034 040f 	bics.w	r4, r4, #15
 800bab6:	d073      	beq.n	800bba0 <_strtod_l+0x518>
 800bab8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800babc:	dd48      	ble.n	800bb50 <_strtod_l+0x4c8>
 800babe:	2400      	movs	r4, #0
 800bac0:	46a0      	mov	r8, r4
 800bac2:	940a      	str	r4, [sp, #40]	@ 0x28
 800bac4:	46a1      	mov	r9, r4
 800bac6:	9a05      	ldr	r2, [sp, #20]
 800bac8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800bc20 <_strtod_l+0x598>
 800bacc:	2322      	movs	r3, #34	@ 0x22
 800bace:	6013      	str	r3, [r2, #0]
 800bad0:	f04f 0a00 	mov.w	sl, #0
 800bad4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	f43f ae0f 	beq.w	800b6fa <_strtod_l+0x72>
 800badc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bade:	9805      	ldr	r0, [sp, #20]
 800bae0:	f002 fef6 	bl	800e8d0 <_Bfree>
 800bae4:	9805      	ldr	r0, [sp, #20]
 800bae6:	4649      	mov	r1, r9
 800bae8:	f002 fef2 	bl	800e8d0 <_Bfree>
 800baec:	9805      	ldr	r0, [sp, #20]
 800baee:	4641      	mov	r1, r8
 800baf0:	f002 feee 	bl	800e8d0 <_Bfree>
 800baf4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800baf6:	9805      	ldr	r0, [sp, #20]
 800baf8:	f002 feea 	bl	800e8d0 <_Bfree>
 800bafc:	9805      	ldr	r0, [sp, #20]
 800bafe:	4621      	mov	r1, r4
 800bb00:	f002 fee6 	bl	800e8d0 <_Bfree>
 800bb04:	e5f9      	b.n	800b6fa <_strtod_l+0x72>
 800bb06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb08:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	dbbc      	blt.n	800ba8a <_strtod_l+0x402>
 800bb10:	4c41      	ldr	r4, [pc, #260]	@ (800bc18 <_strtod_l+0x590>)
 800bb12:	f1c5 050f 	rsb	r5, r5, #15
 800bb16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bb1a:	4652      	mov	r2, sl
 800bb1c:	465b      	mov	r3, fp
 800bb1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb22:	f7f4 fd91 	bl	8000648 <__aeabi_dmul>
 800bb26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb28:	1b5d      	subs	r5, r3, r5
 800bb2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bb2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bb32:	e78f      	b.n	800ba54 <_strtod_l+0x3cc>
 800bb34:	3316      	adds	r3, #22
 800bb36:	dba8      	blt.n	800ba8a <_strtod_l+0x402>
 800bb38:	4b37      	ldr	r3, [pc, #220]	@ (800bc18 <_strtod_l+0x590>)
 800bb3a:	eba9 0808 	sub.w	r8, r9, r8
 800bb3e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bb42:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bb46:	4650      	mov	r0, sl
 800bb48:	4659      	mov	r1, fp
 800bb4a:	f7f4 fea7 	bl	800089c <__aeabi_ddiv>
 800bb4e:	e783      	b.n	800ba58 <_strtod_l+0x3d0>
 800bb50:	4b32      	ldr	r3, [pc, #200]	@ (800bc1c <_strtod_l+0x594>)
 800bb52:	9308      	str	r3, [sp, #32]
 800bb54:	2300      	movs	r3, #0
 800bb56:	1124      	asrs	r4, r4, #4
 800bb58:	4650      	mov	r0, sl
 800bb5a:	4659      	mov	r1, fp
 800bb5c:	461e      	mov	r6, r3
 800bb5e:	2c01      	cmp	r4, #1
 800bb60:	dc21      	bgt.n	800bba6 <_strtod_l+0x51e>
 800bb62:	b10b      	cbz	r3, 800bb68 <_strtod_l+0x4e0>
 800bb64:	4682      	mov	sl, r0
 800bb66:	468b      	mov	fp, r1
 800bb68:	492c      	ldr	r1, [pc, #176]	@ (800bc1c <_strtod_l+0x594>)
 800bb6a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bb6e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bb72:	4652      	mov	r2, sl
 800bb74:	465b      	mov	r3, fp
 800bb76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb7a:	f7f4 fd65 	bl	8000648 <__aeabi_dmul>
 800bb7e:	4b28      	ldr	r3, [pc, #160]	@ (800bc20 <_strtod_l+0x598>)
 800bb80:	460a      	mov	r2, r1
 800bb82:	400b      	ands	r3, r1
 800bb84:	4927      	ldr	r1, [pc, #156]	@ (800bc24 <_strtod_l+0x59c>)
 800bb86:	428b      	cmp	r3, r1
 800bb88:	4682      	mov	sl, r0
 800bb8a:	d898      	bhi.n	800babe <_strtod_l+0x436>
 800bb8c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800bb90:	428b      	cmp	r3, r1
 800bb92:	bf86      	itte	hi
 800bb94:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800bc28 <_strtod_l+0x5a0>
 800bb98:	f04f 3aff 	movhi.w	sl, #4294967295
 800bb9c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800bba0:	2300      	movs	r3, #0
 800bba2:	9308      	str	r3, [sp, #32]
 800bba4:	e07a      	b.n	800bc9c <_strtod_l+0x614>
 800bba6:	07e2      	lsls	r2, r4, #31
 800bba8:	d505      	bpl.n	800bbb6 <_strtod_l+0x52e>
 800bbaa:	9b08      	ldr	r3, [sp, #32]
 800bbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb0:	f7f4 fd4a 	bl	8000648 <__aeabi_dmul>
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	9a08      	ldr	r2, [sp, #32]
 800bbb8:	3208      	adds	r2, #8
 800bbba:	3601      	adds	r6, #1
 800bbbc:	1064      	asrs	r4, r4, #1
 800bbbe:	9208      	str	r2, [sp, #32]
 800bbc0:	e7cd      	b.n	800bb5e <_strtod_l+0x4d6>
 800bbc2:	d0ed      	beq.n	800bba0 <_strtod_l+0x518>
 800bbc4:	4264      	negs	r4, r4
 800bbc6:	f014 020f 	ands.w	r2, r4, #15
 800bbca:	d00a      	beq.n	800bbe2 <_strtod_l+0x55a>
 800bbcc:	4b12      	ldr	r3, [pc, #72]	@ (800bc18 <_strtod_l+0x590>)
 800bbce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbd2:	4650      	mov	r0, sl
 800bbd4:	4659      	mov	r1, fp
 800bbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbda:	f7f4 fe5f 	bl	800089c <__aeabi_ddiv>
 800bbde:	4682      	mov	sl, r0
 800bbe0:	468b      	mov	fp, r1
 800bbe2:	1124      	asrs	r4, r4, #4
 800bbe4:	d0dc      	beq.n	800bba0 <_strtod_l+0x518>
 800bbe6:	2c1f      	cmp	r4, #31
 800bbe8:	dd20      	ble.n	800bc2c <_strtod_l+0x5a4>
 800bbea:	2400      	movs	r4, #0
 800bbec:	46a0      	mov	r8, r4
 800bbee:	940a      	str	r4, [sp, #40]	@ 0x28
 800bbf0:	46a1      	mov	r9, r4
 800bbf2:	9a05      	ldr	r2, [sp, #20]
 800bbf4:	2322      	movs	r3, #34	@ 0x22
 800bbf6:	f04f 0a00 	mov.w	sl, #0
 800bbfa:	f04f 0b00 	mov.w	fp, #0
 800bbfe:	6013      	str	r3, [r2, #0]
 800bc00:	e768      	b.n	800bad4 <_strtod_l+0x44c>
 800bc02:	bf00      	nop
 800bc04:	0800fe65 	.word	0x0800fe65
 800bc08:	0800fe08 	.word	0x0800fe08
 800bc0c:	0800fe5d 	.word	0x0800fe5d
 800bc10:	0800fe9c 	.word	0x0800fe9c
 800bc14:	0801022d 	.word	0x0801022d
 800bc18:	08010018 	.word	0x08010018
 800bc1c:	0800fff0 	.word	0x0800fff0
 800bc20:	7ff00000 	.word	0x7ff00000
 800bc24:	7ca00000 	.word	0x7ca00000
 800bc28:	7fefffff 	.word	0x7fefffff
 800bc2c:	f014 0310 	ands.w	r3, r4, #16
 800bc30:	bf18      	it	ne
 800bc32:	236a      	movne	r3, #106	@ 0x6a
 800bc34:	4ea9      	ldr	r6, [pc, #676]	@ (800bedc <_strtod_l+0x854>)
 800bc36:	9308      	str	r3, [sp, #32]
 800bc38:	4650      	mov	r0, sl
 800bc3a:	4659      	mov	r1, fp
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	07e2      	lsls	r2, r4, #31
 800bc40:	d504      	bpl.n	800bc4c <_strtod_l+0x5c4>
 800bc42:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bc46:	f7f4 fcff 	bl	8000648 <__aeabi_dmul>
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	1064      	asrs	r4, r4, #1
 800bc4e:	f106 0608 	add.w	r6, r6, #8
 800bc52:	d1f4      	bne.n	800bc3e <_strtod_l+0x5b6>
 800bc54:	b10b      	cbz	r3, 800bc5a <_strtod_l+0x5d2>
 800bc56:	4682      	mov	sl, r0
 800bc58:	468b      	mov	fp, r1
 800bc5a:	9b08      	ldr	r3, [sp, #32]
 800bc5c:	b1b3      	cbz	r3, 800bc8c <_strtod_l+0x604>
 800bc5e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bc62:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	4659      	mov	r1, fp
 800bc6a:	dd0f      	ble.n	800bc8c <_strtod_l+0x604>
 800bc6c:	2b1f      	cmp	r3, #31
 800bc6e:	dd55      	ble.n	800bd1c <_strtod_l+0x694>
 800bc70:	2b34      	cmp	r3, #52	@ 0x34
 800bc72:	bfde      	ittt	le
 800bc74:	f04f 33ff 	movle.w	r3, #4294967295
 800bc78:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bc7c:	4093      	lslle	r3, r2
 800bc7e:	f04f 0a00 	mov.w	sl, #0
 800bc82:	bfcc      	ite	gt
 800bc84:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bc88:	ea03 0b01 	andle.w	fp, r3, r1
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	2300      	movs	r3, #0
 800bc90:	4650      	mov	r0, sl
 800bc92:	4659      	mov	r1, fp
 800bc94:	f7f4 ff40 	bl	8000b18 <__aeabi_dcmpeq>
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	d1a6      	bne.n	800bbea <_strtod_l+0x562>
 800bc9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc9e:	9300      	str	r3, [sp, #0]
 800bca0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bca2:	9805      	ldr	r0, [sp, #20]
 800bca4:	462b      	mov	r3, r5
 800bca6:	463a      	mov	r2, r7
 800bca8:	f002 fe7a 	bl	800e9a0 <__s2b>
 800bcac:	900a      	str	r0, [sp, #40]	@ 0x28
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	f43f af05 	beq.w	800babe <_strtod_l+0x436>
 800bcb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bcb6:	2a00      	cmp	r2, #0
 800bcb8:	eba9 0308 	sub.w	r3, r9, r8
 800bcbc:	bfa8      	it	ge
 800bcbe:	2300      	movge	r3, #0
 800bcc0:	9312      	str	r3, [sp, #72]	@ 0x48
 800bcc2:	2400      	movs	r4, #0
 800bcc4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bcc8:	9316      	str	r3, [sp, #88]	@ 0x58
 800bcca:	46a0      	mov	r8, r4
 800bccc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcce:	9805      	ldr	r0, [sp, #20]
 800bcd0:	6859      	ldr	r1, [r3, #4]
 800bcd2:	f002 fdbd 	bl	800e850 <_Balloc>
 800bcd6:	4681      	mov	r9, r0
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	f43f aef4 	beq.w	800bac6 <_strtod_l+0x43e>
 800bcde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bce0:	691a      	ldr	r2, [r3, #16]
 800bce2:	3202      	adds	r2, #2
 800bce4:	f103 010c 	add.w	r1, r3, #12
 800bce8:	0092      	lsls	r2, r2, #2
 800bcea:	300c      	adds	r0, #12
 800bcec:	f001 faf9 	bl	800d2e2 <memcpy>
 800bcf0:	ec4b ab10 	vmov	d0, sl, fp
 800bcf4:	9805      	ldr	r0, [sp, #20]
 800bcf6:	aa1c      	add	r2, sp, #112	@ 0x70
 800bcf8:	a91b      	add	r1, sp, #108	@ 0x6c
 800bcfa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bcfe:	f003 f98b 	bl	800f018 <__d2b>
 800bd02:	901a      	str	r0, [sp, #104]	@ 0x68
 800bd04:	2800      	cmp	r0, #0
 800bd06:	f43f aede 	beq.w	800bac6 <_strtod_l+0x43e>
 800bd0a:	9805      	ldr	r0, [sp, #20]
 800bd0c:	2101      	movs	r1, #1
 800bd0e:	f002 fedd 	bl	800eacc <__i2b>
 800bd12:	4680      	mov	r8, r0
 800bd14:	b948      	cbnz	r0, 800bd2a <_strtod_l+0x6a2>
 800bd16:	f04f 0800 	mov.w	r8, #0
 800bd1a:	e6d4      	b.n	800bac6 <_strtod_l+0x43e>
 800bd1c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd20:	fa02 f303 	lsl.w	r3, r2, r3
 800bd24:	ea03 0a0a 	and.w	sl, r3, sl
 800bd28:	e7b0      	b.n	800bc8c <_strtod_l+0x604>
 800bd2a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bd2c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bd2e:	2d00      	cmp	r5, #0
 800bd30:	bfab      	itete	ge
 800bd32:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bd34:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bd36:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bd38:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bd3a:	bfac      	ite	ge
 800bd3c:	18ef      	addge	r7, r5, r3
 800bd3e:	1b5e      	sublt	r6, r3, r5
 800bd40:	9b08      	ldr	r3, [sp, #32]
 800bd42:	1aed      	subs	r5, r5, r3
 800bd44:	4415      	add	r5, r2
 800bd46:	4b66      	ldr	r3, [pc, #408]	@ (800bee0 <_strtod_l+0x858>)
 800bd48:	3d01      	subs	r5, #1
 800bd4a:	429d      	cmp	r5, r3
 800bd4c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bd50:	da50      	bge.n	800bdf4 <_strtod_l+0x76c>
 800bd52:	1b5b      	subs	r3, r3, r5
 800bd54:	2b1f      	cmp	r3, #31
 800bd56:	eba2 0203 	sub.w	r2, r2, r3
 800bd5a:	f04f 0101 	mov.w	r1, #1
 800bd5e:	dc3d      	bgt.n	800bddc <_strtod_l+0x754>
 800bd60:	fa01 f303 	lsl.w	r3, r1, r3
 800bd64:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bd66:	2300      	movs	r3, #0
 800bd68:	9310      	str	r3, [sp, #64]	@ 0x40
 800bd6a:	18bd      	adds	r5, r7, r2
 800bd6c:	9b08      	ldr	r3, [sp, #32]
 800bd6e:	42af      	cmp	r7, r5
 800bd70:	4416      	add	r6, r2
 800bd72:	441e      	add	r6, r3
 800bd74:	463b      	mov	r3, r7
 800bd76:	bfa8      	it	ge
 800bd78:	462b      	movge	r3, r5
 800bd7a:	42b3      	cmp	r3, r6
 800bd7c:	bfa8      	it	ge
 800bd7e:	4633      	movge	r3, r6
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	bfc2      	ittt	gt
 800bd84:	1aed      	subgt	r5, r5, r3
 800bd86:	1af6      	subgt	r6, r6, r3
 800bd88:	1aff      	subgt	r7, r7, r3
 800bd8a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	dd16      	ble.n	800bdbe <_strtod_l+0x736>
 800bd90:	4641      	mov	r1, r8
 800bd92:	9805      	ldr	r0, [sp, #20]
 800bd94:	461a      	mov	r2, r3
 800bd96:	f002 ff59 	bl	800ec4c <__pow5mult>
 800bd9a:	4680      	mov	r8, r0
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	d0ba      	beq.n	800bd16 <_strtod_l+0x68e>
 800bda0:	4601      	mov	r1, r0
 800bda2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bda4:	9805      	ldr	r0, [sp, #20]
 800bda6:	f002 fea7 	bl	800eaf8 <__multiply>
 800bdaa:	900e      	str	r0, [sp, #56]	@ 0x38
 800bdac:	2800      	cmp	r0, #0
 800bdae:	f43f ae8a 	beq.w	800bac6 <_strtod_l+0x43e>
 800bdb2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bdb4:	9805      	ldr	r0, [sp, #20]
 800bdb6:	f002 fd8b 	bl	800e8d0 <_Bfree>
 800bdba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdbc:	931a      	str	r3, [sp, #104]	@ 0x68
 800bdbe:	2d00      	cmp	r5, #0
 800bdc0:	dc1d      	bgt.n	800bdfe <_strtod_l+0x776>
 800bdc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	dd23      	ble.n	800be10 <_strtod_l+0x788>
 800bdc8:	4649      	mov	r1, r9
 800bdca:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bdcc:	9805      	ldr	r0, [sp, #20]
 800bdce:	f002 ff3d 	bl	800ec4c <__pow5mult>
 800bdd2:	4681      	mov	r9, r0
 800bdd4:	b9e0      	cbnz	r0, 800be10 <_strtod_l+0x788>
 800bdd6:	f04f 0900 	mov.w	r9, #0
 800bdda:	e674      	b.n	800bac6 <_strtod_l+0x43e>
 800bddc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bde0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bde4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bde8:	35e2      	adds	r5, #226	@ 0xe2
 800bdea:	fa01 f305 	lsl.w	r3, r1, r5
 800bdee:	9310      	str	r3, [sp, #64]	@ 0x40
 800bdf0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bdf2:	e7ba      	b.n	800bd6a <_strtod_l+0x6e2>
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	9310      	str	r3, [sp, #64]	@ 0x40
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bdfc:	e7b5      	b.n	800bd6a <_strtod_l+0x6e2>
 800bdfe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800be00:	9805      	ldr	r0, [sp, #20]
 800be02:	462a      	mov	r2, r5
 800be04:	f002 ff7c 	bl	800ed00 <__lshift>
 800be08:	901a      	str	r0, [sp, #104]	@ 0x68
 800be0a:	2800      	cmp	r0, #0
 800be0c:	d1d9      	bne.n	800bdc2 <_strtod_l+0x73a>
 800be0e:	e65a      	b.n	800bac6 <_strtod_l+0x43e>
 800be10:	2e00      	cmp	r6, #0
 800be12:	dd07      	ble.n	800be24 <_strtod_l+0x79c>
 800be14:	4649      	mov	r1, r9
 800be16:	9805      	ldr	r0, [sp, #20]
 800be18:	4632      	mov	r2, r6
 800be1a:	f002 ff71 	bl	800ed00 <__lshift>
 800be1e:	4681      	mov	r9, r0
 800be20:	2800      	cmp	r0, #0
 800be22:	d0d8      	beq.n	800bdd6 <_strtod_l+0x74e>
 800be24:	2f00      	cmp	r7, #0
 800be26:	dd08      	ble.n	800be3a <_strtod_l+0x7b2>
 800be28:	4641      	mov	r1, r8
 800be2a:	9805      	ldr	r0, [sp, #20]
 800be2c:	463a      	mov	r2, r7
 800be2e:	f002 ff67 	bl	800ed00 <__lshift>
 800be32:	4680      	mov	r8, r0
 800be34:	2800      	cmp	r0, #0
 800be36:	f43f ae46 	beq.w	800bac6 <_strtod_l+0x43e>
 800be3a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800be3c:	9805      	ldr	r0, [sp, #20]
 800be3e:	464a      	mov	r2, r9
 800be40:	f002 ffe6 	bl	800ee10 <__mdiff>
 800be44:	4604      	mov	r4, r0
 800be46:	2800      	cmp	r0, #0
 800be48:	f43f ae3d 	beq.w	800bac6 <_strtod_l+0x43e>
 800be4c:	68c3      	ldr	r3, [r0, #12]
 800be4e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800be50:	2300      	movs	r3, #0
 800be52:	60c3      	str	r3, [r0, #12]
 800be54:	4641      	mov	r1, r8
 800be56:	f002 ffbf 	bl	800edd8 <__mcmp>
 800be5a:	2800      	cmp	r0, #0
 800be5c:	da46      	bge.n	800beec <_strtod_l+0x864>
 800be5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be60:	ea53 030a 	orrs.w	r3, r3, sl
 800be64:	d16c      	bne.n	800bf40 <_strtod_l+0x8b8>
 800be66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d168      	bne.n	800bf40 <_strtod_l+0x8b8>
 800be6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800be72:	0d1b      	lsrs	r3, r3, #20
 800be74:	051b      	lsls	r3, r3, #20
 800be76:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800be7a:	d961      	bls.n	800bf40 <_strtod_l+0x8b8>
 800be7c:	6963      	ldr	r3, [r4, #20]
 800be7e:	b913      	cbnz	r3, 800be86 <_strtod_l+0x7fe>
 800be80:	6923      	ldr	r3, [r4, #16]
 800be82:	2b01      	cmp	r3, #1
 800be84:	dd5c      	ble.n	800bf40 <_strtod_l+0x8b8>
 800be86:	4621      	mov	r1, r4
 800be88:	2201      	movs	r2, #1
 800be8a:	9805      	ldr	r0, [sp, #20]
 800be8c:	f002 ff38 	bl	800ed00 <__lshift>
 800be90:	4641      	mov	r1, r8
 800be92:	4604      	mov	r4, r0
 800be94:	f002 ffa0 	bl	800edd8 <__mcmp>
 800be98:	2800      	cmp	r0, #0
 800be9a:	dd51      	ble.n	800bf40 <_strtod_l+0x8b8>
 800be9c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bea0:	9a08      	ldr	r2, [sp, #32]
 800bea2:	0d1b      	lsrs	r3, r3, #20
 800bea4:	051b      	lsls	r3, r3, #20
 800bea6:	2a00      	cmp	r2, #0
 800bea8:	d06b      	beq.n	800bf82 <_strtod_l+0x8fa>
 800beaa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800beae:	d868      	bhi.n	800bf82 <_strtod_l+0x8fa>
 800beb0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800beb4:	f67f ae9d 	bls.w	800bbf2 <_strtod_l+0x56a>
 800beb8:	4b0a      	ldr	r3, [pc, #40]	@ (800bee4 <_strtod_l+0x85c>)
 800beba:	4650      	mov	r0, sl
 800bebc:	4659      	mov	r1, fp
 800bebe:	2200      	movs	r2, #0
 800bec0:	f7f4 fbc2 	bl	8000648 <__aeabi_dmul>
 800bec4:	4b08      	ldr	r3, [pc, #32]	@ (800bee8 <_strtod_l+0x860>)
 800bec6:	400b      	ands	r3, r1
 800bec8:	4682      	mov	sl, r0
 800beca:	468b      	mov	fp, r1
 800becc:	2b00      	cmp	r3, #0
 800bece:	f47f ae05 	bne.w	800badc <_strtod_l+0x454>
 800bed2:	9a05      	ldr	r2, [sp, #20]
 800bed4:	2322      	movs	r3, #34	@ 0x22
 800bed6:	6013      	str	r3, [r2, #0]
 800bed8:	e600      	b.n	800badc <_strtod_l+0x454>
 800beda:	bf00      	nop
 800bedc:	0800fe30 	.word	0x0800fe30
 800bee0:	fffffc02 	.word	0xfffffc02
 800bee4:	39500000 	.word	0x39500000
 800bee8:	7ff00000 	.word	0x7ff00000
 800beec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bef0:	d165      	bne.n	800bfbe <_strtod_l+0x936>
 800bef2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bef4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bef8:	b35a      	cbz	r2, 800bf52 <_strtod_l+0x8ca>
 800befa:	4a9f      	ldr	r2, [pc, #636]	@ (800c178 <_strtod_l+0xaf0>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d12b      	bne.n	800bf58 <_strtod_l+0x8d0>
 800bf00:	9b08      	ldr	r3, [sp, #32]
 800bf02:	4651      	mov	r1, sl
 800bf04:	b303      	cbz	r3, 800bf48 <_strtod_l+0x8c0>
 800bf06:	4b9d      	ldr	r3, [pc, #628]	@ (800c17c <_strtod_l+0xaf4>)
 800bf08:	465a      	mov	r2, fp
 800bf0a:	4013      	ands	r3, r2
 800bf0c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bf10:	f04f 32ff 	mov.w	r2, #4294967295
 800bf14:	d81b      	bhi.n	800bf4e <_strtod_l+0x8c6>
 800bf16:	0d1b      	lsrs	r3, r3, #20
 800bf18:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bf1c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf20:	4299      	cmp	r1, r3
 800bf22:	d119      	bne.n	800bf58 <_strtod_l+0x8d0>
 800bf24:	4b96      	ldr	r3, [pc, #600]	@ (800c180 <_strtod_l+0xaf8>)
 800bf26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d102      	bne.n	800bf32 <_strtod_l+0x8aa>
 800bf2c:	3101      	adds	r1, #1
 800bf2e:	f43f adca 	beq.w	800bac6 <_strtod_l+0x43e>
 800bf32:	4b92      	ldr	r3, [pc, #584]	@ (800c17c <_strtod_l+0xaf4>)
 800bf34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bf36:	401a      	ands	r2, r3
 800bf38:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bf3c:	f04f 0a00 	mov.w	sl, #0
 800bf40:	9b08      	ldr	r3, [sp, #32]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d1b8      	bne.n	800beb8 <_strtod_l+0x830>
 800bf46:	e5c9      	b.n	800badc <_strtod_l+0x454>
 800bf48:	f04f 33ff 	mov.w	r3, #4294967295
 800bf4c:	e7e8      	b.n	800bf20 <_strtod_l+0x898>
 800bf4e:	4613      	mov	r3, r2
 800bf50:	e7e6      	b.n	800bf20 <_strtod_l+0x898>
 800bf52:	ea53 030a 	orrs.w	r3, r3, sl
 800bf56:	d0a1      	beq.n	800be9c <_strtod_l+0x814>
 800bf58:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bf5a:	b1db      	cbz	r3, 800bf94 <_strtod_l+0x90c>
 800bf5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bf5e:	4213      	tst	r3, r2
 800bf60:	d0ee      	beq.n	800bf40 <_strtod_l+0x8b8>
 800bf62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf64:	9a08      	ldr	r2, [sp, #32]
 800bf66:	4650      	mov	r0, sl
 800bf68:	4659      	mov	r1, fp
 800bf6a:	b1bb      	cbz	r3, 800bf9c <_strtod_l+0x914>
 800bf6c:	f7ff fb6e 	bl	800b64c <sulp>
 800bf70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf74:	ec53 2b10 	vmov	r2, r3, d0
 800bf78:	f7f4 f9b0 	bl	80002dc <__adddf3>
 800bf7c:	4682      	mov	sl, r0
 800bf7e:	468b      	mov	fp, r1
 800bf80:	e7de      	b.n	800bf40 <_strtod_l+0x8b8>
 800bf82:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bf86:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bf8a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bf8e:	f04f 3aff 	mov.w	sl, #4294967295
 800bf92:	e7d5      	b.n	800bf40 <_strtod_l+0x8b8>
 800bf94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bf96:	ea13 0f0a 	tst.w	r3, sl
 800bf9a:	e7e1      	b.n	800bf60 <_strtod_l+0x8d8>
 800bf9c:	f7ff fb56 	bl	800b64c <sulp>
 800bfa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bfa4:	ec53 2b10 	vmov	r2, r3, d0
 800bfa8:	f7f4 f996 	bl	80002d8 <__aeabi_dsub>
 800bfac:	2200      	movs	r2, #0
 800bfae:	2300      	movs	r3, #0
 800bfb0:	4682      	mov	sl, r0
 800bfb2:	468b      	mov	fp, r1
 800bfb4:	f7f4 fdb0 	bl	8000b18 <__aeabi_dcmpeq>
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	d0c1      	beq.n	800bf40 <_strtod_l+0x8b8>
 800bfbc:	e619      	b.n	800bbf2 <_strtod_l+0x56a>
 800bfbe:	4641      	mov	r1, r8
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	f003 f881 	bl	800f0c8 <__ratio>
 800bfc6:	ec57 6b10 	vmov	r6, r7, d0
 800bfca:	2200      	movs	r2, #0
 800bfcc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bfd0:	4630      	mov	r0, r6
 800bfd2:	4639      	mov	r1, r7
 800bfd4:	f7f4 fdb4 	bl	8000b40 <__aeabi_dcmple>
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	d06f      	beq.n	800c0bc <_strtod_l+0xa34>
 800bfdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d17a      	bne.n	800c0d8 <_strtod_l+0xa50>
 800bfe2:	f1ba 0f00 	cmp.w	sl, #0
 800bfe6:	d158      	bne.n	800c09a <_strtod_l+0xa12>
 800bfe8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d15a      	bne.n	800c0a8 <_strtod_l+0xa20>
 800bff2:	4b64      	ldr	r3, [pc, #400]	@ (800c184 <_strtod_l+0xafc>)
 800bff4:	2200      	movs	r2, #0
 800bff6:	4630      	mov	r0, r6
 800bff8:	4639      	mov	r1, r7
 800bffa:	f7f4 fd97 	bl	8000b2c <__aeabi_dcmplt>
 800bffe:	2800      	cmp	r0, #0
 800c000:	d159      	bne.n	800c0b6 <_strtod_l+0xa2e>
 800c002:	4630      	mov	r0, r6
 800c004:	4639      	mov	r1, r7
 800c006:	4b60      	ldr	r3, [pc, #384]	@ (800c188 <_strtod_l+0xb00>)
 800c008:	2200      	movs	r2, #0
 800c00a:	f7f4 fb1d 	bl	8000648 <__aeabi_dmul>
 800c00e:	4606      	mov	r6, r0
 800c010:	460f      	mov	r7, r1
 800c012:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c016:	9606      	str	r6, [sp, #24]
 800c018:	9307      	str	r3, [sp, #28]
 800c01a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c01e:	4d57      	ldr	r5, [pc, #348]	@ (800c17c <_strtod_l+0xaf4>)
 800c020:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c024:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c026:	401d      	ands	r5, r3
 800c028:	4b58      	ldr	r3, [pc, #352]	@ (800c18c <_strtod_l+0xb04>)
 800c02a:	429d      	cmp	r5, r3
 800c02c:	f040 80b2 	bne.w	800c194 <_strtod_l+0xb0c>
 800c030:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c032:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c036:	ec4b ab10 	vmov	d0, sl, fp
 800c03a:	f002 ff7d 	bl	800ef38 <__ulp>
 800c03e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c042:	ec51 0b10 	vmov	r0, r1, d0
 800c046:	f7f4 faff 	bl	8000648 <__aeabi_dmul>
 800c04a:	4652      	mov	r2, sl
 800c04c:	465b      	mov	r3, fp
 800c04e:	f7f4 f945 	bl	80002dc <__adddf3>
 800c052:	460b      	mov	r3, r1
 800c054:	4949      	ldr	r1, [pc, #292]	@ (800c17c <_strtod_l+0xaf4>)
 800c056:	4a4e      	ldr	r2, [pc, #312]	@ (800c190 <_strtod_l+0xb08>)
 800c058:	4019      	ands	r1, r3
 800c05a:	4291      	cmp	r1, r2
 800c05c:	4682      	mov	sl, r0
 800c05e:	d942      	bls.n	800c0e6 <_strtod_l+0xa5e>
 800c060:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c062:	4b47      	ldr	r3, [pc, #284]	@ (800c180 <_strtod_l+0xaf8>)
 800c064:	429a      	cmp	r2, r3
 800c066:	d103      	bne.n	800c070 <_strtod_l+0x9e8>
 800c068:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c06a:	3301      	adds	r3, #1
 800c06c:	f43f ad2b 	beq.w	800bac6 <_strtod_l+0x43e>
 800c070:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c180 <_strtod_l+0xaf8>
 800c074:	f04f 3aff 	mov.w	sl, #4294967295
 800c078:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c07a:	9805      	ldr	r0, [sp, #20]
 800c07c:	f002 fc28 	bl	800e8d0 <_Bfree>
 800c080:	9805      	ldr	r0, [sp, #20]
 800c082:	4649      	mov	r1, r9
 800c084:	f002 fc24 	bl	800e8d0 <_Bfree>
 800c088:	9805      	ldr	r0, [sp, #20]
 800c08a:	4641      	mov	r1, r8
 800c08c:	f002 fc20 	bl	800e8d0 <_Bfree>
 800c090:	9805      	ldr	r0, [sp, #20]
 800c092:	4621      	mov	r1, r4
 800c094:	f002 fc1c 	bl	800e8d0 <_Bfree>
 800c098:	e618      	b.n	800bccc <_strtod_l+0x644>
 800c09a:	f1ba 0f01 	cmp.w	sl, #1
 800c09e:	d103      	bne.n	800c0a8 <_strtod_l+0xa20>
 800c0a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	f43f ada5 	beq.w	800bbf2 <_strtod_l+0x56a>
 800c0a8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c158 <_strtod_l+0xad0>
 800c0ac:	4f35      	ldr	r7, [pc, #212]	@ (800c184 <_strtod_l+0xafc>)
 800c0ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c0b2:	2600      	movs	r6, #0
 800c0b4:	e7b1      	b.n	800c01a <_strtod_l+0x992>
 800c0b6:	4f34      	ldr	r7, [pc, #208]	@ (800c188 <_strtod_l+0xb00>)
 800c0b8:	2600      	movs	r6, #0
 800c0ba:	e7aa      	b.n	800c012 <_strtod_l+0x98a>
 800c0bc:	4b32      	ldr	r3, [pc, #200]	@ (800c188 <_strtod_l+0xb00>)
 800c0be:	4630      	mov	r0, r6
 800c0c0:	4639      	mov	r1, r7
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	f7f4 fac0 	bl	8000648 <__aeabi_dmul>
 800c0c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0ca:	4606      	mov	r6, r0
 800c0cc:	460f      	mov	r7, r1
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d09f      	beq.n	800c012 <_strtod_l+0x98a>
 800c0d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c0d6:	e7a0      	b.n	800c01a <_strtod_l+0x992>
 800c0d8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c160 <_strtod_l+0xad8>
 800c0dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c0e0:	ec57 6b17 	vmov	r6, r7, d7
 800c0e4:	e799      	b.n	800c01a <_strtod_l+0x992>
 800c0e6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c0ea:	9b08      	ldr	r3, [sp, #32]
 800c0ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d1c1      	bne.n	800c078 <_strtod_l+0x9f0>
 800c0f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c0f8:	0d1b      	lsrs	r3, r3, #20
 800c0fa:	051b      	lsls	r3, r3, #20
 800c0fc:	429d      	cmp	r5, r3
 800c0fe:	d1bb      	bne.n	800c078 <_strtod_l+0x9f0>
 800c100:	4630      	mov	r0, r6
 800c102:	4639      	mov	r1, r7
 800c104:	f7f4 fe00 	bl	8000d08 <__aeabi_d2lz>
 800c108:	f7f4 fa70 	bl	80005ec <__aeabi_l2d>
 800c10c:	4602      	mov	r2, r0
 800c10e:	460b      	mov	r3, r1
 800c110:	4630      	mov	r0, r6
 800c112:	4639      	mov	r1, r7
 800c114:	f7f4 f8e0 	bl	80002d8 <__aeabi_dsub>
 800c118:	460b      	mov	r3, r1
 800c11a:	4602      	mov	r2, r0
 800c11c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c120:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c124:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c126:	ea46 060a 	orr.w	r6, r6, sl
 800c12a:	431e      	orrs	r6, r3
 800c12c:	d06f      	beq.n	800c20e <_strtod_l+0xb86>
 800c12e:	a30e      	add	r3, pc, #56	@ (adr r3, 800c168 <_strtod_l+0xae0>)
 800c130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c134:	f7f4 fcfa 	bl	8000b2c <__aeabi_dcmplt>
 800c138:	2800      	cmp	r0, #0
 800c13a:	f47f accf 	bne.w	800badc <_strtod_l+0x454>
 800c13e:	a30c      	add	r3, pc, #48	@ (adr r3, 800c170 <_strtod_l+0xae8>)
 800c140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c144:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c148:	f7f4 fd0e 	bl	8000b68 <__aeabi_dcmpgt>
 800c14c:	2800      	cmp	r0, #0
 800c14e:	d093      	beq.n	800c078 <_strtod_l+0x9f0>
 800c150:	e4c4      	b.n	800badc <_strtod_l+0x454>
 800c152:	bf00      	nop
 800c154:	f3af 8000 	nop.w
 800c158:	00000000 	.word	0x00000000
 800c15c:	bff00000 	.word	0xbff00000
 800c160:	00000000 	.word	0x00000000
 800c164:	3ff00000 	.word	0x3ff00000
 800c168:	94a03595 	.word	0x94a03595
 800c16c:	3fdfffff 	.word	0x3fdfffff
 800c170:	35afe535 	.word	0x35afe535
 800c174:	3fe00000 	.word	0x3fe00000
 800c178:	000fffff 	.word	0x000fffff
 800c17c:	7ff00000 	.word	0x7ff00000
 800c180:	7fefffff 	.word	0x7fefffff
 800c184:	3ff00000 	.word	0x3ff00000
 800c188:	3fe00000 	.word	0x3fe00000
 800c18c:	7fe00000 	.word	0x7fe00000
 800c190:	7c9fffff 	.word	0x7c9fffff
 800c194:	9b08      	ldr	r3, [sp, #32]
 800c196:	b323      	cbz	r3, 800c1e2 <_strtod_l+0xb5a>
 800c198:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c19c:	d821      	bhi.n	800c1e2 <_strtod_l+0xb5a>
 800c19e:	a328      	add	r3, pc, #160	@ (adr r3, 800c240 <_strtod_l+0xbb8>)
 800c1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a4:	4630      	mov	r0, r6
 800c1a6:	4639      	mov	r1, r7
 800c1a8:	f7f4 fcca 	bl	8000b40 <__aeabi_dcmple>
 800c1ac:	b1a0      	cbz	r0, 800c1d8 <_strtod_l+0xb50>
 800c1ae:	4639      	mov	r1, r7
 800c1b0:	4630      	mov	r0, r6
 800c1b2:	f7f4 fd21 	bl	8000bf8 <__aeabi_d2uiz>
 800c1b6:	2801      	cmp	r0, #1
 800c1b8:	bf38      	it	cc
 800c1ba:	2001      	movcc	r0, #1
 800c1bc:	f7f4 f9ca 	bl	8000554 <__aeabi_ui2d>
 800c1c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1c2:	4606      	mov	r6, r0
 800c1c4:	460f      	mov	r7, r1
 800c1c6:	b9fb      	cbnz	r3, 800c208 <_strtod_l+0xb80>
 800c1c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c1cc:	9014      	str	r0, [sp, #80]	@ 0x50
 800c1ce:	9315      	str	r3, [sp, #84]	@ 0x54
 800c1d0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c1d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c1d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c1da:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c1de:	1b5b      	subs	r3, r3, r5
 800c1e0:	9311      	str	r3, [sp, #68]	@ 0x44
 800c1e2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c1e6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c1ea:	f002 fea5 	bl	800ef38 <__ulp>
 800c1ee:	4650      	mov	r0, sl
 800c1f0:	ec53 2b10 	vmov	r2, r3, d0
 800c1f4:	4659      	mov	r1, fp
 800c1f6:	f7f4 fa27 	bl	8000648 <__aeabi_dmul>
 800c1fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c1fe:	f7f4 f86d 	bl	80002dc <__adddf3>
 800c202:	4682      	mov	sl, r0
 800c204:	468b      	mov	fp, r1
 800c206:	e770      	b.n	800c0ea <_strtod_l+0xa62>
 800c208:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c20c:	e7e0      	b.n	800c1d0 <_strtod_l+0xb48>
 800c20e:	a30e      	add	r3, pc, #56	@ (adr r3, 800c248 <_strtod_l+0xbc0>)
 800c210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c214:	f7f4 fc8a 	bl	8000b2c <__aeabi_dcmplt>
 800c218:	e798      	b.n	800c14c <_strtod_l+0xac4>
 800c21a:	2300      	movs	r3, #0
 800c21c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c21e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c220:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c222:	6013      	str	r3, [r2, #0]
 800c224:	f7ff ba6d 	b.w	800b702 <_strtod_l+0x7a>
 800c228:	2a65      	cmp	r2, #101	@ 0x65
 800c22a:	f43f ab66 	beq.w	800b8fa <_strtod_l+0x272>
 800c22e:	2a45      	cmp	r2, #69	@ 0x45
 800c230:	f43f ab63 	beq.w	800b8fa <_strtod_l+0x272>
 800c234:	2301      	movs	r3, #1
 800c236:	f7ff bb9e 	b.w	800b976 <_strtod_l+0x2ee>
 800c23a:	bf00      	nop
 800c23c:	f3af 8000 	nop.w
 800c240:	ffc00000 	.word	0xffc00000
 800c244:	41dfffff 	.word	0x41dfffff
 800c248:	94a03595 	.word	0x94a03595
 800c24c:	3fcfffff 	.word	0x3fcfffff

0800c250 <_strtod_r>:
 800c250:	4b01      	ldr	r3, [pc, #4]	@ (800c258 <_strtod_r+0x8>)
 800c252:	f7ff ba19 	b.w	800b688 <_strtod_l>
 800c256:	bf00      	nop
 800c258:	2000009c 	.word	0x2000009c

0800c25c <__cvt>:
 800c25c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c260:	ec57 6b10 	vmov	r6, r7, d0
 800c264:	2f00      	cmp	r7, #0
 800c266:	460c      	mov	r4, r1
 800c268:	4619      	mov	r1, r3
 800c26a:	463b      	mov	r3, r7
 800c26c:	bfbb      	ittet	lt
 800c26e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c272:	461f      	movlt	r7, r3
 800c274:	2300      	movge	r3, #0
 800c276:	232d      	movlt	r3, #45	@ 0x2d
 800c278:	700b      	strb	r3, [r1, #0]
 800c27a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c27c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c280:	4691      	mov	r9, r2
 800c282:	f023 0820 	bic.w	r8, r3, #32
 800c286:	bfbc      	itt	lt
 800c288:	4632      	movlt	r2, r6
 800c28a:	4616      	movlt	r6, r2
 800c28c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c290:	d005      	beq.n	800c29e <__cvt+0x42>
 800c292:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c296:	d100      	bne.n	800c29a <__cvt+0x3e>
 800c298:	3401      	adds	r4, #1
 800c29a:	2102      	movs	r1, #2
 800c29c:	e000      	b.n	800c2a0 <__cvt+0x44>
 800c29e:	2103      	movs	r1, #3
 800c2a0:	ab03      	add	r3, sp, #12
 800c2a2:	9301      	str	r3, [sp, #4]
 800c2a4:	ab02      	add	r3, sp, #8
 800c2a6:	9300      	str	r3, [sp, #0]
 800c2a8:	ec47 6b10 	vmov	d0, r6, r7
 800c2ac:	4653      	mov	r3, sl
 800c2ae:	4622      	mov	r2, r4
 800c2b0:	f001 f8be 	bl	800d430 <_dtoa_r>
 800c2b4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c2b8:	4605      	mov	r5, r0
 800c2ba:	d119      	bne.n	800c2f0 <__cvt+0x94>
 800c2bc:	f019 0f01 	tst.w	r9, #1
 800c2c0:	d00e      	beq.n	800c2e0 <__cvt+0x84>
 800c2c2:	eb00 0904 	add.w	r9, r0, r4
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	4630      	mov	r0, r6
 800c2cc:	4639      	mov	r1, r7
 800c2ce:	f7f4 fc23 	bl	8000b18 <__aeabi_dcmpeq>
 800c2d2:	b108      	cbz	r0, 800c2d8 <__cvt+0x7c>
 800c2d4:	f8cd 900c 	str.w	r9, [sp, #12]
 800c2d8:	2230      	movs	r2, #48	@ 0x30
 800c2da:	9b03      	ldr	r3, [sp, #12]
 800c2dc:	454b      	cmp	r3, r9
 800c2de:	d31e      	bcc.n	800c31e <__cvt+0xc2>
 800c2e0:	9b03      	ldr	r3, [sp, #12]
 800c2e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c2e4:	1b5b      	subs	r3, r3, r5
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	6013      	str	r3, [r2, #0]
 800c2ea:	b004      	add	sp, #16
 800c2ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c2f4:	eb00 0904 	add.w	r9, r0, r4
 800c2f8:	d1e5      	bne.n	800c2c6 <__cvt+0x6a>
 800c2fa:	7803      	ldrb	r3, [r0, #0]
 800c2fc:	2b30      	cmp	r3, #48	@ 0x30
 800c2fe:	d10a      	bne.n	800c316 <__cvt+0xba>
 800c300:	2200      	movs	r2, #0
 800c302:	2300      	movs	r3, #0
 800c304:	4630      	mov	r0, r6
 800c306:	4639      	mov	r1, r7
 800c308:	f7f4 fc06 	bl	8000b18 <__aeabi_dcmpeq>
 800c30c:	b918      	cbnz	r0, 800c316 <__cvt+0xba>
 800c30e:	f1c4 0401 	rsb	r4, r4, #1
 800c312:	f8ca 4000 	str.w	r4, [sl]
 800c316:	f8da 3000 	ldr.w	r3, [sl]
 800c31a:	4499      	add	r9, r3
 800c31c:	e7d3      	b.n	800c2c6 <__cvt+0x6a>
 800c31e:	1c59      	adds	r1, r3, #1
 800c320:	9103      	str	r1, [sp, #12]
 800c322:	701a      	strb	r2, [r3, #0]
 800c324:	e7d9      	b.n	800c2da <__cvt+0x7e>

0800c326 <__exponent>:
 800c326:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c328:	2900      	cmp	r1, #0
 800c32a:	bfba      	itte	lt
 800c32c:	4249      	neglt	r1, r1
 800c32e:	232d      	movlt	r3, #45	@ 0x2d
 800c330:	232b      	movge	r3, #43	@ 0x2b
 800c332:	2909      	cmp	r1, #9
 800c334:	7002      	strb	r2, [r0, #0]
 800c336:	7043      	strb	r3, [r0, #1]
 800c338:	dd29      	ble.n	800c38e <__exponent+0x68>
 800c33a:	f10d 0307 	add.w	r3, sp, #7
 800c33e:	461d      	mov	r5, r3
 800c340:	270a      	movs	r7, #10
 800c342:	461a      	mov	r2, r3
 800c344:	fbb1 f6f7 	udiv	r6, r1, r7
 800c348:	fb07 1416 	mls	r4, r7, r6, r1
 800c34c:	3430      	adds	r4, #48	@ 0x30
 800c34e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c352:	460c      	mov	r4, r1
 800c354:	2c63      	cmp	r4, #99	@ 0x63
 800c356:	f103 33ff 	add.w	r3, r3, #4294967295
 800c35a:	4631      	mov	r1, r6
 800c35c:	dcf1      	bgt.n	800c342 <__exponent+0x1c>
 800c35e:	3130      	adds	r1, #48	@ 0x30
 800c360:	1e94      	subs	r4, r2, #2
 800c362:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c366:	1c41      	adds	r1, r0, #1
 800c368:	4623      	mov	r3, r4
 800c36a:	42ab      	cmp	r3, r5
 800c36c:	d30a      	bcc.n	800c384 <__exponent+0x5e>
 800c36e:	f10d 0309 	add.w	r3, sp, #9
 800c372:	1a9b      	subs	r3, r3, r2
 800c374:	42ac      	cmp	r4, r5
 800c376:	bf88      	it	hi
 800c378:	2300      	movhi	r3, #0
 800c37a:	3302      	adds	r3, #2
 800c37c:	4403      	add	r3, r0
 800c37e:	1a18      	subs	r0, r3, r0
 800c380:	b003      	add	sp, #12
 800c382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c384:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c388:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c38c:	e7ed      	b.n	800c36a <__exponent+0x44>
 800c38e:	2330      	movs	r3, #48	@ 0x30
 800c390:	3130      	adds	r1, #48	@ 0x30
 800c392:	7083      	strb	r3, [r0, #2]
 800c394:	70c1      	strb	r1, [r0, #3]
 800c396:	1d03      	adds	r3, r0, #4
 800c398:	e7f1      	b.n	800c37e <__exponent+0x58>
	...

0800c39c <_printf_float>:
 800c39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3a0:	b08d      	sub	sp, #52	@ 0x34
 800c3a2:	460c      	mov	r4, r1
 800c3a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c3a8:	4616      	mov	r6, r2
 800c3aa:	461f      	mov	r7, r3
 800c3ac:	4605      	mov	r5, r0
 800c3ae:	f000 ff21 	bl	800d1f4 <_localeconv_r>
 800c3b2:	6803      	ldr	r3, [r0, #0]
 800c3b4:	9304      	str	r3, [sp, #16]
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7f3 ff82 	bl	80002c0 <strlen>
 800c3bc:	2300      	movs	r3, #0
 800c3be:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3c0:	f8d8 3000 	ldr.w	r3, [r8]
 800c3c4:	9005      	str	r0, [sp, #20]
 800c3c6:	3307      	adds	r3, #7
 800c3c8:	f023 0307 	bic.w	r3, r3, #7
 800c3cc:	f103 0208 	add.w	r2, r3, #8
 800c3d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c3d4:	f8d4 b000 	ldr.w	fp, [r4]
 800c3d8:	f8c8 2000 	str.w	r2, [r8]
 800c3dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c3e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c3e4:	9307      	str	r3, [sp, #28]
 800c3e6:	f8cd 8018 	str.w	r8, [sp, #24]
 800c3ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c3ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3f2:	4b9c      	ldr	r3, [pc, #624]	@ (800c664 <_printf_float+0x2c8>)
 800c3f4:	f04f 32ff 	mov.w	r2, #4294967295
 800c3f8:	f7f4 fbc0 	bl	8000b7c <__aeabi_dcmpun>
 800c3fc:	bb70      	cbnz	r0, 800c45c <_printf_float+0xc0>
 800c3fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c402:	4b98      	ldr	r3, [pc, #608]	@ (800c664 <_printf_float+0x2c8>)
 800c404:	f04f 32ff 	mov.w	r2, #4294967295
 800c408:	f7f4 fb9a 	bl	8000b40 <__aeabi_dcmple>
 800c40c:	bb30      	cbnz	r0, 800c45c <_printf_float+0xc0>
 800c40e:	2200      	movs	r2, #0
 800c410:	2300      	movs	r3, #0
 800c412:	4640      	mov	r0, r8
 800c414:	4649      	mov	r1, r9
 800c416:	f7f4 fb89 	bl	8000b2c <__aeabi_dcmplt>
 800c41a:	b110      	cbz	r0, 800c422 <_printf_float+0x86>
 800c41c:	232d      	movs	r3, #45	@ 0x2d
 800c41e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c422:	4a91      	ldr	r2, [pc, #580]	@ (800c668 <_printf_float+0x2cc>)
 800c424:	4b91      	ldr	r3, [pc, #580]	@ (800c66c <_printf_float+0x2d0>)
 800c426:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c42a:	bf94      	ite	ls
 800c42c:	4690      	movls	r8, r2
 800c42e:	4698      	movhi	r8, r3
 800c430:	2303      	movs	r3, #3
 800c432:	6123      	str	r3, [r4, #16]
 800c434:	f02b 0304 	bic.w	r3, fp, #4
 800c438:	6023      	str	r3, [r4, #0]
 800c43a:	f04f 0900 	mov.w	r9, #0
 800c43e:	9700      	str	r7, [sp, #0]
 800c440:	4633      	mov	r3, r6
 800c442:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c444:	4621      	mov	r1, r4
 800c446:	4628      	mov	r0, r5
 800c448:	f000 f9d2 	bl	800c7f0 <_printf_common>
 800c44c:	3001      	adds	r0, #1
 800c44e:	f040 808d 	bne.w	800c56c <_printf_float+0x1d0>
 800c452:	f04f 30ff 	mov.w	r0, #4294967295
 800c456:	b00d      	add	sp, #52	@ 0x34
 800c458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c45c:	4642      	mov	r2, r8
 800c45e:	464b      	mov	r3, r9
 800c460:	4640      	mov	r0, r8
 800c462:	4649      	mov	r1, r9
 800c464:	f7f4 fb8a 	bl	8000b7c <__aeabi_dcmpun>
 800c468:	b140      	cbz	r0, 800c47c <_printf_float+0xe0>
 800c46a:	464b      	mov	r3, r9
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	bfbc      	itt	lt
 800c470:	232d      	movlt	r3, #45	@ 0x2d
 800c472:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c476:	4a7e      	ldr	r2, [pc, #504]	@ (800c670 <_printf_float+0x2d4>)
 800c478:	4b7e      	ldr	r3, [pc, #504]	@ (800c674 <_printf_float+0x2d8>)
 800c47a:	e7d4      	b.n	800c426 <_printf_float+0x8a>
 800c47c:	6863      	ldr	r3, [r4, #4]
 800c47e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c482:	9206      	str	r2, [sp, #24]
 800c484:	1c5a      	adds	r2, r3, #1
 800c486:	d13b      	bne.n	800c500 <_printf_float+0x164>
 800c488:	2306      	movs	r3, #6
 800c48a:	6063      	str	r3, [r4, #4]
 800c48c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c490:	2300      	movs	r3, #0
 800c492:	6022      	str	r2, [r4, #0]
 800c494:	9303      	str	r3, [sp, #12]
 800c496:	ab0a      	add	r3, sp, #40	@ 0x28
 800c498:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c49c:	ab09      	add	r3, sp, #36	@ 0x24
 800c49e:	9300      	str	r3, [sp, #0]
 800c4a0:	6861      	ldr	r1, [r4, #4]
 800c4a2:	ec49 8b10 	vmov	d0, r8, r9
 800c4a6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c4aa:	4628      	mov	r0, r5
 800c4ac:	f7ff fed6 	bl	800c25c <__cvt>
 800c4b0:	9b06      	ldr	r3, [sp, #24]
 800c4b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c4b4:	2b47      	cmp	r3, #71	@ 0x47
 800c4b6:	4680      	mov	r8, r0
 800c4b8:	d129      	bne.n	800c50e <_printf_float+0x172>
 800c4ba:	1cc8      	adds	r0, r1, #3
 800c4bc:	db02      	blt.n	800c4c4 <_printf_float+0x128>
 800c4be:	6863      	ldr	r3, [r4, #4]
 800c4c0:	4299      	cmp	r1, r3
 800c4c2:	dd41      	ble.n	800c548 <_printf_float+0x1ac>
 800c4c4:	f1aa 0a02 	sub.w	sl, sl, #2
 800c4c8:	fa5f fa8a 	uxtb.w	sl, sl
 800c4cc:	3901      	subs	r1, #1
 800c4ce:	4652      	mov	r2, sl
 800c4d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c4d4:	9109      	str	r1, [sp, #36]	@ 0x24
 800c4d6:	f7ff ff26 	bl	800c326 <__exponent>
 800c4da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c4dc:	1813      	adds	r3, r2, r0
 800c4de:	2a01      	cmp	r2, #1
 800c4e0:	4681      	mov	r9, r0
 800c4e2:	6123      	str	r3, [r4, #16]
 800c4e4:	dc02      	bgt.n	800c4ec <_printf_float+0x150>
 800c4e6:	6822      	ldr	r2, [r4, #0]
 800c4e8:	07d2      	lsls	r2, r2, #31
 800c4ea:	d501      	bpl.n	800c4f0 <_printf_float+0x154>
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	6123      	str	r3, [r4, #16]
 800c4f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d0a2      	beq.n	800c43e <_printf_float+0xa2>
 800c4f8:	232d      	movs	r3, #45	@ 0x2d
 800c4fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c4fe:	e79e      	b.n	800c43e <_printf_float+0xa2>
 800c500:	9a06      	ldr	r2, [sp, #24]
 800c502:	2a47      	cmp	r2, #71	@ 0x47
 800c504:	d1c2      	bne.n	800c48c <_printf_float+0xf0>
 800c506:	2b00      	cmp	r3, #0
 800c508:	d1c0      	bne.n	800c48c <_printf_float+0xf0>
 800c50a:	2301      	movs	r3, #1
 800c50c:	e7bd      	b.n	800c48a <_printf_float+0xee>
 800c50e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c512:	d9db      	bls.n	800c4cc <_printf_float+0x130>
 800c514:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c518:	d118      	bne.n	800c54c <_printf_float+0x1b0>
 800c51a:	2900      	cmp	r1, #0
 800c51c:	6863      	ldr	r3, [r4, #4]
 800c51e:	dd0b      	ble.n	800c538 <_printf_float+0x19c>
 800c520:	6121      	str	r1, [r4, #16]
 800c522:	b913      	cbnz	r3, 800c52a <_printf_float+0x18e>
 800c524:	6822      	ldr	r2, [r4, #0]
 800c526:	07d0      	lsls	r0, r2, #31
 800c528:	d502      	bpl.n	800c530 <_printf_float+0x194>
 800c52a:	3301      	adds	r3, #1
 800c52c:	440b      	add	r3, r1
 800c52e:	6123      	str	r3, [r4, #16]
 800c530:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c532:	f04f 0900 	mov.w	r9, #0
 800c536:	e7db      	b.n	800c4f0 <_printf_float+0x154>
 800c538:	b913      	cbnz	r3, 800c540 <_printf_float+0x1a4>
 800c53a:	6822      	ldr	r2, [r4, #0]
 800c53c:	07d2      	lsls	r2, r2, #31
 800c53e:	d501      	bpl.n	800c544 <_printf_float+0x1a8>
 800c540:	3302      	adds	r3, #2
 800c542:	e7f4      	b.n	800c52e <_printf_float+0x192>
 800c544:	2301      	movs	r3, #1
 800c546:	e7f2      	b.n	800c52e <_printf_float+0x192>
 800c548:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c54c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c54e:	4299      	cmp	r1, r3
 800c550:	db05      	blt.n	800c55e <_printf_float+0x1c2>
 800c552:	6823      	ldr	r3, [r4, #0]
 800c554:	6121      	str	r1, [r4, #16]
 800c556:	07d8      	lsls	r0, r3, #31
 800c558:	d5ea      	bpl.n	800c530 <_printf_float+0x194>
 800c55a:	1c4b      	adds	r3, r1, #1
 800c55c:	e7e7      	b.n	800c52e <_printf_float+0x192>
 800c55e:	2900      	cmp	r1, #0
 800c560:	bfd4      	ite	le
 800c562:	f1c1 0202 	rsble	r2, r1, #2
 800c566:	2201      	movgt	r2, #1
 800c568:	4413      	add	r3, r2
 800c56a:	e7e0      	b.n	800c52e <_printf_float+0x192>
 800c56c:	6823      	ldr	r3, [r4, #0]
 800c56e:	055a      	lsls	r2, r3, #21
 800c570:	d407      	bmi.n	800c582 <_printf_float+0x1e6>
 800c572:	6923      	ldr	r3, [r4, #16]
 800c574:	4642      	mov	r2, r8
 800c576:	4631      	mov	r1, r6
 800c578:	4628      	mov	r0, r5
 800c57a:	47b8      	blx	r7
 800c57c:	3001      	adds	r0, #1
 800c57e:	d12b      	bne.n	800c5d8 <_printf_float+0x23c>
 800c580:	e767      	b.n	800c452 <_printf_float+0xb6>
 800c582:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c586:	f240 80dd 	bls.w	800c744 <_printf_float+0x3a8>
 800c58a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c58e:	2200      	movs	r2, #0
 800c590:	2300      	movs	r3, #0
 800c592:	f7f4 fac1 	bl	8000b18 <__aeabi_dcmpeq>
 800c596:	2800      	cmp	r0, #0
 800c598:	d033      	beq.n	800c602 <_printf_float+0x266>
 800c59a:	4a37      	ldr	r2, [pc, #220]	@ (800c678 <_printf_float+0x2dc>)
 800c59c:	2301      	movs	r3, #1
 800c59e:	4631      	mov	r1, r6
 800c5a0:	4628      	mov	r0, r5
 800c5a2:	47b8      	blx	r7
 800c5a4:	3001      	adds	r0, #1
 800c5a6:	f43f af54 	beq.w	800c452 <_printf_float+0xb6>
 800c5aa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c5ae:	4543      	cmp	r3, r8
 800c5b0:	db02      	blt.n	800c5b8 <_printf_float+0x21c>
 800c5b2:	6823      	ldr	r3, [r4, #0]
 800c5b4:	07d8      	lsls	r0, r3, #31
 800c5b6:	d50f      	bpl.n	800c5d8 <_printf_float+0x23c>
 800c5b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5bc:	4631      	mov	r1, r6
 800c5be:	4628      	mov	r0, r5
 800c5c0:	47b8      	blx	r7
 800c5c2:	3001      	adds	r0, #1
 800c5c4:	f43f af45 	beq.w	800c452 <_printf_float+0xb6>
 800c5c8:	f04f 0900 	mov.w	r9, #0
 800c5cc:	f108 38ff 	add.w	r8, r8, #4294967295
 800c5d0:	f104 0a1a 	add.w	sl, r4, #26
 800c5d4:	45c8      	cmp	r8, r9
 800c5d6:	dc09      	bgt.n	800c5ec <_printf_float+0x250>
 800c5d8:	6823      	ldr	r3, [r4, #0]
 800c5da:	079b      	lsls	r3, r3, #30
 800c5dc:	f100 8103 	bmi.w	800c7e6 <_printf_float+0x44a>
 800c5e0:	68e0      	ldr	r0, [r4, #12]
 800c5e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5e4:	4298      	cmp	r0, r3
 800c5e6:	bfb8      	it	lt
 800c5e8:	4618      	movlt	r0, r3
 800c5ea:	e734      	b.n	800c456 <_printf_float+0xba>
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	4652      	mov	r2, sl
 800c5f0:	4631      	mov	r1, r6
 800c5f2:	4628      	mov	r0, r5
 800c5f4:	47b8      	blx	r7
 800c5f6:	3001      	adds	r0, #1
 800c5f8:	f43f af2b 	beq.w	800c452 <_printf_float+0xb6>
 800c5fc:	f109 0901 	add.w	r9, r9, #1
 800c600:	e7e8      	b.n	800c5d4 <_printf_float+0x238>
 800c602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c604:	2b00      	cmp	r3, #0
 800c606:	dc39      	bgt.n	800c67c <_printf_float+0x2e0>
 800c608:	4a1b      	ldr	r2, [pc, #108]	@ (800c678 <_printf_float+0x2dc>)
 800c60a:	2301      	movs	r3, #1
 800c60c:	4631      	mov	r1, r6
 800c60e:	4628      	mov	r0, r5
 800c610:	47b8      	blx	r7
 800c612:	3001      	adds	r0, #1
 800c614:	f43f af1d 	beq.w	800c452 <_printf_float+0xb6>
 800c618:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c61c:	ea59 0303 	orrs.w	r3, r9, r3
 800c620:	d102      	bne.n	800c628 <_printf_float+0x28c>
 800c622:	6823      	ldr	r3, [r4, #0]
 800c624:	07d9      	lsls	r1, r3, #31
 800c626:	d5d7      	bpl.n	800c5d8 <_printf_float+0x23c>
 800c628:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c62c:	4631      	mov	r1, r6
 800c62e:	4628      	mov	r0, r5
 800c630:	47b8      	blx	r7
 800c632:	3001      	adds	r0, #1
 800c634:	f43f af0d 	beq.w	800c452 <_printf_float+0xb6>
 800c638:	f04f 0a00 	mov.w	sl, #0
 800c63c:	f104 0b1a 	add.w	fp, r4, #26
 800c640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c642:	425b      	negs	r3, r3
 800c644:	4553      	cmp	r3, sl
 800c646:	dc01      	bgt.n	800c64c <_printf_float+0x2b0>
 800c648:	464b      	mov	r3, r9
 800c64a:	e793      	b.n	800c574 <_printf_float+0x1d8>
 800c64c:	2301      	movs	r3, #1
 800c64e:	465a      	mov	r2, fp
 800c650:	4631      	mov	r1, r6
 800c652:	4628      	mov	r0, r5
 800c654:	47b8      	blx	r7
 800c656:	3001      	adds	r0, #1
 800c658:	f43f aefb 	beq.w	800c452 <_printf_float+0xb6>
 800c65c:	f10a 0a01 	add.w	sl, sl, #1
 800c660:	e7ee      	b.n	800c640 <_printf_float+0x2a4>
 800c662:	bf00      	nop
 800c664:	7fefffff 	.word	0x7fefffff
 800c668:	0800fe58 	.word	0x0800fe58
 800c66c:	0800fe5c 	.word	0x0800fe5c
 800c670:	0800fe60 	.word	0x0800fe60
 800c674:	0800fe64 	.word	0x0800fe64
 800c678:	0800fe68 	.word	0x0800fe68
 800c67c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c67e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c682:	4553      	cmp	r3, sl
 800c684:	bfa8      	it	ge
 800c686:	4653      	movge	r3, sl
 800c688:	2b00      	cmp	r3, #0
 800c68a:	4699      	mov	r9, r3
 800c68c:	dc36      	bgt.n	800c6fc <_printf_float+0x360>
 800c68e:	f04f 0b00 	mov.w	fp, #0
 800c692:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c696:	f104 021a 	add.w	r2, r4, #26
 800c69a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c69c:	9306      	str	r3, [sp, #24]
 800c69e:	eba3 0309 	sub.w	r3, r3, r9
 800c6a2:	455b      	cmp	r3, fp
 800c6a4:	dc31      	bgt.n	800c70a <_printf_float+0x36e>
 800c6a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6a8:	459a      	cmp	sl, r3
 800c6aa:	dc3a      	bgt.n	800c722 <_printf_float+0x386>
 800c6ac:	6823      	ldr	r3, [r4, #0]
 800c6ae:	07da      	lsls	r2, r3, #31
 800c6b0:	d437      	bmi.n	800c722 <_printf_float+0x386>
 800c6b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6b4:	ebaa 0903 	sub.w	r9, sl, r3
 800c6b8:	9b06      	ldr	r3, [sp, #24]
 800c6ba:	ebaa 0303 	sub.w	r3, sl, r3
 800c6be:	4599      	cmp	r9, r3
 800c6c0:	bfa8      	it	ge
 800c6c2:	4699      	movge	r9, r3
 800c6c4:	f1b9 0f00 	cmp.w	r9, #0
 800c6c8:	dc33      	bgt.n	800c732 <_printf_float+0x396>
 800c6ca:	f04f 0800 	mov.w	r8, #0
 800c6ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c6d2:	f104 0b1a 	add.w	fp, r4, #26
 800c6d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6d8:	ebaa 0303 	sub.w	r3, sl, r3
 800c6dc:	eba3 0309 	sub.w	r3, r3, r9
 800c6e0:	4543      	cmp	r3, r8
 800c6e2:	f77f af79 	ble.w	800c5d8 <_printf_float+0x23c>
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	465a      	mov	r2, fp
 800c6ea:	4631      	mov	r1, r6
 800c6ec:	4628      	mov	r0, r5
 800c6ee:	47b8      	blx	r7
 800c6f0:	3001      	adds	r0, #1
 800c6f2:	f43f aeae 	beq.w	800c452 <_printf_float+0xb6>
 800c6f6:	f108 0801 	add.w	r8, r8, #1
 800c6fa:	e7ec      	b.n	800c6d6 <_printf_float+0x33a>
 800c6fc:	4642      	mov	r2, r8
 800c6fe:	4631      	mov	r1, r6
 800c700:	4628      	mov	r0, r5
 800c702:	47b8      	blx	r7
 800c704:	3001      	adds	r0, #1
 800c706:	d1c2      	bne.n	800c68e <_printf_float+0x2f2>
 800c708:	e6a3      	b.n	800c452 <_printf_float+0xb6>
 800c70a:	2301      	movs	r3, #1
 800c70c:	4631      	mov	r1, r6
 800c70e:	4628      	mov	r0, r5
 800c710:	9206      	str	r2, [sp, #24]
 800c712:	47b8      	blx	r7
 800c714:	3001      	adds	r0, #1
 800c716:	f43f ae9c 	beq.w	800c452 <_printf_float+0xb6>
 800c71a:	9a06      	ldr	r2, [sp, #24]
 800c71c:	f10b 0b01 	add.w	fp, fp, #1
 800c720:	e7bb      	b.n	800c69a <_printf_float+0x2fe>
 800c722:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c726:	4631      	mov	r1, r6
 800c728:	4628      	mov	r0, r5
 800c72a:	47b8      	blx	r7
 800c72c:	3001      	adds	r0, #1
 800c72e:	d1c0      	bne.n	800c6b2 <_printf_float+0x316>
 800c730:	e68f      	b.n	800c452 <_printf_float+0xb6>
 800c732:	9a06      	ldr	r2, [sp, #24]
 800c734:	464b      	mov	r3, r9
 800c736:	4442      	add	r2, r8
 800c738:	4631      	mov	r1, r6
 800c73a:	4628      	mov	r0, r5
 800c73c:	47b8      	blx	r7
 800c73e:	3001      	adds	r0, #1
 800c740:	d1c3      	bne.n	800c6ca <_printf_float+0x32e>
 800c742:	e686      	b.n	800c452 <_printf_float+0xb6>
 800c744:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c748:	f1ba 0f01 	cmp.w	sl, #1
 800c74c:	dc01      	bgt.n	800c752 <_printf_float+0x3b6>
 800c74e:	07db      	lsls	r3, r3, #31
 800c750:	d536      	bpl.n	800c7c0 <_printf_float+0x424>
 800c752:	2301      	movs	r3, #1
 800c754:	4642      	mov	r2, r8
 800c756:	4631      	mov	r1, r6
 800c758:	4628      	mov	r0, r5
 800c75a:	47b8      	blx	r7
 800c75c:	3001      	adds	r0, #1
 800c75e:	f43f ae78 	beq.w	800c452 <_printf_float+0xb6>
 800c762:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c766:	4631      	mov	r1, r6
 800c768:	4628      	mov	r0, r5
 800c76a:	47b8      	blx	r7
 800c76c:	3001      	adds	r0, #1
 800c76e:	f43f ae70 	beq.w	800c452 <_printf_float+0xb6>
 800c772:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c776:	2200      	movs	r2, #0
 800c778:	2300      	movs	r3, #0
 800c77a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c77e:	f7f4 f9cb 	bl	8000b18 <__aeabi_dcmpeq>
 800c782:	b9c0      	cbnz	r0, 800c7b6 <_printf_float+0x41a>
 800c784:	4653      	mov	r3, sl
 800c786:	f108 0201 	add.w	r2, r8, #1
 800c78a:	4631      	mov	r1, r6
 800c78c:	4628      	mov	r0, r5
 800c78e:	47b8      	blx	r7
 800c790:	3001      	adds	r0, #1
 800c792:	d10c      	bne.n	800c7ae <_printf_float+0x412>
 800c794:	e65d      	b.n	800c452 <_printf_float+0xb6>
 800c796:	2301      	movs	r3, #1
 800c798:	465a      	mov	r2, fp
 800c79a:	4631      	mov	r1, r6
 800c79c:	4628      	mov	r0, r5
 800c79e:	47b8      	blx	r7
 800c7a0:	3001      	adds	r0, #1
 800c7a2:	f43f ae56 	beq.w	800c452 <_printf_float+0xb6>
 800c7a6:	f108 0801 	add.w	r8, r8, #1
 800c7aa:	45d0      	cmp	r8, sl
 800c7ac:	dbf3      	blt.n	800c796 <_printf_float+0x3fa>
 800c7ae:	464b      	mov	r3, r9
 800c7b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c7b4:	e6df      	b.n	800c576 <_printf_float+0x1da>
 800c7b6:	f04f 0800 	mov.w	r8, #0
 800c7ba:	f104 0b1a 	add.w	fp, r4, #26
 800c7be:	e7f4      	b.n	800c7aa <_printf_float+0x40e>
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	4642      	mov	r2, r8
 800c7c4:	e7e1      	b.n	800c78a <_printf_float+0x3ee>
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	464a      	mov	r2, r9
 800c7ca:	4631      	mov	r1, r6
 800c7cc:	4628      	mov	r0, r5
 800c7ce:	47b8      	blx	r7
 800c7d0:	3001      	adds	r0, #1
 800c7d2:	f43f ae3e 	beq.w	800c452 <_printf_float+0xb6>
 800c7d6:	f108 0801 	add.w	r8, r8, #1
 800c7da:	68e3      	ldr	r3, [r4, #12]
 800c7dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c7de:	1a5b      	subs	r3, r3, r1
 800c7e0:	4543      	cmp	r3, r8
 800c7e2:	dcf0      	bgt.n	800c7c6 <_printf_float+0x42a>
 800c7e4:	e6fc      	b.n	800c5e0 <_printf_float+0x244>
 800c7e6:	f04f 0800 	mov.w	r8, #0
 800c7ea:	f104 0919 	add.w	r9, r4, #25
 800c7ee:	e7f4      	b.n	800c7da <_printf_float+0x43e>

0800c7f0 <_printf_common>:
 800c7f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7f4:	4616      	mov	r6, r2
 800c7f6:	4698      	mov	r8, r3
 800c7f8:	688a      	ldr	r2, [r1, #8]
 800c7fa:	690b      	ldr	r3, [r1, #16]
 800c7fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c800:	4293      	cmp	r3, r2
 800c802:	bfb8      	it	lt
 800c804:	4613      	movlt	r3, r2
 800c806:	6033      	str	r3, [r6, #0]
 800c808:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c80c:	4607      	mov	r7, r0
 800c80e:	460c      	mov	r4, r1
 800c810:	b10a      	cbz	r2, 800c816 <_printf_common+0x26>
 800c812:	3301      	adds	r3, #1
 800c814:	6033      	str	r3, [r6, #0]
 800c816:	6823      	ldr	r3, [r4, #0]
 800c818:	0699      	lsls	r1, r3, #26
 800c81a:	bf42      	ittt	mi
 800c81c:	6833      	ldrmi	r3, [r6, #0]
 800c81e:	3302      	addmi	r3, #2
 800c820:	6033      	strmi	r3, [r6, #0]
 800c822:	6825      	ldr	r5, [r4, #0]
 800c824:	f015 0506 	ands.w	r5, r5, #6
 800c828:	d106      	bne.n	800c838 <_printf_common+0x48>
 800c82a:	f104 0a19 	add.w	sl, r4, #25
 800c82e:	68e3      	ldr	r3, [r4, #12]
 800c830:	6832      	ldr	r2, [r6, #0]
 800c832:	1a9b      	subs	r3, r3, r2
 800c834:	42ab      	cmp	r3, r5
 800c836:	dc26      	bgt.n	800c886 <_printf_common+0x96>
 800c838:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c83c:	6822      	ldr	r2, [r4, #0]
 800c83e:	3b00      	subs	r3, #0
 800c840:	bf18      	it	ne
 800c842:	2301      	movne	r3, #1
 800c844:	0692      	lsls	r2, r2, #26
 800c846:	d42b      	bmi.n	800c8a0 <_printf_common+0xb0>
 800c848:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c84c:	4641      	mov	r1, r8
 800c84e:	4638      	mov	r0, r7
 800c850:	47c8      	blx	r9
 800c852:	3001      	adds	r0, #1
 800c854:	d01e      	beq.n	800c894 <_printf_common+0xa4>
 800c856:	6823      	ldr	r3, [r4, #0]
 800c858:	6922      	ldr	r2, [r4, #16]
 800c85a:	f003 0306 	and.w	r3, r3, #6
 800c85e:	2b04      	cmp	r3, #4
 800c860:	bf02      	ittt	eq
 800c862:	68e5      	ldreq	r5, [r4, #12]
 800c864:	6833      	ldreq	r3, [r6, #0]
 800c866:	1aed      	subeq	r5, r5, r3
 800c868:	68a3      	ldr	r3, [r4, #8]
 800c86a:	bf0c      	ite	eq
 800c86c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c870:	2500      	movne	r5, #0
 800c872:	4293      	cmp	r3, r2
 800c874:	bfc4      	itt	gt
 800c876:	1a9b      	subgt	r3, r3, r2
 800c878:	18ed      	addgt	r5, r5, r3
 800c87a:	2600      	movs	r6, #0
 800c87c:	341a      	adds	r4, #26
 800c87e:	42b5      	cmp	r5, r6
 800c880:	d11a      	bne.n	800c8b8 <_printf_common+0xc8>
 800c882:	2000      	movs	r0, #0
 800c884:	e008      	b.n	800c898 <_printf_common+0xa8>
 800c886:	2301      	movs	r3, #1
 800c888:	4652      	mov	r2, sl
 800c88a:	4641      	mov	r1, r8
 800c88c:	4638      	mov	r0, r7
 800c88e:	47c8      	blx	r9
 800c890:	3001      	adds	r0, #1
 800c892:	d103      	bne.n	800c89c <_printf_common+0xac>
 800c894:	f04f 30ff 	mov.w	r0, #4294967295
 800c898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c89c:	3501      	adds	r5, #1
 800c89e:	e7c6      	b.n	800c82e <_printf_common+0x3e>
 800c8a0:	18e1      	adds	r1, r4, r3
 800c8a2:	1c5a      	adds	r2, r3, #1
 800c8a4:	2030      	movs	r0, #48	@ 0x30
 800c8a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c8aa:	4422      	add	r2, r4
 800c8ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c8b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c8b4:	3302      	adds	r3, #2
 800c8b6:	e7c7      	b.n	800c848 <_printf_common+0x58>
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	4622      	mov	r2, r4
 800c8bc:	4641      	mov	r1, r8
 800c8be:	4638      	mov	r0, r7
 800c8c0:	47c8      	blx	r9
 800c8c2:	3001      	adds	r0, #1
 800c8c4:	d0e6      	beq.n	800c894 <_printf_common+0xa4>
 800c8c6:	3601      	adds	r6, #1
 800c8c8:	e7d9      	b.n	800c87e <_printf_common+0x8e>
	...

0800c8cc <_printf_i>:
 800c8cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8d0:	7e0f      	ldrb	r7, [r1, #24]
 800c8d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c8d4:	2f78      	cmp	r7, #120	@ 0x78
 800c8d6:	4691      	mov	r9, r2
 800c8d8:	4680      	mov	r8, r0
 800c8da:	460c      	mov	r4, r1
 800c8dc:	469a      	mov	sl, r3
 800c8de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c8e2:	d807      	bhi.n	800c8f4 <_printf_i+0x28>
 800c8e4:	2f62      	cmp	r7, #98	@ 0x62
 800c8e6:	d80a      	bhi.n	800c8fe <_printf_i+0x32>
 800c8e8:	2f00      	cmp	r7, #0
 800c8ea:	f000 80d2 	beq.w	800ca92 <_printf_i+0x1c6>
 800c8ee:	2f58      	cmp	r7, #88	@ 0x58
 800c8f0:	f000 80b9 	beq.w	800ca66 <_printf_i+0x19a>
 800c8f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c8f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c8fc:	e03a      	b.n	800c974 <_printf_i+0xa8>
 800c8fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c902:	2b15      	cmp	r3, #21
 800c904:	d8f6      	bhi.n	800c8f4 <_printf_i+0x28>
 800c906:	a101      	add	r1, pc, #4	@ (adr r1, 800c90c <_printf_i+0x40>)
 800c908:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c90c:	0800c965 	.word	0x0800c965
 800c910:	0800c979 	.word	0x0800c979
 800c914:	0800c8f5 	.word	0x0800c8f5
 800c918:	0800c8f5 	.word	0x0800c8f5
 800c91c:	0800c8f5 	.word	0x0800c8f5
 800c920:	0800c8f5 	.word	0x0800c8f5
 800c924:	0800c979 	.word	0x0800c979
 800c928:	0800c8f5 	.word	0x0800c8f5
 800c92c:	0800c8f5 	.word	0x0800c8f5
 800c930:	0800c8f5 	.word	0x0800c8f5
 800c934:	0800c8f5 	.word	0x0800c8f5
 800c938:	0800ca79 	.word	0x0800ca79
 800c93c:	0800c9a3 	.word	0x0800c9a3
 800c940:	0800ca33 	.word	0x0800ca33
 800c944:	0800c8f5 	.word	0x0800c8f5
 800c948:	0800c8f5 	.word	0x0800c8f5
 800c94c:	0800ca9b 	.word	0x0800ca9b
 800c950:	0800c8f5 	.word	0x0800c8f5
 800c954:	0800c9a3 	.word	0x0800c9a3
 800c958:	0800c8f5 	.word	0x0800c8f5
 800c95c:	0800c8f5 	.word	0x0800c8f5
 800c960:	0800ca3b 	.word	0x0800ca3b
 800c964:	6833      	ldr	r3, [r6, #0]
 800c966:	1d1a      	adds	r2, r3, #4
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	6032      	str	r2, [r6, #0]
 800c96c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c970:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c974:	2301      	movs	r3, #1
 800c976:	e09d      	b.n	800cab4 <_printf_i+0x1e8>
 800c978:	6833      	ldr	r3, [r6, #0]
 800c97a:	6820      	ldr	r0, [r4, #0]
 800c97c:	1d19      	adds	r1, r3, #4
 800c97e:	6031      	str	r1, [r6, #0]
 800c980:	0606      	lsls	r6, r0, #24
 800c982:	d501      	bpl.n	800c988 <_printf_i+0xbc>
 800c984:	681d      	ldr	r5, [r3, #0]
 800c986:	e003      	b.n	800c990 <_printf_i+0xc4>
 800c988:	0645      	lsls	r5, r0, #25
 800c98a:	d5fb      	bpl.n	800c984 <_printf_i+0xb8>
 800c98c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c990:	2d00      	cmp	r5, #0
 800c992:	da03      	bge.n	800c99c <_printf_i+0xd0>
 800c994:	232d      	movs	r3, #45	@ 0x2d
 800c996:	426d      	negs	r5, r5
 800c998:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c99c:	4859      	ldr	r0, [pc, #356]	@ (800cb04 <_printf_i+0x238>)
 800c99e:	230a      	movs	r3, #10
 800c9a0:	e011      	b.n	800c9c6 <_printf_i+0xfa>
 800c9a2:	6821      	ldr	r1, [r4, #0]
 800c9a4:	6833      	ldr	r3, [r6, #0]
 800c9a6:	0608      	lsls	r0, r1, #24
 800c9a8:	f853 5b04 	ldr.w	r5, [r3], #4
 800c9ac:	d402      	bmi.n	800c9b4 <_printf_i+0xe8>
 800c9ae:	0649      	lsls	r1, r1, #25
 800c9b0:	bf48      	it	mi
 800c9b2:	b2ad      	uxthmi	r5, r5
 800c9b4:	2f6f      	cmp	r7, #111	@ 0x6f
 800c9b6:	4853      	ldr	r0, [pc, #332]	@ (800cb04 <_printf_i+0x238>)
 800c9b8:	6033      	str	r3, [r6, #0]
 800c9ba:	bf14      	ite	ne
 800c9bc:	230a      	movne	r3, #10
 800c9be:	2308      	moveq	r3, #8
 800c9c0:	2100      	movs	r1, #0
 800c9c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c9c6:	6866      	ldr	r6, [r4, #4]
 800c9c8:	60a6      	str	r6, [r4, #8]
 800c9ca:	2e00      	cmp	r6, #0
 800c9cc:	bfa2      	ittt	ge
 800c9ce:	6821      	ldrge	r1, [r4, #0]
 800c9d0:	f021 0104 	bicge.w	r1, r1, #4
 800c9d4:	6021      	strge	r1, [r4, #0]
 800c9d6:	b90d      	cbnz	r5, 800c9dc <_printf_i+0x110>
 800c9d8:	2e00      	cmp	r6, #0
 800c9da:	d04b      	beq.n	800ca74 <_printf_i+0x1a8>
 800c9dc:	4616      	mov	r6, r2
 800c9de:	fbb5 f1f3 	udiv	r1, r5, r3
 800c9e2:	fb03 5711 	mls	r7, r3, r1, r5
 800c9e6:	5dc7      	ldrb	r7, [r0, r7]
 800c9e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c9ec:	462f      	mov	r7, r5
 800c9ee:	42bb      	cmp	r3, r7
 800c9f0:	460d      	mov	r5, r1
 800c9f2:	d9f4      	bls.n	800c9de <_printf_i+0x112>
 800c9f4:	2b08      	cmp	r3, #8
 800c9f6:	d10b      	bne.n	800ca10 <_printf_i+0x144>
 800c9f8:	6823      	ldr	r3, [r4, #0]
 800c9fa:	07df      	lsls	r7, r3, #31
 800c9fc:	d508      	bpl.n	800ca10 <_printf_i+0x144>
 800c9fe:	6923      	ldr	r3, [r4, #16]
 800ca00:	6861      	ldr	r1, [r4, #4]
 800ca02:	4299      	cmp	r1, r3
 800ca04:	bfde      	ittt	le
 800ca06:	2330      	movle	r3, #48	@ 0x30
 800ca08:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ca0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ca10:	1b92      	subs	r2, r2, r6
 800ca12:	6122      	str	r2, [r4, #16]
 800ca14:	f8cd a000 	str.w	sl, [sp]
 800ca18:	464b      	mov	r3, r9
 800ca1a:	aa03      	add	r2, sp, #12
 800ca1c:	4621      	mov	r1, r4
 800ca1e:	4640      	mov	r0, r8
 800ca20:	f7ff fee6 	bl	800c7f0 <_printf_common>
 800ca24:	3001      	adds	r0, #1
 800ca26:	d14a      	bne.n	800cabe <_printf_i+0x1f2>
 800ca28:	f04f 30ff 	mov.w	r0, #4294967295
 800ca2c:	b004      	add	sp, #16
 800ca2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca32:	6823      	ldr	r3, [r4, #0]
 800ca34:	f043 0320 	orr.w	r3, r3, #32
 800ca38:	6023      	str	r3, [r4, #0]
 800ca3a:	4833      	ldr	r0, [pc, #204]	@ (800cb08 <_printf_i+0x23c>)
 800ca3c:	2778      	movs	r7, #120	@ 0x78
 800ca3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ca42:	6823      	ldr	r3, [r4, #0]
 800ca44:	6831      	ldr	r1, [r6, #0]
 800ca46:	061f      	lsls	r7, r3, #24
 800ca48:	f851 5b04 	ldr.w	r5, [r1], #4
 800ca4c:	d402      	bmi.n	800ca54 <_printf_i+0x188>
 800ca4e:	065f      	lsls	r7, r3, #25
 800ca50:	bf48      	it	mi
 800ca52:	b2ad      	uxthmi	r5, r5
 800ca54:	6031      	str	r1, [r6, #0]
 800ca56:	07d9      	lsls	r1, r3, #31
 800ca58:	bf44      	itt	mi
 800ca5a:	f043 0320 	orrmi.w	r3, r3, #32
 800ca5e:	6023      	strmi	r3, [r4, #0]
 800ca60:	b11d      	cbz	r5, 800ca6a <_printf_i+0x19e>
 800ca62:	2310      	movs	r3, #16
 800ca64:	e7ac      	b.n	800c9c0 <_printf_i+0xf4>
 800ca66:	4827      	ldr	r0, [pc, #156]	@ (800cb04 <_printf_i+0x238>)
 800ca68:	e7e9      	b.n	800ca3e <_printf_i+0x172>
 800ca6a:	6823      	ldr	r3, [r4, #0]
 800ca6c:	f023 0320 	bic.w	r3, r3, #32
 800ca70:	6023      	str	r3, [r4, #0]
 800ca72:	e7f6      	b.n	800ca62 <_printf_i+0x196>
 800ca74:	4616      	mov	r6, r2
 800ca76:	e7bd      	b.n	800c9f4 <_printf_i+0x128>
 800ca78:	6833      	ldr	r3, [r6, #0]
 800ca7a:	6825      	ldr	r5, [r4, #0]
 800ca7c:	6961      	ldr	r1, [r4, #20]
 800ca7e:	1d18      	adds	r0, r3, #4
 800ca80:	6030      	str	r0, [r6, #0]
 800ca82:	062e      	lsls	r6, r5, #24
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	d501      	bpl.n	800ca8c <_printf_i+0x1c0>
 800ca88:	6019      	str	r1, [r3, #0]
 800ca8a:	e002      	b.n	800ca92 <_printf_i+0x1c6>
 800ca8c:	0668      	lsls	r0, r5, #25
 800ca8e:	d5fb      	bpl.n	800ca88 <_printf_i+0x1bc>
 800ca90:	8019      	strh	r1, [r3, #0]
 800ca92:	2300      	movs	r3, #0
 800ca94:	6123      	str	r3, [r4, #16]
 800ca96:	4616      	mov	r6, r2
 800ca98:	e7bc      	b.n	800ca14 <_printf_i+0x148>
 800ca9a:	6833      	ldr	r3, [r6, #0]
 800ca9c:	1d1a      	adds	r2, r3, #4
 800ca9e:	6032      	str	r2, [r6, #0]
 800caa0:	681e      	ldr	r6, [r3, #0]
 800caa2:	6862      	ldr	r2, [r4, #4]
 800caa4:	2100      	movs	r1, #0
 800caa6:	4630      	mov	r0, r6
 800caa8:	f7f3 fbba 	bl	8000220 <memchr>
 800caac:	b108      	cbz	r0, 800cab2 <_printf_i+0x1e6>
 800caae:	1b80      	subs	r0, r0, r6
 800cab0:	6060      	str	r0, [r4, #4]
 800cab2:	6863      	ldr	r3, [r4, #4]
 800cab4:	6123      	str	r3, [r4, #16]
 800cab6:	2300      	movs	r3, #0
 800cab8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cabc:	e7aa      	b.n	800ca14 <_printf_i+0x148>
 800cabe:	6923      	ldr	r3, [r4, #16]
 800cac0:	4632      	mov	r2, r6
 800cac2:	4649      	mov	r1, r9
 800cac4:	4640      	mov	r0, r8
 800cac6:	47d0      	blx	sl
 800cac8:	3001      	adds	r0, #1
 800caca:	d0ad      	beq.n	800ca28 <_printf_i+0x15c>
 800cacc:	6823      	ldr	r3, [r4, #0]
 800cace:	079b      	lsls	r3, r3, #30
 800cad0:	d413      	bmi.n	800cafa <_printf_i+0x22e>
 800cad2:	68e0      	ldr	r0, [r4, #12]
 800cad4:	9b03      	ldr	r3, [sp, #12]
 800cad6:	4298      	cmp	r0, r3
 800cad8:	bfb8      	it	lt
 800cada:	4618      	movlt	r0, r3
 800cadc:	e7a6      	b.n	800ca2c <_printf_i+0x160>
 800cade:	2301      	movs	r3, #1
 800cae0:	4632      	mov	r2, r6
 800cae2:	4649      	mov	r1, r9
 800cae4:	4640      	mov	r0, r8
 800cae6:	47d0      	blx	sl
 800cae8:	3001      	adds	r0, #1
 800caea:	d09d      	beq.n	800ca28 <_printf_i+0x15c>
 800caec:	3501      	adds	r5, #1
 800caee:	68e3      	ldr	r3, [r4, #12]
 800caf0:	9903      	ldr	r1, [sp, #12]
 800caf2:	1a5b      	subs	r3, r3, r1
 800caf4:	42ab      	cmp	r3, r5
 800caf6:	dcf2      	bgt.n	800cade <_printf_i+0x212>
 800caf8:	e7eb      	b.n	800cad2 <_printf_i+0x206>
 800cafa:	2500      	movs	r5, #0
 800cafc:	f104 0619 	add.w	r6, r4, #25
 800cb00:	e7f5      	b.n	800caee <_printf_i+0x222>
 800cb02:	bf00      	nop
 800cb04:	0800fe6a 	.word	0x0800fe6a
 800cb08:	0800fe7b 	.word	0x0800fe7b

0800cb0c <_scanf_float>:
 800cb0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb10:	b087      	sub	sp, #28
 800cb12:	4617      	mov	r7, r2
 800cb14:	9303      	str	r3, [sp, #12]
 800cb16:	688b      	ldr	r3, [r1, #8]
 800cb18:	1e5a      	subs	r2, r3, #1
 800cb1a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800cb1e:	bf81      	itttt	hi
 800cb20:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800cb24:	eb03 0b05 	addhi.w	fp, r3, r5
 800cb28:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800cb2c:	608b      	strhi	r3, [r1, #8]
 800cb2e:	680b      	ldr	r3, [r1, #0]
 800cb30:	460a      	mov	r2, r1
 800cb32:	f04f 0500 	mov.w	r5, #0
 800cb36:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800cb3a:	f842 3b1c 	str.w	r3, [r2], #28
 800cb3e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cb42:	4680      	mov	r8, r0
 800cb44:	460c      	mov	r4, r1
 800cb46:	bf98      	it	ls
 800cb48:	f04f 0b00 	movls.w	fp, #0
 800cb4c:	9201      	str	r2, [sp, #4]
 800cb4e:	4616      	mov	r6, r2
 800cb50:	46aa      	mov	sl, r5
 800cb52:	46a9      	mov	r9, r5
 800cb54:	9502      	str	r5, [sp, #8]
 800cb56:	68a2      	ldr	r2, [r4, #8]
 800cb58:	b152      	cbz	r2, 800cb70 <_scanf_float+0x64>
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	2b4e      	cmp	r3, #78	@ 0x4e
 800cb60:	d864      	bhi.n	800cc2c <_scanf_float+0x120>
 800cb62:	2b40      	cmp	r3, #64	@ 0x40
 800cb64:	d83c      	bhi.n	800cbe0 <_scanf_float+0xd4>
 800cb66:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800cb6a:	b2c8      	uxtb	r0, r1
 800cb6c:	280e      	cmp	r0, #14
 800cb6e:	d93a      	bls.n	800cbe6 <_scanf_float+0xda>
 800cb70:	f1b9 0f00 	cmp.w	r9, #0
 800cb74:	d003      	beq.n	800cb7e <_scanf_float+0x72>
 800cb76:	6823      	ldr	r3, [r4, #0]
 800cb78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb7c:	6023      	str	r3, [r4, #0]
 800cb7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb82:	f1ba 0f01 	cmp.w	sl, #1
 800cb86:	f200 8117 	bhi.w	800cdb8 <_scanf_float+0x2ac>
 800cb8a:	9b01      	ldr	r3, [sp, #4]
 800cb8c:	429e      	cmp	r6, r3
 800cb8e:	f200 8108 	bhi.w	800cda2 <_scanf_float+0x296>
 800cb92:	2001      	movs	r0, #1
 800cb94:	b007      	add	sp, #28
 800cb96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb9a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800cb9e:	2a0d      	cmp	r2, #13
 800cba0:	d8e6      	bhi.n	800cb70 <_scanf_float+0x64>
 800cba2:	a101      	add	r1, pc, #4	@ (adr r1, 800cba8 <_scanf_float+0x9c>)
 800cba4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cba8:	0800ccef 	.word	0x0800ccef
 800cbac:	0800cb71 	.word	0x0800cb71
 800cbb0:	0800cb71 	.word	0x0800cb71
 800cbb4:	0800cb71 	.word	0x0800cb71
 800cbb8:	0800cd4f 	.word	0x0800cd4f
 800cbbc:	0800cd27 	.word	0x0800cd27
 800cbc0:	0800cb71 	.word	0x0800cb71
 800cbc4:	0800cb71 	.word	0x0800cb71
 800cbc8:	0800ccfd 	.word	0x0800ccfd
 800cbcc:	0800cb71 	.word	0x0800cb71
 800cbd0:	0800cb71 	.word	0x0800cb71
 800cbd4:	0800cb71 	.word	0x0800cb71
 800cbd8:	0800cb71 	.word	0x0800cb71
 800cbdc:	0800ccb5 	.word	0x0800ccb5
 800cbe0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800cbe4:	e7db      	b.n	800cb9e <_scanf_float+0x92>
 800cbe6:	290e      	cmp	r1, #14
 800cbe8:	d8c2      	bhi.n	800cb70 <_scanf_float+0x64>
 800cbea:	a001      	add	r0, pc, #4	@ (adr r0, 800cbf0 <_scanf_float+0xe4>)
 800cbec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cbf0:	0800cca5 	.word	0x0800cca5
 800cbf4:	0800cb71 	.word	0x0800cb71
 800cbf8:	0800cca5 	.word	0x0800cca5
 800cbfc:	0800cd3b 	.word	0x0800cd3b
 800cc00:	0800cb71 	.word	0x0800cb71
 800cc04:	0800cc4d 	.word	0x0800cc4d
 800cc08:	0800cc8b 	.word	0x0800cc8b
 800cc0c:	0800cc8b 	.word	0x0800cc8b
 800cc10:	0800cc8b 	.word	0x0800cc8b
 800cc14:	0800cc8b 	.word	0x0800cc8b
 800cc18:	0800cc8b 	.word	0x0800cc8b
 800cc1c:	0800cc8b 	.word	0x0800cc8b
 800cc20:	0800cc8b 	.word	0x0800cc8b
 800cc24:	0800cc8b 	.word	0x0800cc8b
 800cc28:	0800cc8b 	.word	0x0800cc8b
 800cc2c:	2b6e      	cmp	r3, #110	@ 0x6e
 800cc2e:	d809      	bhi.n	800cc44 <_scanf_float+0x138>
 800cc30:	2b60      	cmp	r3, #96	@ 0x60
 800cc32:	d8b2      	bhi.n	800cb9a <_scanf_float+0x8e>
 800cc34:	2b54      	cmp	r3, #84	@ 0x54
 800cc36:	d07b      	beq.n	800cd30 <_scanf_float+0x224>
 800cc38:	2b59      	cmp	r3, #89	@ 0x59
 800cc3a:	d199      	bne.n	800cb70 <_scanf_float+0x64>
 800cc3c:	2d07      	cmp	r5, #7
 800cc3e:	d197      	bne.n	800cb70 <_scanf_float+0x64>
 800cc40:	2508      	movs	r5, #8
 800cc42:	e02c      	b.n	800cc9e <_scanf_float+0x192>
 800cc44:	2b74      	cmp	r3, #116	@ 0x74
 800cc46:	d073      	beq.n	800cd30 <_scanf_float+0x224>
 800cc48:	2b79      	cmp	r3, #121	@ 0x79
 800cc4a:	e7f6      	b.n	800cc3a <_scanf_float+0x12e>
 800cc4c:	6821      	ldr	r1, [r4, #0]
 800cc4e:	05c8      	lsls	r0, r1, #23
 800cc50:	d51b      	bpl.n	800cc8a <_scanf_float+0x17e>
 800cc52:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800cc56:	6021      	str	r1, [r4, #0]
 800cc58:	f109 0901 	add.w	r9, r9, #1
 800cc5c:	f1bb 0f00 	cmp.w	fp, #0
 800cc60:	d003      	beq.n	800cc6a <_scanf_float+0x15e>
 800cc62:	3201      	adds	r2, #1
 800cc64:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cc68:	60a2      	str	r2, [r4, #8]
 800cc6a:	68a3      	ldr	r3, [r4, #8]
 800cc6c:	3b01      	subs	r3, #1
 800cc6e:	60a3      	str	r3, [r4, #8]
 800cc70:	6923      	ldr	r3, [r4, #16]
 800cc72:	3301      	adds	r3, #1
 800cc74:	6123      	str	r3, [r4, #16]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	3b01      	subs	r3, #1
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	607b      	str	r3, [r7, #4]
 800cc7e:	f340 8087 	ble.w	800cd90 <_scanf_float+0x284>
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	3301      	adds	r3, #1
 800cc86:	603b      	str	r3, [r7, #0]
 800cc88:	e765      	b.n	800cb56 <_scanf_float+0x4a>
 800cc8a:	eb1a 0105 	adds.w	r1, sl, r5
 800cc8e:	f47f af6f 	bne.w	800cb70 <_scanf_float+0x64>
 800cc92:	6822      	ldr	r2, [r4, #0]
 800cc94:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800cc98:	6022      	str	r2, [r4, #0]
 800cc9a:	460d      	mov	r5, r1
 800cc9c:	468a      	mov	sl, r1
 800cc9e:	f806 3b01 	strb.w	r3, [r6], #1
 800cca2:	e7e2      	b.n	800cc6a <_scanf_float+0x15e>
 800cca4:	6822      	ldr	r2, [r4, #0]
 800cca6:	0610      	lsls	r0, r2, #24
 800cca8:	f57f af62 	bpl.w	800cb70 <_scanf_float+0x64>
 800ccac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ccb0:	6022      	str	r2, [r4, #0]
 800ccb2:	e7f4      	b.n	800cc9e <_scanf_float+0x192>
 800ccb4:	f1ba 0f00 	cmp.w	sl, #0
 800ccb8:	d10e      	bne.n	800ccd8 <_scanf_float+0x1cc>
 800ccba:	f1b9 0f00 	cmp.w	r9, #0
 800ccbe:	d10e      	bne.n	800ccde <_scanf_float+0x1d2>
 800ccc0:	6822      	ldr	r2, [r4, #0]
 800ccc2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ccc6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ccca:	d108      	bne.n	800ccde <_scanf_float+0x1d2>
 800cccc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ccd0:	6022      	str	r2, [r4, #0]
 800ccd2:	f04f 0a01 	mov.w	sl, #1
 800ccd6:	e7e2      	b.n	800cc9e <_scanf_float+0x192>
 800ccd8:	f1ba 0f02 	cmp.w	sl, #2
 800ccdc:	d055      	beq.n	800cd8a <_scanf_float+0x27e>
 800ccde:	2d01      	cmp	r5, #1
 800cce0:	d002      	beq.n	800cce8 <_scanf_float+0x1dc>
 800cce2:	2d04      	cmp	r5, #4
 800cce4:	f47f af44 	bne.w	800cb70 <_scanf_float+0x64>
 800cce8:	3501      	adds	r5, #1
 800ccea:	b2ed      	uxtb	r5, r5
 800ccec:	e7d7      	b.n	800cc9e <_scanf_float+0x192>
 800ccee:	f1ba 0f01 	cmp.w	sl, #1
 800ccf2:	f47f af3d 	bne.w	800cb70 <_scanf_float+0x64>
 800ccf6:	f04f 0a02 	mov.w	sl, #2
 800ccfa:	e7d0      	b.n	800cc9e <_scanf_float+0x192>
 800ccfc:	b97d      	cbnz	r5, 800cd1e <_scanf_float+0x212>
 800ccfe:	f1b9 0f00 	cmp.w	r9, #0
 800cd02:	f47f af38 	bne.w	800cb76 <_scanf_float+0x6a>
 800cd06:	6822      	ldr	r2, [r4, #0]
 800cd08:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cd0c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cd10:	f040 8108 	bne.w	800cf24 <_scanf_float+0x418>
 800cd14:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cd18:	6022      	str	r2, [r4, #0]
 800cd1a:	2501      	movs	r5, #1
 800cd1c:	e7bf      	b.n	800cc9e <_scanf_float+0x192>
 800cd1e:	2d03      	cmp	r5, #3
 800cd20:	d0e2      	beq.n	800cce8 <_scanf_float+0x1dc>
 800cd22:	2d05      	cmp	r5, #5
 800cd24:	e7de      	b.n	800cce4 <_scanf_float+0x1d8>
 800cd26:	2d02      	cmp	r5, #2
 800cd28:	f47f af22 	bne.w	800cb70 <_scanf_float+0x64>
 800cd2c:	2503      	movs	r5, #3
 800cd2e:	e7b6      	b.n	800cc9e <_scanf_float+0x192>
 800cd30:	2d06      	cmp	r5, #6
 800cd32:	f47f af1d 	bne.w	800cb70 <_scanf_float+0x64>
 800cd36:	2507      	movs	r5, #7
 800cd38:	e7b1      	b.n	800cc9e <_scanf_float+0x192>
 800cd3a:	6822      	ldr	r2, [r4, #0]
 800cd3c:	0591      	lsls	r1, r2, #22
 800cd3e:	f57f af17 	bpl.w	800cb70 <_scanf_float+0x64>
 800cd42:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800cd46:	6022      	str	r2, [r4, #0]
 800cd48:	f8cd 9008 	str.w	r9, [sp, #8]
 800cd4c:	e7a7      	b.n	800cc9e <_scanf_float+0x192>
 800cd4e:	6822      	ldr	r2, [r4, #0]
 800cd50:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800cd54:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cd58:	d006      	beq.n	800cd68 <_scanf_float+0x25c>
 800cd5a:	0550      	lsls	r0, r2, #21
 800cd5c:	f57f af08 	bpl.w	800cb70 <_scanf_float+0x64>
 800cd60:	f1b9 0f00 	cmp.w	r9, #0
 800cd64:	f000 80de 	beq.w	800cf24 <_scanf_float+0x418>
 800cd68:	0591      	lsls	r1, r2, #22
 800cd6a:	bf58      	it	pl
 800cd6c:	9902      	ldrpl	r1, [sp, #8]
 800cd6e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cd72:	bf58      	it	pl
 800cd74:	eba9 0101 	subpl.w	r1, r9, r1
 800cd78:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800cd7c:	bf58      	it	pl
 800cd7e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cd82:	6022      	str	r2, [r4, #0]
 800cd84:	f04f 0900 	mov.w	r9, #0
 800cd88:	e789      	b.n	800cc9e <_scanf_float+0x192>
 800cd8a:	f04f 0a03 	mov.w	sl, #3
 800cd8e:	e786      	b.n	800cc9e <_scanf_float+0x192>
 800cd90:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cd94:	4639      	mov	r1, r7
 800cd96:	4640      	mov	r0, r8
 800cd98:	4798      	blx	r3
 800cd9a:	2800      	cmp	r0, #0
 800cd9c:	f43f aedb 	beq.w	800cb56 <_scanf_float+0x4a>
 800cda0:	e6e6      	b.n	800cb70 <_scanf_float+0x64>
 800cda2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cda6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cdaa:	463a      	mov	r2, r7
 800cdac:	4640      	mov	r0, r8
 800cdae:	4798      	blx	r3
 800cdb0:	6923      	ldr	r3, [r4, #16]
 800cdb2:	3b01      	subs	r3, #1
 800cdb4:	6123      	str	r3, [r4, #16]
 800cdb6:	e6e8      	b.n	800cb8a <_scanf_float+0x7e>
 800cdb8:	1e6b      	subs	r3, r5, #1
 800cdba:	2b06      	cmp	r3, #6
 800cdbc:	d824      	bhi.n	800ce08 <_scanf_float+0x2fc>
 800cdbe:	2d02      	cmp	r5, #2
 800cdc0:	d836      	bhi.n	800ce30 <_scanf_float+0x324>
 800cdc2:	9b01      	ldr	r3, [sp, #4]
 800cdc4:	429e      	cmp	r6, r3
 800cdc6:	f67f aee4 	bls.w	800cb92 <_scanf_float+0x86>
 800cdca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cdce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cdd2:	463a      	mov	r2, r7
 800cdd4:	4640      	mov	r0, r8
 800cdd6:	4798      	blx	r3
 800cdd8:	6923      	ldr	r3, [r4, #16]
 800cdda:	3b01      	subs	r3, #1
 800cddc:	6123      	str	r3, [r4, #16]
 800cdde:	e7f0      	b.n	800cdc2 <_scanf_float+0x2b6>
 800cde0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cde4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800cde8:	463a      	mov	r2, r7
 800cdea:	4640      	mov	r0, r8
 800cdec:	4798      	blx	r3
 800cdee:	6923      	ldr	r3, [r4, #16]
 800cdf0:	3b01      	subs	r3, #1
 800cdf2:	6123      	str	r3, [r4, #16]
 800cdf4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cdf8:	fa5f fa8a 	uxtb.w	sl, sl
 800cdfc:	f1ba 0f02 	cmp.w	sl, #2
 800ce00:	d1ee      	bne.n	800cde0 <_scanf_float+0x2d4>
 800ce02:	3d03      	subs	r5, #3
 800ce04:	b2ed      	uxtb	r5, r5
 800ce06:	1b76      	subs	r6, r6, r5
 800ce08:	6823      	ldr	r3, [r4, #0]
 800ce0a:	05da      	lsls	r2, r3, #23
 800ce0c:	d530      	bpl.n	800ce70 <_scanf_float+0x364>
 800ce0e:	055b      	lsls	r3, r3, #21
 800ce10:	d511      	bpl.n	800ce36 <_scanf_float+0x32a>
 800ce12:	9b01      	ldr	r3, [sp, #4]
 800ce14:	429e      	cmp	r6, r3
 800ce16:	f67f aebc 	bls.w	800cb92 <_scanf_float+0x86>
 800ce1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ce1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ce22:	463a      	mov	r2, r7
 800ce24:	4640      	mov	r0, r8
 800ce26:	4798      	blx	r3
 800ce28:	6923      	ldr	r3, [r4, #16]
 800ce2a:	3b01      	subs	r3, #1
 800ce2c:	6123      	str	r3, [r4, #16]
 800ce2e:	e7f0      	b.n	800ce12 <_scanf_float+0x306>
 800ce30:	46aa      	mov	sl, r5
 800ce32:	46b3      	mov	fp, r6
 800ce34:	e7de      	b.n	800cdf4 <_scanf_float+0x2e8>
 800ce36:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ce3a:	6923      	ldr	r3, [r4, #16]
 800ce3c:	2965      	cmp	r1, #101	@ 0x65
 800ce3e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ce42:	f106 35ff 	add.w	r5, r6, #4294967295
 800ce46:	6123      	str	r3, [r4, #16]
 800ce48:	d00c      	beq.n	800ce64 <_scanf_float+0x358>
 800ce4a:	2945      	cmp	r1, #69	@ 0x45
 800ce4c:	d00a      	beq.n	800ce64 <_scanf_float+0x358>
 800ce4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ce52:	463a      	mov	r2, r7
 800ce54:	4640      	mov	r0, r8
 800ce56:	4798      	blx	r3
 800ce58:	6923      	ldr	r3, [r4, #16]
 800ce5a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ce5e:	3b01      	subs	r3, #1
 800ce60:	1eb5      	subs	r5, r6, #2
 800ce62:	6123      	str	r3, [r4, #16]
 800ce64:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ce68:	463a      	mov	r2, r7
 800ce6a:	4640      	mov	r0, r8
 800ce6c:	4798      	blx	r3
 800ce6e:	462e      	mov	r6, r5
 800ce70:	6822      	ldr	r2, [r4, #0]
 800ce72:	f012 0210 	ands.w	r2, r2, #16
 800ce76:	d001      	beq.n	800ce7c <_scanf_float+0x370>
 800ce78:	2000      	movs	r0, #0
 800ce7a:	e68b      	b.n	800cb94 <_scanf_float+0x88>
 800ce7c:	7032      	strb	r2, [r6, #0]
 800ce7e:	6823      	ldr	r3, [r4, #0]
 800ce80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ce84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce88:	d11c      	bne.n	800cec4 <_scanf_float+0x3b8>
 800ce8a:	9b02      	ldr	r3, [sp, #8]
 800ce8c:	454b      	cmp	r3, r9
 800ce8e:	eba3 0209 	sub.w	r2, r3, r9
 800ce92:	d123      	bne.n	800cedc <_scanf_float+0x3d0>
 800ce94:	9901      	ldr	r1, [sp, #4]
 800ce96:	2200      	movs	r2, #0
 800ce98:	4640      	mov	r0, r8
 800ce9a:	f7ff f9d9 	bl	800c250 <_strtod_r>
 800ce9e:	9b03      	ldr	r3, [sp, #12]
 800cea0:	6821      	ldr	r1, [r4, #0]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f011 0f02 	tst.w	r1, #2
 800cea8:	ec57 6b10 	vmov	r6, r7, d0
 800ceac:	f103 0204 	add.w	r2, r3, #4
 800ceb0:	d01f      	beq.n	800cef2 <_scanf_float+0x3e6>
 800ceb2:	9903      	ldr	r1, [sp, #12]
 800ceb4:	600a      	str	r2, [r1, #0]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	e9c3 6700 	strd	r6, r7, [r3]
 800cebc:	68e3      	ldr	r3, [r4, #12]
 800cebe:	3301      	adds	r3, #1
 800cec0:	60e3      	str	r3, [r4, #12]
 800cec2:	e7d9      	b.n	800ce78 <_scanf_float+0x36c>
 800cec4:	9b04      	ldr	r3, [sp, #16]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d0e4      	beq.n	800ce94 <_scanf_float+0x388>
 800ceca:	9905      	ldr	r1, [sp, #20]
 800cecc:	230a      	movs	r3, #10
 800cece:	3101      	adds	r1, #1
 800ced0:	4640      	mov	r0, r8
 800ced2:	f002 f9e9 	bl	800f2a8 <_strtol_r>
 800ced6:	9b04      	ldr	r3, [sp, #16]
 800ced8:	9e05      	ldr	r6, [sp, #20]
 800ceda:	1ac2      	subs	r2, r0, r3
 800cedc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800cee0:	429e      	cmp	r6, r3
 800cee2:	bf28      	it	cs
 800cee4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cee8:	4910      	ldr	r1, [pc, #64]	@ (800cf2c <_scanf_float+0x420>)
 800ceea:	4630      	mov	r0, r6
 800ceec:	f000 f8e4 	bl	800d0b8 <siprintf>
 800cef0:	e7d0      	b.n	800ce94 <_scanf_float+0x388>
 800cef2:	f011 0f04 	tst.w	r1, #4
 800cef6:	9903      	ldr	r1, [sp, #12]
 800cef8:	600a      	str	r2, [r1, #0]
 800cefa:	d1dc      	bne.n	800ceb6 <_scanf_float+0x3aa>
 800cefc:	681d      	ldr	r5, [r3, #0]
 800cefe:	4632      	mov	r2, r6
 800cf00:	463b      	mov	r3, r7
 800cf02:	4630      	mov	r0, r6
 800cf04:	4639      	mov	r1, r7
 800cf06:	f7f3 fe39 	bl	8000b7c <__aeabi_dcmpun>
 800cf0a:	b128      	cbz	r0, 800cf18 <_scanf_float+0x40c>
 800cf0c:	4808      	ldr	r0, [pc, #32]	@ (800cf30 <_scanf_float+0x424>)
 800cf0e:	f000 f9ff 	bl	800d310 <nanf>
 800cf12:	ed85 0a00 	vstr	s0, [r5]
 800cf16:	e7d1      	b.n	800cebc <_scanf_float+0x3b0>
 800cf18:	4630      	mov	r0, r6
 800cf1a:	4639      	mov	r1, r7
 800cf1c:	f7f3 fe8c 	bl	8000c38 <__aeabi_d2f>
 800cf20:	6028      	str	r0, [r5, #0]
 800cf22:	e7cb      	b.n	800cebc <_scanf_float+0x3b0>
 800cf24:	f04f 0900 	mov.w	r9, #0
 800cf28:	e629      	b.n	800cb7e <_scanf_float+0x72>
 800cf2a:	bf00      	nop
 800cf2c:	0800fe8c 	.word	0x0800fe8c
 800cf30:	0801022d 	.word	0x0801022d

0800cf34 <std>:
 800cf34:	2300      	movs	r3, #0
 800cf36:	b510      	push	{r4, lr}
 800cf38:	4604      	mov	r4, r0
 800cf3a:	e9c0 3300 	strd	r3, r3, [r0]
 800cf3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf42:	6083      	str	r3, [r0, #8]
 800cf44:	8181      	strh	r1, [r0, #12]
 800cf46:	6643      	str	r3, [r0, #100]	@ 0x64
 800cf48:	81c2      	strh	r2, [r0, #14]
 800cf4a:	6183      	str	r3, [r0, #24]
 800cf4c:	4619      	mov	r1, r3
 800cf4e:	2208      	movs	r2, #8
 800cf50:	305c      	adds	r0, #92	@ 0x5c
 800cf52:	f000 f935 	bl	800d1c0 <memset>
 800cf56:	4b0d      	ldr	r3, [pc, #52]	@ (800cf8c <std+0x58>)
 800cf58:	6263      	str	r3, [r4, #36]	@ 0x24
 800cf5a:	4b0d      	ldr	r3, [pc, #52]	@ (800cf90 <std+0x5c>)
 800cf5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cf5e:	4b0d      	ldr	r3, [pc, #52]	@ (800cf94 <std+0x60>)
 800cf60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cf62:	4b0d      	ldr	r3, [pc, #52]	@ (800cf98 <std+0x64>)
 800cf64:	6323      	str	r3, [r4, #48]	@ 0x30
 800cf66:	4b0d      	ldr	r3, [pc, #52]	@ (800cf9c <std+0x68>)
 800cf68:	6224      	str	r4, [r4, #32]
 800cf6a:	429c      	cmp	r4, r3
 800cf6c:	d006      	beq.n	800cf7c <std+0x48>
 800cf6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cf72:	4294      	cmp	r4, r2
 800cf74:	d002      	beq.n	800cf7c <std+0x48>
 800cf76:	33d0      	adds	r3, #208	@ 0xd0
 800cf78:	429c      	cmp	r4, r3
 800cf7a:	d105      	bne.n	800cf88 <std+0x54>
 800cf7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cf80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf84:	f000 b9aa 	b.w	800d2dc <__retarget_lock_init_recursive>
 800cf88:	bd10      	pop	{r4, pc}
 800cf8a:	bf00      	nop
 800cf8c:	0800d0f9 	.word	0x0800d0f9
 800cf90:	0800d11b 	.word	0x0800d11b
 800cf94:	0800d153 	.word	0x0800d153
 800cf98:	0800d177 	.word	0x0800d177
 800cf9c:	200009a4 	.word	0x200009a4

0800cfa0 <stdio_exit_handler>:
 800cfa0:	4a02      	ldr	r2, [pc, #8]	@ (800cfac <stdio_exit_handler+0xc>)
 800cfa2:	4903      	ldr	r1, [pc, #12]	@ (800cfb0 <stdio_exit_handler+0x10>)
 800cfa4:	4803      	ldr	r0, [pc, #12]	@ (800cfb4 <stdio_exit_handler+0x14>)
 800cfa6:	f000 b869 	b.w	800d07c <_fwalk_sglue>
 800cfaa:	bf00      	nop
 800cfac:	20000090 	.word	0x20000090
 800cfb0:	0800f67d 	.word	0x0800f67d
 800cfb4:	2000020c 	.word	0x2000020c

0800cfb8 <cleanup_stdio>:
 800cfb8:	6841      	ldr	r1, [r0, #4]
 800cfba:	4b0c      	ldr	r3, [pc, #48]	@ (800cfec <cleanup_stdio+0x34>)
 800cfbc:	4299      	cmp	r1, r3
 800cfbe:	b510      	push	{r4, lr}
 800cfc0:	4604      	mov	r4, r0
 800cfc2:	d001      	beq.n	800cfc8 <cleanup_stdio+0x10>
 800cfc4:	f002 fb5a 	bl	800f67c <_fflush_r>
 800cfc8:	68a1      	ldr	r1, [r4, #8]
 800cfca:	4b09      	ldr	r3, [pc, #36]	@ (800cff0 <cleanup_stdio+0x38>)
 800cfcc:	4299      	cmp	r1, r3
 800cfce:	d002      	beq.n	800cfd6 <cleanup_stdio+0x1e>
 800cfd0:	4620      	mov	r0, r4
 800cfd2:	f002 fb53 	bl	800f67c <_fflush_r>
 800cfd6:	68e1      	ldr	r1, [r4, #12]
 800cfd8:	4b06      	ldr	r3, [pc, #24]	@ (800cff4 <cleanup_stdio+0x3c>)
 800cfda:	4299      	cmp	r1, r3
 800cfdc:	d004      	beq.n	800cfe8 <cleanup_stdio+0x30>
 800cfde:	4620      	mov	r0, r4
 800cfe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfe4:	f002 bb4a 	b.w	800f67c <_fflush_r>
 800cfe8:	bd10      	pop	{r4, pc}
 800cfea:	bf00      	nop
 800cfec:	200009a4 	.word	0x200009a4
 800cff0:	20000a0c 	.word	0x20000a0c
 800cff4:	20000a74 	.word	0x20000a74

0800cff8 <global_stdio_init.part.0>:
 800cff8:	b510      	push	{r4, lr}
 800cffa:	4b0b      	ldr	r3, [pc, #44]	@ (800d028 <global_stdio_init.part.0+0x30>)
 800cffc:	4c0b      	ldr	r4, [pc, #44]	@ (800d02c <global_stdio_init.part.0+0x34>)
 800cffe:	4a0c      	ldr	r2, [pc, #48]	@ (800d030 <global_stdio_init.part.0+0x38>)
 800d000:	601a      	str	r2, [r3, #0]
 800d002:	4620      	mov	r0, r4
 800d004:	2200      	movs	r2, #0
 800d006:	2104      	movs	r1, #4
 800d008:	f7ff ff94 	bl	800cf34 <std>
 800d00c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d010:	2201      	movs	r2, #1
 800d012:	2109      	movs	r1, #9
 800d014:	f7ff ff8e 	bl	800cf34 <std>
 800d018:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d01c:	2202      	movs	r2, #2
 800d01e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d022:	2112      	movs	r1, #18
 800d024:	f7ff bf86 	b.w	800cf34 <std>
 800d028:	20000adc 	.word	0x20000adc
 800d02c:	200009a4 	.word	0x200009a4
 800d030:	0800cfa1 	.word	0x0800cfa1

0800d034 <__sfp_lock_acquire>:
 800d034:	4801      	ldr	r0, [pc, #4]	@ (800d03c <__sfp_lock_acquire+0x8>)
 800d036:	f000 b952 	b.w	800d2de <__retarget_lock_acquire_recursive>
 800d03a:	bf00      	nop
 800d03c:	20000ae5 	.word	0x20000ae5

0800d040 <__sfp_lock_release>:
 800d040:	4801      	ldr	r0, [pc, #4]	@ (800d048 <__sfp_lock_release+0x8>)
 800d042:	f000 b94d 	b.w	800d2e0 <__retarget_lock_release_recursive>
 800d046:	bf00      	nop
 800d048:	20000ae5 	.word	0x20000ae5

0800d04c <__sinit>:
 800d04c:	b510      	push	{r4, lr}
 800d04e:	4604      	mov	r4, r0
 800d050:	f7ff fff0 	bl	800d034 <__sfp_lock_acquire>
 800d054:	6a23      	ldr	r3, [r4, #32]
 800d056:	b11b      	cbz	r3, 800d060 <__sinit+0x14>
 800d058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d05c:	f7ff bff0 	b.w	800d040 <__sfp_lock_release>
 800d060:	4b04      	ldr	r3, [pc, #16]	@ (800d074 <__sinit+0x28>)
 800d062:	6223      	str	r3, [r4, #32]
 800d064:	4b04      	ldr	r3, [pc, #16]	@ (800d078 <__sinit+0x2c>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d1f5      	bne.n	800d058 <__sinit+0xc>
 800d06c:	f7ff ffc4 	bl	800cff8 <global_stdio_init.part.0>
 800d070:	e7f2      	b.n	800d058 <__sinit+0xc>
 800d072:	bf00      	nop
 800d074:	0800cfb9 	.word	0x0800cfb9
 800d078:	20000adc 	.word	0x20000adc

0800d07c <_fwalk_sglue>:
 800d07c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d080:	4607      	mov	r7, r0
 800d082:	4688      	mov	r8, r1
 800d084:	4614      	mov	r4, r2
 800d086:	2600      	movs	r6, #0
 800d088:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d08c:	f1b9 0901 	subs.w	r9, r9, #1
 800d090:	d505      	bpl.n	800d09e <_fwalk_sglue+0x22>
 800d092:	6824      	ldr	r4, [r4, #0]
 800d094:	2c00      	cmp	r4, #0
 800d096:	d1f7      	bne.n	800d088 <_fwalk_sglue+0xc>
 800d098:	4630      	mov	r0, r6
 800d09a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d09e:	89ab      	ldrh	r3, [r5, #12]
 800d0a0:	2b01      	cmp	r3, #1
 800d0a2:	d907      	bls.n	800d0b4 <_fwalk_sglue+0x38>
 800d0a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	d003      	beq.n	800d0b4 <_fwalk_sglue+0x38>
 800d0ac:	4629      	mov	r1, r5
 800d0ae:	4638      	mov	r0, r7
 800d0b0:	47c0      	blx	r8
 800d0b2:	4306      	orrs	r6, r0
 800d0b4:	3568      	adds	r5, #104	@ 0x68
 800d0b6:	e7e9      	b.n	800d08c <_fwalk_sglue+0x10>

0800d0b8 <siprintf>:
 800d0b8:	b40e      	push	{r1, r2, r3}
 800d0ba:	b500      	push	{lr}
 800d0bc:	b09c      	sub	sp, #112	@ 0x70
 800d0be:	ab1d      	add	r3, sp, #116	@ 0x74
 800d0c0:	9002      	str	r0, [sp, #8]
 800d0c2:	9006      	str	r0, [sp, #24]
 800d0c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d0c8:	4809      	ldr	r0, [pc, #36]	@ (800d0f0 <siprintf+0x38>)
 800d0ca:	9107      	str	r1, [sp, #28]
 800d0cc:	9104      	str	r1, [sp, #16]
 800d0ce:	4909      	ldr	r1, [pc, #36]	@ (800d0f4 <siprintf+0x3c>)
 800d0d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0d4:	9105      	str	r1, [sp, #20]
 800d0d6:	6800      	ldr	r0, [r0, #0]
 800d0d8:	9301      	str	r3, [sp, #4]
 800d0da:	a902      	add	r1, sp, #8
 800d0dc:	f002 f94e 	bl	800f37c <_svfiprintf_r>
 800d0e0:	9b02      	ldr	r3, [sp, #8]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	701a      	strb	r2, [r3, #0]
 800d0e6:	b01c      	add	sp, #112	@ 0x70
 800d0e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0ec:	b003      	add	sp, #12
 800d0ee:	4770      	bx	lr
 800d0f0:	20000208 	.word	0x20000208
 800d0f4:	ffff0208 	.word	0xffff0208

0800d0f8 <__sread>:
 800d0f8:	b510      	push	{r4, lr}
 800d0fa:	460c      	mov	r4, r1
 800d0fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d100:	f000 f89e 	bl	800d240 <_read_r>
 800d104:	2800      	cmp	r0, #0
 800d106:	bfab      	itete	ge
 800d108:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d10a:	89a3      	ldrhlt	r3, [r4, #12]
 800d10c:	181b      	addge	r3, r3, r0
 800d10e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d112:	bfac      	ite	ge
 800d114:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d116:	81a3      	strhlt	r3, [r4, #12]
 800d118:	bd10      	pop	{r4, pc}

0800d11a <__swrite>:
 800d11a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d11e:	461f      	mov	r7, r3
 800d120:	898b      	ldrh	r3, [r1, #12]
 800d122:	05db      	lsls	r3, r3, #23
 800d124:	4605      	mov	r5, r0
 800d126:	460c      	mov	r4, r1
 800d128:	4616      	mov	r6, r2
 800d12a:	d505      	bpl.n	800d138 <__swrite+0x1e>
 800d12c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d130:	2302      	movs	r3, #2
 800d132:	2200      	movs	r2, #0
 800d134:	f000 f872 	bl	800d21c <_lseek_r>
 800d138:	89a3      	ldrh	r3, [r4, #12]
 800d13a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d13e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d142:	81a3      	strh	r3, [r4, #12]
 800d144:	4632      	mov	r2, r6
 800d146:	463b      	mov	r3, r7
 800d148:	4628      	mov	r0, r5
 800d14a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d14e:	f000 b889 	b.w	800d264 <_write_r>

0800d152 <__sseek>:
 800d152:	b510      	push	{r4, lr}
 800d154:	460c      	mov	r4, r1
 800d156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d15a:	f000 f85f 	bl	800d21c <_lseek_r>
 800d15e:	1c43      	adds	r3, r0, #1
 800d160:	89a3      	ldrh	r3, [r4, #12]
 800d162:	bf15      	itete	ne
 800d164:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d166:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d16a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d16e:	81a3      	strheq	r3, [r4, #12]
 800d170:	bf18      	it	ne
 800d172:	81a3      	strhne	r3, [r4, #12]
 800d174:	bd10      	pop	{r4, pc}

0800d176 <__sclose>:
 800d176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d17a:	f000 b83f 	b.w	800d1fc <_close_r>
	...

0800d180 <_vsiprintf_r>:
 800d180:	b500      	push	{lr}
 800d182:	b09b      	sub	sp, #108	@ 0x6c
 800d184:	9100      	str	r1, [sp, #0]
 800d186:	9104      	str	r1, [sp, #16]
 800d188:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d18c:	9105      	str	r1, [sp, #20]
 800d18e:	9102      	str	r1, [sp, #8]
 800d190:	4905      	ldr	r1, [pc, #20]	@ (800d1a8 <_vsiprintf_r+0x28>)
 800d192:	9103      	str	r1, [sp, #12]
 800d194:	4669      	mov	r1, sp
 800d196:	f002 f8f1 	bl	800f37c <_svfiprintf_r>
 800d19a:	9b00      	ldr	r3, [sp, #0]
 800d19c:	2200      	movs	r2, #0
 800d19e:	701a      	strb	r2, [r3, #0]
 800d1a0:	b01b      	add	sp, #108	@ 0x6c
 800d1a2:	f85d fb04 	ldr.w	pc, [sp], #4
 800d1a6:	bf00      	nop
 800d1a8:	ffff0208 	.word	0xffff0208

0800d1ac <vsiprintf>:
 800d1ac:	4613      	mov	r3, r2
 800d1ae:	460a      	mov	r2, r1
 800d1b0:	4601      	mov	r1, r0
 800d1b2:	4802      	ldr	r0, [pc, #8]	@ (800d1bc <vsiprintf+0x10>)
 800d1b4:	6800      	ldr	r0, [r0, #0]
 800d1b6:	f7ff bfe3 	b.w	800d180 <_vsiprintf_r>
 800d1ba:	bf00      	nop
 800d1bc:	20000208 	.word	0x20000208

0800d1c0 <memset>:
 800d1c0:	4402      	add	r2, r0
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	4293      	cmp	r3, r2
 800d1c6:	d100      	bne.n	800d1ca <memset+0xa>
 800d1c8:	4770      	bx	lr
 800d1ca:	f803 1b01 	strb.w	r1, [r3], #1
 800d1ce:	e7f9      	b.n	800d1c4 <memset+0x4>

0800d1d0 <strncmp>:
 800d1d0:	b510      	push	{r4, lr}
 800d1d2:	b16a      	cbz	r2, 800d1f0 <strncmp+0x20>
 800d1d4:	3901      	subs	r1, #1
 800d1d6:	1884      	adds	r4, r0, r2
 800d1d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	d103      	bne.n	800d1ec <strncmp+0x1c>
 800d1e4:	42a0      	cmp	r0, r4
 800d1e6:	d001      	beq.n	800d1ec <strncmp+0x1c>
 800d1e8:	2a00      	cmp	r2, #0
 800d1ea:	d1f5      	bne.n	800d1d8 <strncmp+0x8>
 800d1ec:	1ad0      	subs	r0, r2, r3
 800d1ee:	bd10      	pop	{r4, pc}
 800d1f0:	4610      	mov	r0, r2
 800d1f2:	e7fc      	b.n	800d1ee <strncmp+0x1e>

0800d1f4 <_localeconv_r>:
 800d1f4:	4800      	ldr	r0, [pc, #0]	@ (800d1f8 <_localeconv_r+0x4>)
 800d1f6:	4770      	bx	lr
 800d1f8:	2000018c 	.word	0x2000018c

0800d1fc <_close_r>:
 800d1fc:	b538      	push	{r3, r4, r5, lr}
 800d1fe:	4d06      	ldr	r5, [pc, #24]	@ (800d218 <_close_r+0x1c>)
 800d200:	2300      	movs	r3, #0
 800d202:	4604      	mov	r4, r0
 800d204:	4608      	mov	r0, r1
 800d206:	602b      	str	r3, [r5, #0]
 800d208:	f7f4 fd02 	bl	8001c10 <_close>
 800d20c:	1c43      	adds	r3, r0, #1
 800d20e:	d102      	bne.n	800d216 <_close_r+0x1a>
 800d210:	682b      	ldr	r3, [r5, #0]
 800d212:	b103      	cbz	r3, 800d216 <_close_r+0x1a>
 800d214:	6023      	str	r3, [r4, #0]
 800d216:	bd38      	pop	{r3, r4, r5, pc}
 800d218:	20000ae0 	.word	0x20000ae0

0800d21c <_lseek_r>:
 800d21c:	b538      	push	{r3, r4, r5, lr}
 800d21e:	4d07      	ldr	r5, [pc, #28]	@ (800d23c <_lseek_r+0x20>)
 800d220:	4604      	mov	r4, r0
 800d222:	4608      	mov	r0, r1
 800d224:	4611      	mov	r1, r2
 800d226:	2200      	movs	r2, #0
 800d228:	602a      	str	r2, [r5, #0]
 800d22a:	461a      	mov	r2, r3
 800d22c:	f7f4 fd17 	bl	8001c5e <_lseek>
 800d230:	1c43      	adds	r3, r0, #1
 800d232:	d102      	bne.n	800d23a <_lseek_r+0x1e>
 800d234:	682b      	ldr	r3, [r5, #0]
 800d236:	b103      	cbz	r3, 800d23a <_lseek_r+0x1e>
 800d238:	6023      	str	r3, [r4, #0]
 800d23a:	bd38      	pop	{r3, r4, r5, pc}
 800d23c:	20000ae0 	.word	0x20000ae0

0800d240 <_read_r>:
 800d240:	b538      	push	{r3, r4, r5, lr}
 800d242:	4d07      	ldr	r5, [pc, #28]	@ (800d260 <_read_r+0x20>)
 800d244:	4604      	mov	r4, r0
 800d246:	4608      	mov	r0, r1
 800d248:	4611      	mov	r1, r2
 800d24a:	2200      	movs	r2, #0
 800d24c:	602a      	str	r2, [r5, #0]
 800d24e:	461a      	mov	r2, r3
 800d250:	f7f4 fca5 	bl	8001b9e <_read>
 800d254:	1c43      	adds	r3, r0, #1
 800d256:	d102      	bne.n	800d25e <_read_r+0x1e>
 800d258:	682b      	ldr	r3, [r5, #0]
 800d25a:	b103      	cbz	r3, 800d25e <_read_r+0x1e>
 800d25c:	6023      	str	r3, [r4, #0]
 800d25e:	bd38      	pop	{r3, r4, r5, pc}
 800d260:	20000ae0 	.word	0x20000ae0

0800d264 <_write_r>:
 800d264:	b538      	push	{r3, r4, r5, lr}
 800d266:	4d07      	ldr	r5, [pc, #28]	@ (800d284 <_write_r+0x20>)
 800d268:	4604      	mov	r4, r0
 800d26a:	4608      	mov	r0, r1
 800d26c:	4611      	mov	r1, r2
 800d26e:	2200      	movs	r2, #0
 800d270:	602a      	str	r2, [r5, #0]
 800d272:	461a      	mov	r2, r3
 800d274:	f7f4 fcb0 	bl	8001bd8 <_write>
 800d278:	1c43      	adds	r3, r0, #1
 800d27a:	d102      	bne.n	800d282 <_write_r+0x1e>
 800d27c:	682b      	ldr	r3, [r5, #0]
 800d27e:	b103      	cbz	r3, 800d282 <_write_r+0x1e>
 800d280:	6023      	str	r3, [r4, #0]
 800d282:	bd38      	pop	{r3, r4, r5, pc}
 800d284:	20000ae0 	.word	0x20000ae0

0800d288 <__errno>:
 800d288:	4b01      	ldr	r3, [pc, #4]	@ (800d290 <__errno+0x8>)
 800d28a:	6818      	ldr	r0, [r3, #0]
 800d28c:	4770      	bx	lr
 800d28e:	bf00      	nop
 800d290:	20000208 	.word	0x20000208

0800d294 <__libc_init_array>:
 800d294:	b570      	push	{r4, r5, r6, lr}
 800d296:	4d0d      	ldr	r5, [pc, #52]	@ (800d2cc <__libc_init_array+0x38>)
 800d298:	4c0d      	ldr	r4, [pc, #52]	@ (800d2d0 <__libc_init_array+0x3c>)
 800d29a:	1b64      	subs	r4, r4, r5
 800d29c:	10a4      	asrs	r4, r4, #2
 800d29e:	2600      	movs	r6, #0
 800d2a0:	42a6      	cmp	r6, r4
 800d2a2:	d109      	bne.n	800d2b8 <__libc_init_array+0x24>
 800d2a4:	4d0b      	ldr	r5, [pc, #44]	@ (800d2d4 <__libc_init_array+0x40>)
 800d2a6:	4c0c      	ldr	r4, [pc, #48]	@ (800d2d8 <__libc_init_array+0x44>)
 800d2a8:	f002 fd58 	bl	800fd5c <_init>
 800d2ac:	1b64      	subs	r4, r4, r5
 800d2ae:	10a4      	asrs	r4, r4, #2
 800d2b0:	2600      	movs	r6, #0
 800d2b2:	42a6      	cmp	r6, r4
 800d2b4:	d105      	bne.n	800d2c2 <__libc_init_array+0x2e>
 800d2b6:	bd70      	pop	{r4, r5, r6, pc}
 800d2b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2bc:	4798      	blx	r3
 800d2be:	3601      	adds	r6, #1
 800d2c0:	e7ee      	b.n	800d2a0 <__libc_init_array+0xc>
 800d2c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2c6:	4798      	blx	r3
 800d2c8:	3601      	adds	r6, #1
 800d2ca:	e7f2      	b.n	800d2b2 <__libc_init_array+0x1e>
 800d2cc:	08010238 	.word	0x08010238
 800d2d0:	08010238 	.word	0x08010238
 800d2d4:	08010238 	.word	0x08010238
 800d2d8:	0801023c 	.word	0x0801023c

0800d2dc <__retarget_lock_init_recursive>:
 800d2dc:	4770      	bx	lr

0800d2de <__retarget_lock_acquire_recursive>:
 800d2de:	4770      	bx	lr

0800d2e0 <__retarget_lock_release_recursive>:
 800d2e0:	4770      	bx	lr

0800d2e2 <memcpy>:
 800d2e2:	440a      	add	r2, r1
 800d2e4:	4291      	cmp	r1, r2
 800d2e6:	f100 33ff 	add.w	r3, r0, #4294967295
 800d2ea:	d100      	bne.n	800d2ee <memcpy+0xc>
 800d2ec:	4770      	bx	lr
 800d2ee:	b510      	push	{r4, lr}
 800d2f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2f8:	4291      	cmp	r1, r2
 800d2fa:	d1f9      	bne.n	800d2f0 <memcpy+0xe>
 800d2fc:	bd10      	pop	{r4, pc}
	...

0800d300 <nan>:
 800d300:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d308 <nan+0x8>
 800d304:	4770      	bx	lr
 800d306:	bf00      	nop
 800d308:	00000000 	.word	0x00000000
 800d30c:	7ff80000 	.word	0x7ff80000

0800d310 <nanf>:
 800d310:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d318 <nanf+0x8>
 800d314:	4770      	bx	lr
 800d316:	bf00      	nop
 800d318:	7fc00000 	.word	0x7fc00000

0800d31c <quorem>:
 800d31c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d320:	6903      	ldr	r3, [r0, #16]
 800d322:	690c      	ldr	r4, [r1, #16]
 800d324:	42a3      	cmp	r3, r4
 800d326:	4607      	mov	r7, r0
 800d328:	db7e      	blt.n	800d428 <quorem+0x10c>
 800d32a:	3c01      	subs	r4, #1
 800d32c:	f101 0814 	add.w	r8, r1, #20
 800d330:	00a3      	lsls	r3, r4, #2
 800d332:	f100 0514 	add.w	r5, r0, #20
 800d336:	9300      	str	r3, [sp, #0]
 800d338:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d33c:	9301      	str	r3, [sp, #4]
 800d33e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d342:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d346:	3301      	adds	r3, #1
 800d348:	429a      	cmp	r2, r3
 800d34a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d34e:	fbb2 f6f3 	udiv	r6, r2, r3
 800d352:	d32e      	bcc.n	800d3b2 <quorem+0x96>
 800d354:	f04f 0a00 	mov.w	sl, #0
 800d358:	46c4      	mov	ip, r8
 800d35a:	46ae      	mov	lr, r5
 800d35c:	46d3      	mov	fp, sl
 800d35e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d362:	b298      	uxth	r0, r3
 800d364:	fb06 a000 	mla	r0, r6, r0, sl
 800d368:	0c02      	lsrs	r2, r0, #16
 800d36a:	0c1b      	lsrs	r3, r3, #16
 800d36c:	fb06 2303 	mla	r3, r6, r3, r2
 800d370:	f8de 2000 	ldr.w	r2, [lr]
 800d374:	b280      	uxth	r0, r0
 800d376:	b292      	uxth	r2, r2
 800d378:	1a12      	subs	r2, r2, r0
 800d37a:	445a      	add	r2, fp
 800d37c:	f8de 0000 	ldr.w	r0, [lr]
 800d380:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d384:	b29b      	uxth	r3, r3
 800d386:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d38a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d38e:	b292      	uxth	r2, r2
 800d390:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d394:	45e1      	cmp	r9, ip
 800d396:	f84e 2b04 	str.w	r2, [lr], #4
 800d39a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d39e:	d2de      	bcs.n	800d35e <quorem+0x42>
 800d3a0:	9b00      	ldr	r3, [sp, #0]
 800d3a2:	58eb      	ldr	r3, [r5, r3]
 800d3a4:	b92b      	cbnz	r3, 800d3b2 <quorem+0x96>
 800d3a6:	9b01      	ldr	r3, [sp, #4]
 800d3a8:	3b04      	subs	r3, #4
 800d3aa:	429d      	cmp	r5, r3
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	d32f      	bcc.n	800d410 <quorem+0xf4>
 800d3b0:	613c      	str	r4, [r7, #16]
 800d3b2:	4638      	mov	r0, r7
 800d3b4:	f001 fd10 	bl	800edd8 <__mcmp>
 800d3b8:	2800      	cmp	r0, #0
 800d3ba:	db25      	blt.n	800d408 <quorem+0xec>
 800d3bc:	4629      	mov	r1, r5
 800d3be:	2000      	movs	r0, #0
 800d3c0:	f858 2b04 	ldr.w	r2, [r8], #4
 800d3c4:	f8d1 c000 	ldr.w	ip, [r1]
 800d3c8:	fa1f fe82 	uxth.w	lr, r2
 800d3cc:	fa1f f38c 	uxth.w	r3, ip
 800d3d0:	eba3 030e 	sub.w	r3, r3, lr
 800d3d4:	4403      	add	r3, r0
 800d3d6:	0c12      	lsrs	r2, r2, #16
 800d3d8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d3dc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d3e0:	b29b      	uxth	r3, r3
 800d3e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d3e6:	45c1      	cmp	r9, r8
 800d3e8:	f841 3b04 	str.w	r3, [r1], #4
 800d3ec:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d3f0:	d2e6      	bcs.n	800d3c0 <quorem+0xa4>
 800d3f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d3f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d3fa:	b922      	cbnz	r2, 800d406 <quorem+0xea>
 800d3fc:	3b04      	subs	r3, #4
 800d3fe:	429d      	cmp	r5, r3
 800d400:	461a      	mov	r2, r3
 800d402:	d30b      	bcc.n	800d41c <quorem+0x100>
 800d404:	613c      	str	r4, [r7, #16]
 800d406:	3601      	adds	r6, #1
 800d408:	4630      	mov	r0, r6
 800d40a:	b003      	add	sp, #12
 800d40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d410:	6812      	ldr	r2, [r2, #0]
 800d412:	3b04      	subs	r3, #4
 800d414:	2a00      	cmp	r2, #0
 800d416:	d1cb      	bne.n	800d3b0 <quorem+0x94>
 800d418:	3c01      	subs	r4, #1
 800d41a:	e7c6      	b.n	800d3aa <quorem+0x8e>
 800d41c:	6812      	ldr	r2, [r2, #0]
 800d41e:	3b04      	subs	r3, #4
 800d420:	2a00      	cmp	r2, #0
 800d422:	d1ef      	bne.n	800d404 <quorem+0xe8>
 800d424:	3c01      	subs	r4, #1
 800d426:	e7ea      	b.n	800d3fe <quorem+0xe2>
 800d428:	2000      	movs	r0, #0
 800d42a:	e7ee      	b.n	800d40a <quorem+0xee>
 800d42c:	0000      	movs	r0, r0
	...

0800d430 <_dtoa_r>:
 800d430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d434:	69c7      	ldr	r7, [r0, #28]
 800d436:	b099      	sub	sp, #100	@ 0x64
 800d438:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d43c:	ec55 4b10 	vmov	r4, r5, d0
 800d440:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d442:	9109      	str	r1, [sp, #36]	@ 0x24
 800d444:	4683      	mov	fp, r0
 800d446:	920e      	str	r2, [sp, #56]	@ 0x38
 800d448:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d44a:	b97f      	cbnz	r7, 800d46c <_dtoa_r+0x3c>
 800d44c:	2010      	movs	r0, #16
 800d44e:	f001 f937 	bl	800e6c0 <malloc>
 800d452:	4602      	mov	r2, r0
 800d454:	f8cb 001c 	str.w	r0, [fp, #28]
 800d458:	b920      	cbnz	r0, 800d464 <_dtoa_r+0x34>
 800d45a:	4ba7      	ldr	r3, [pc, #668]	@ (800d6f8 <_dtoa_r+0x2c8>)
 800d45c:	21ef      	movs	r1, #239	@ 0xef
 800d45e:	48a7      	ldr	r0, [pc, #668]	@ (800d6fc <_dtoa_r+0x2cc>)
 800d460:	f002 f95e 	bl	800f720 <__assert_func>
 800d464:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d468:	6007      	str	r7, [r0, #0]
 800d46a:	60c7      	str	r7, [r0, #12]
 800d46c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d470:	6819      	ldr	r1, [r3, #0]
 800d472:	b159      	cbz	r1, 800d48c <_dtoa_r+0x5c>
 800d474:	685a      	ldr	r2, [r3, #4]
 800d476:	604a      	str	r2, [r1, #4]
 800d478:	2301      	movs	r3, #1
 800d47a:	4093      	lsls	r3, r2
 800d47c:	608b      	str	r3, [r1, #8]
 800d47e:	4658      	mov	r0, fp
 800d480:	f001 fa26 	bl	800e8d0 <_Bfree>
 800d484:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d488:	2200      	movs	r2, #0
 800d48a:	601a      	str	r2, [r3, #0]
 800d48c:	1e2b      	subs	r3, r5, #0
 800d48e:	bfb9      	ittee	lt
 800d490:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d494:	9303      	strlt	r3, [sp, #12]
 800d496:	2300      	movge	r3, #0
 800d498:	6033      	strge	r3, [r6, #0]
 800d49a:	9f03      	ldr	r7, [sp, #12]
 800d49c:	4b98      	ldr	r3, [pc, #608]	@ (800d700 <_dtoa_r+0x2d0>)
 800d49e:	bfbc      	itt	lt
 800d4a0:	2201      	movlt	r2, #1
 800d4a2:	6032      	strlt	r2, [r6, #0]
 800d4a4:	43bb      	bics	r3, r7
 800d4a6:	d112      	bne.n	800d4ce <_dtoa_r+0x9e>
 800d4a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d4aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d4ae:	6013      	str	r3, [r2, #0]
 800d4b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d4b4:	4323      	orrs	r3, r4
 800d4b6:	f000 854d 	beq.w	800df54 <_dtoa_r+0xb24>
 800d4ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d4bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d714 <_dtoa_r+0x2e4>
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	f000 854f 	beq.w	800df64 <_dtoa_r+0xb34>
 800d4c6:	f10a 0303 	add.w	r3, sl, #3
 800d4ca:	f000 bd49 	b.w	800df60 <_dtoa_r+0xb30>
 800d4ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	ec51 0b17 	vmov	r0, r1, d7
 800d4d8:	2300      	movs	r3, #0
 800d4da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d4de:	f7f3 fb1b 	bl	8000b18 <__aeabi_dcmpeq>
 800d4e2:	4680      	mov	r8, r0
 800d4e4:	b158      	cbz	r0, 800d4fe <_dtoa_r+0xce>
 800d4e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	6013      	str	r3, [r2, #0]
 800d4ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d4ee:	b113      	cbz	r3, 800d4f6 <_dtoa_r+0xc6>
 800d4f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d4f2:	4b84      	ldr	r3, [pc, #528]	@ (800d704 <_dtoa_r+0x2d4>)
 800d4f4:	6013      	str	r3, [r2, #0]
 800d4f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d718 <_dtoa_r+0x2e8>
 800d4fa:	f000 bd33 	b.w	800df64 <_dtoa_r+0xb34>
 800d4fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d502:	aa16      	add	r2, sp, #88	@ 0x58
 800d504:	a917      	add	r1, sp, #92	@ 0x5c
 800d506:	4658      	mov	r0, fp
 800d508:	f001 fd86 	bl	800f018 <__d2b>
 800d50c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d510:	4681      	mov	r9, r0
 800d512:	2e00      	cmp	r6, #0
 800d514:	d077      	beq.n	800d606 <_dtoa_r+0x1d6>
 800d516:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d518:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d51c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d520:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d524:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d528:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d52c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d530:	4619      	mov	r1, r3
 800d532:	2200      	movs	r2, #0
 800d534:	4b74      	ldr	r3, [pc, #464]	@ (800d708 <_dtoa_r+0x2d8>)
 800d536:	f7f2 fecf 	bl	80002d8 <__aeabi_dsub>
 800d53a:	a369      	add	r3, pc, #420	@ (adr r3, 800d6e0 <_dtoa_r+0x2b0>)
 800d53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d540:	f7f3 f882 	bl	8000648 <__aeabi_dmul>
 800d544:	a368      	add	r3, pc, #416	@ (adr r3, 800d6e8 <_dtoa_r+0x2b8>)
 800d546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d54a:	f7f2 fec7 	bl	80002dc <__adddf3>
 800d54e:	4604      	mov	r4, r0
 800d550:	4630      	mov	r0, r6
 800d552:	460d      	mov	r5, r1
 800d554:	f7f3 f80e 	bl	8000574 <__aeabi_i2d>
 800d558:	a365      	add	r3, pc, #404	@ (adr r3, 800d6f0 <_dtoa_r+0x2c0>)
 800d55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d55e:	f7f3 f873 	bl	8000648 <__aeabi_dmul>
 800d562:	4602      	mov	r2, r0
 800d564:	460b      	mov	r3, r1
 800d566:	4620      	mov	r0, r4
 800d568:	4629      	mov	r1, r5
 800d56a:	f7f2 feb7 	bl	80002dc <__adddf3>
 800d56e:	4604      	mov	r4, r0
 800d570:	460d      	mov	r5, r1
 800d572:	f7f3 fb19 	bl	8000ba8 <__aeabi_d2iz>
 800d576:	2200      	movs	r2, #0
 800d578:	4607      	mov	r7, r0
 800d57a:	2300      	movs	r3, #0
 800d57c:	4620      	mov	r0, r4
 800d57e:	4629      	mov	r1, r5
 800d580:	f7f3 fad4 	bl	8000b2c <__aeabi_dcmplt>
 800d584:	b140      	cbz	r0, 800d598 <_dtoa_r+0x168>
 800d586:	4638      	mov	r0, r7
 800d588:	f7f2 fff4 	bl	8000574 <__aeabi_i2d>
 800d58c:	4622      	mov	r2, r4
 800d58e:	462b      	mov	r3, r5
 800d590:	f7f3 fac2 	bl	8000b18 <__aeabi_dcmpeq>
 800d594:	b900      	cbnz	r0, 800d598 <_dtoa_r+0x168>
 800d596:	3f01      	subs	r7, #1
 800d598:	2f16      	cmp	r7, #22
 800d59a:	d851      	bhi.n	800d640 <_dtoa_r+0x210>
 800d59c:	4b5b      	ldr	r3, [pc, #364]	@ (800d70c <_dtoa_r+0x2dc>)
 800d59e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d5aa:	f7f3 fabf 	bl	8000b2c <__aeabi_dcmplt>
 800d5ae:	2800      	cmp	r0, #0
 800d5b0:	d048      	beq.n	800d644 <_dtoa_r+0x214>
 800d5b2:	3f01      	subs	r7, #1
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	9312      	str	r3, [sp, #72]	@ 0x48
 800d5b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d5ba:	1b9b      	subs	r3, r3, r6
 800d5bc:	1e5a      	subs	r2, r3, #1
 800d5be:	bf44      	itt	mi
 800d5c0:	f1c3 0801 	rsbmi	r8, r3, #1
 800d5c4:	2300      	movmi	r3, #0
 800d5c6:	9208      	str	r2, [sp, #32]
 800d5c8:	bf54      	ite	pl
 800d5ca:	f04f 0800 	movpl.w	r8, #0
 800d5ce:	9308      	strmi	r3, [sp, #32]
 800d5d0:	2f00      	cmp	r7, #0
 800d5d2:	db39      	blt.n	800d648 <_dtoa_r+0x218>
 800d5d4:	9b08      	ldr	r3, [sp, #32]
 800d5d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d5d8:	443b      	add	r3, r7
 800d5da:	9308      	str	r3, [sp, #32]
 800d5dc:	2300      	movs	r3, #0
 800d5de:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5e2:	2b09      	cmp	r3, #9
 800d5e4:	d864      	bhi.n	800d6b0 <_dtoa_r+0x280>
 800d5e6:	2b05      	cmp	r3, #5
 800d5e8:	bfc4      	itt	gt
 800d5ea:	3b04      	subgt	r3, #4
 800d5ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d5ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5f0:	f1a3 0302 	sub.w	r3, r3, #2
 800d5f4:	bfcc      	ite	gt
 800d5f6:	2400      	movgt	r4, #0
 800d5f8:	2401      	movle	r4, #1
 800d5fa:	2b03      	cmp	r3, #3
 800d5fc:	d863      	bhi.n	800d6c6 <_dtoa_r+0x296>
 800d5fe:	e8df f003 	tbb	[pc, r3]
 800d602:	372a      	.short	0x372a
 800d604:	5535      	.short	0x5535
 800d606:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d60a:	441e      	add	r6, r3
 800d60c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d610:	2b20      	cmp	r3, #32
 800d612:	bfc1      	itttt	gt
 800d614:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d618:	409f      	lslgt	r7, r3
 800d61a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d61e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d622:	bfd6      	itet	le
 800d624:	f1c3 0320 	rsble	r3, r3, #32
 800d628:	ea47 0003 	orrgt.w	r0, r7, r3
 800d62c:	fa04 f003 	lslle.w	r0, r4, r3
 800d630:	f7f2 ff90 	bl	8000554 <__aeabi_ui2d>
 800d634:	2201      	movs	r2, #1
 800d636:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d63a:	3e01      	subs	r6, #1
 800d63c:	9214      	str	r2, [sp, #80]	@ 0x50
 800d63e:	e777      	b.n	800d530 <_dtoa_r+0x100>
 800d640:	2301      	movs	r3, #1
 800d642:	e7b8      	b.n	800d5b6 <_dtoa_r+0x186>
 800d644:	9012      	str	r0, [sp, #72]	@ 0x48
 800d646:	e7b7      	b.n	800d5b8 <_dtoa_r+0x188>
 800d648:	427b      	negs	r3, r7
 800d64a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d64c:	2300      	movs	r3, #0
 800d64e:	eba8 0807 	sub.w	r8, r8, r7
 800d652:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d654:	e7c4      	b.n	800d5e0 <_dtoa_r+0x1b0>
 800d656:	2300      	movs	r3, #0
 800d658:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d65a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	dc35      	bgt.n	800d6cc <_dtoa_r+0x29c>
 800d660:	2301      	movs	r3, #1
 800d662:	9300      	str	r3, [sp, #0]
 800d664:	9307      	str	r3, [sp, #28]
 800d666:	461a      	mov	r2, r3
 800d668:	920e      	str	r2, [sp, #56]	@ 0x38
 800d66a:	e00b      	b.n	800d684 <_dtoa_r+0x254>
 800d66c:	2301      	movs	r3, #1
 800d66e:	e7f3      	b.n	800d658 <_dtoa_r+0x228>
 800d670:	2300      	movs	r3, #0
 800d672:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d674:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d676:	18fb      	adds	r3, r7, r3
 800d678:	9300      	str	r3, [sp, #0]
 800d67a:	3301      	adds	r3, #1
 800d67c:	2b01      	cmp	r3, #1
 800d67e:	9307      	str	r3, [sp, #28]
 800d680:	bfb8      	it	lt
 800d682:	2301      	movlt	r3, #1
 800d684:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d688:	2100      	movs	r1, #0
 800d68a:	2204      	movs	r2, #4
 800d68c:	f102 0514 	add.w	r5, r2, #20
 800d690:	429d      	cmp	r5, r3
 800d692:	d91f      	bls.n	800d6d4 <_dtoa_r+0x2a4>
 800d694:	6041      	str	r1, [r0, #4]
 800d696:	4658      	mov	r0, fp
 800d698:	f001 f8da 	bl	800e850 <_Balloc>
 800d69c:	4682      	mov	sl, r0
 800d69e:	2800      	cmp	r0, #0
 800d6a0:	d13c      	bne.n	800d71c <_dtoa_r+0x2ec>
 800d6a2:	4b1b      	ldr	r3, [pc, #108]	@ (800d710 <_dtoa_r+0x2e0>)
 800d6a4:	4602      	mov	r2, r0
 800d6a6:	f240 11af 	movw	r1, #431	@ 0x1af
 800d6aa:	e6d8      	b.n	800d45e <_dtoa_r+0x2e>
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	e7e0      	b.n	800d672 <_dtoa_r+0x242>
 800d6b0:	2401      	movs	r4, #1
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d6b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d6bc:	9300      	str	r3, [sp, #0]
 800d6be:	9307      	str	r3, [sp, #28]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	2312      	movs	r3, #18
 800d6c4:	e7d0      	b.n	800d668 <_dtoa_r+0x238>
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6ca:	e7f5      	b.n	800d6b8 <_dtoa_r+0x288>
 800d6cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6ce:	9300      	str	r3, [sp, #0]
 800d6d0:	9307      	str	r3, [sp, #28]
 800d6d2:	e7d7      	b.n	800d684 <_dtoa_r+0x254>
 800d6d4:	3101      	adds	r1, #1
 800d6d6:	0052      	lsls	r2, r2, #1
 800d6d8:	e7d8      	b.n	800d68c <_dtoa_r+0x25c>
 800d6da:	bf00      	nop
 800d6dc:	f3af 8000 	nop.w
 800d6e0:	636f4361 	.word	0x636f4361
 800d6e4:	3fd287a7 	.word	0x3fd287a7
 800d6e8:	8b60c8b3 	.word	0x8b60c8b3
 800d6ec:	3fc68a28 	.word	0x3fc68a28
 800d6f0:	509f79fb 	.word	0x509f79fb
 800d6f4:	3fd34413 	.word	0x3fd34413
 800d6f8:	0800fea6 	.word	0x0800fea6
 800d6fc:	0800febd 	.word	0x0800febd
 800d700:	7ff00000 	.word	0x7ff00000
 800d704:	0800fe69 	.word	0x0800fe69
 800d708:	3ff80000 	.word	0x3ff80000
 800d70c:	08010018 	.word	0x08010018
 800d710:	0800ff15 	.word	0x0800ff15
 800d714:	0800fea2 	.word	0x0800fea2
 800d718:	0800fe68 	.word	0x0800fe68
 800d71c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d720:	6018      	str	r0, [r3, #0]
 800d722:	9b07      	ldr	r3, [sp, #28]
 800d724:	2b0e      	cmp	r3, #14
 800d726:	f200 80a4 	bhi.w	800d872 <_dtoa_r+0x442>
 800d72a:	2c00      	cmp	r4, #0
 800d72c:	f000 80a1 	beq.w	800d872 <_dtoa_r+0x442>
 800d730:	2f00      	cmp	r7, #0
 800d732:	dd33      	ble.n	800d79c <_dtoa_r+0x36c>
 800d734:	4bad      	ldr	r3, [pc, #692]	@ (800d9ec <_dtoa_r+0x5bc>)
 800d736:	f007 020f 	and.w	r2, r7, #15
 800d73a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d73e:	ed93 7b00 	vldr	d7, [r3]
 800d742:	05f8      	lsls	r0, r7, #23
 800d744:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d748:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d74c:	d516      	bpl.n	800d77c <_dtoa_r+0x34c>
 800d74e:	4ba8      	ldr	r3, [pc, #672]	@ (800d9f0 <_dtoa_r+0x5c0>)
 800d750:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d754:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d758:	f7f3 f8a0 	bl	800089c <__aeabi_ddiv>
 800d75c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d760:	f004 040f 	and.w	r4, r4, #15
 800d764:	2603      	movs	r6, #3
 800d766:	4da2      	ldr	r5, [pc, #648]	@ (800d9f0 <_dtoa_r+0x5c0>)
 800d768:	b954      	cbnz	r4, 800d780 <_dtoa_r+0x350>
 800d76a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d76e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d772:	f7f3 f893 	bl	800089c <__aeabi_ddiv>
 800d776:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d77a:	e028      	b.n	800d7ce <_dtoa_r+0x39e>
 800d77c:	2602      	movs	r6, #2
 800d77e:	e7f2      	b.n	800d766 <_dtoa_r+0x336>
 800d780:	07e1      	lsls	r1, r4, #31
 800d782:	d508      	bpl.n	800d796 <_dtoa_r+0x366>
 800d784:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d788:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d78c:	f7f2 ff5c 	bl	8000648 <__aeabi_dmul>
 800d790:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d794:	3601      	adds	r6, #1
 800d796:	1064      	asrs	r4, r4, #1
 800d798:	3508      	adds	r5, #8
 800d79a:	e7e5      	b.n	800d768 <_dtoa_r+0x338>
 800d79c:	f000 80d2 	beq.w	800d944 <_dtoa_r+0x514>
 800d7a0:	427c      	negs	r4, r7
 800d7a2:	4b92      	ldr	r3, [pc, #584]	@ (800d9ec <_dtoa_r+0x5bc>)
 800d7a4:	4d92      	ldr	r5, [pc, #584]	@ (800d9f0 <_dtoa_r+0x5c0>)
 800d7a6:	f004 020f 	and.w	r2, r4, #15
 800d7aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d7b6:	f7f2 ff47 	bl	8000648 <__aeabi_dmul>
 800d7ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7be:	1124      	asrs	r4, r4, #4
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	2602      	movs	r6, #2
 800d7c4:	2c00      	cmp	r4, #0
 800d7c6:	f040 80b2 	bne.w	800d92e <_dtoa_r+0x4fe>
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d1d3      	bne.n	800d776 <_dtoa_r+0x346>
 800d7ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d7d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	f000 80b7 	beq.w	800d948 <_dtoa_r+0x518>
 800d7da:	4b86      	ldr	r3, [pc, #536]	@ (800d9f4 <_dtoa_r+0x5c4>)
 800d7dc:	2200      	movs	r2, #0
 800d7de:	4620      	mov	r0, r4
 800d7e0:	4629      	mov	r1, r5
 800d7e2:	f7f3 f9a3 	bl	8000b2c <__aeabi_dcmplt>
 800d7e6:	2800      	cmp	r0, #0
 800d7e8:	f000 80ae 	beq.w	800d948 <_dtoa_r+0x518>
 800d7ec:	9b07      	ldr	r3, [sp, #28]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	f000 80aa 	beq.w	800d948 <_dtoa_r+0x518>
 800d7f4:	9b00      	ldr	r3, [sp, #0]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	dd37      	ble.n	800d86a <_dtoa_r+0x43a>
 800d7fa:	1e7b      	subs	r3, r7, #1
 800d7fc:	9304      	str	r3, [sp, #16]
 800d7fe:	4620      	mov	r0, r4
 800d800:	4b7d      	ldr	r3, [pc, #500]	@ (800d9f8 <_dtoa_r+0x5c8>)
 800d802:	2200      	movs	r2, #0
 800d804:	4629      	mov	r1, r5
 800d806:	f7f2 ff1f 	bl	8000648 <__aeabi_dmul>
 800d80a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d80e:	9c00      	ldr	r4, [sp, #0]
 800d810:	3601      	adds	r6, #1
 800d812:	4630      	mov	r0, r6
 800d814:	f7f2 feae 	bl	8000574 <__aeabi_i2d>
 800d818:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d81c:	f7f2 ff14 	bl	8000648 <__aeabi_dmul>
 800d820:	4b76      	ldr	r3, [pc, #472]	@ (800d9fc <_dtoa_r+0x5cc>)
 800d822:	2200      	movs	r2, #0
 800d824:	f7f2 fd5a 	bl	80002dc <__adddf3>
 800d828:	4605      	mov	r5, r0
 800d82a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d82e:	2c00      	cmp	r4, #0
 800d830:	f040 808d 	bne.w	800d94e <_dtoa_r+0x51e>
 800d834:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d838:	4b71      	ldr	r3, [pc, #452]	@ (800da00 <_dtoa_r+0x5d0>)
 800d83a:	2200      	movs	r2, #0
 800d83c:	f7f2 fd4c 	bl	80002d8 <__aeabi_dsub>
 800d840:	4602      	mov	r2, r0
 800d842:	460b      	mov	r3, r1
 800d844:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d848:	462a      	mov	r2, r5
 800d84a:	4633      	mov	r3, r6
 800d84c:	f7f3 f98c 	bl	8000b68 <__aeabi_dcmpgt>
 800d850:	2800      	cmp	r0, #0
 800d852:	f040 828b 	bne.w	800dd6c <_dtoa_r+0x93c>
 800d856:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d85a:	462a      	mov	r2, r5
 800d85c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d860:	f7f3 f964 	bl	8000b2c <__aeabi_dcmplt>
 800d864:	2800      	cmp	r0, #0
 800d866:	f040 8128 	bne.w	800daba <_dtoa_r+0x68a>
 800d86a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d86e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d872:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d874:	2b00      	cmp	r3, #0
 800d876:	f2c0 815a 	blt.w	800db2e <_dtoa_r+0x6fe>
 800d87a:	2f0e      	cmp	r7, #14
 800d87c:	f300 8157 	bgt.w	800db2e <_dtoa_r+0x6fe>
 800d880:	4b5a      	ldr	r3, [pc, #360]	@ (800d9ec <_dtoa_r+0x5bc>)
 800d882:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d886:	ed93 7b00 	vldr	d7, [r3]
 800d88a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	ed8d 7b00 	vstr	d7, [sp]
 800d892:	da03      	bge.n	800d89c <_dtoa_r+0x46c>
 800d894:	9b07      	ldr	r3, [sp, #28]
 800d896:	2b00      	cmp	r3, #0
 800d898:	f340 8101 	ble.w	800da9e <_dtoa_r+0x66e>
 800d89c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d8a0:	4656      	mov	r6, sl
 800d8a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8a6:	4620      	mov	r0, r4
 800d8a8:	4629      	mov	r1, r5
 800d8aa:	f7f2 fff7 	bl	800089c <__aeabi_ddiv>
 800d8ae:	f7f3 f97b 	bl	8000ba8 <__aeabi_d2iz>
 800d8b2:	4680      	mov	r8, r0
 800d8b4:	f7f2 fe5e 	bl	8000574 <__aeabi_i2d>
 800d8b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8bc:	f7f2 fec4 	bl	8000648 <__aeabi_dmul>
 800d8c0:	4602      	mov	r2, r0
 800d8c2:	460b      	mov	r3, r1
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	4629      	mov	r1, r5
 800d8c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d8cc:	f7f2 fd04 	bl	80002d8 <__aeabi_dsub>
 800d8d0:	f806 4b01 	strb.w	r4, [r6], #1
 800d8d4:	9d07      	ldr	r5, [sp, #28]
 800d8d6:	eba6 040a 	sub.w	r4, r6, sl
 800d8da:	42a5      	cmp	r5, r4
 800d8dc:	4602      	mov	r2, r0
 800d8de:	460b      	mov	r3, r1
 800d8e0:	f040 8117 	bne.w	800db12 <_dtoa_r+0x6e2>
 800d8e4:	f7f2 fcfa 	bl	80002dc <__adddf3>
 800d8e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8ec:	4604      	mov	r4, r0
 800d8ee:	460d      	mov	r5, r1
 800d8f0:	f7f3 f93a 	bl	8000b68 <__aeabi_dcmpgt>
 800d8f4:	2800      	cmp	r0, #0
 800d8f6:	f040 80f9 	bne.w	800daec <_dtoa_r+0x6bc>
 800d8fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8fe:	4620      	mov	r0, r4
 800d900:	4629      	mov	r1, r5
 800d902:	f7f3 f909 	bl	8000b18 <__aeabi_dcmpeq>
 800d906:	b118      	cbz	r0, 800d910 <_dtoa_r+0x4e0>
 800d908:	f018 0f01 	tst.w	r8, #1
 800d90c:	f040 80ee 	bne.w	800daec <_dtoa_r+0x6bc>
 800d910:	4649      	mov	r1, r9
 800d912:	4658      	mov	r0, fp
 800d914:	f000 ffdc 	bl	800e8d0 <_Bfree>
 800d918:	2300      	movs	r3, #0
 800d91a:	7033      	strb	r3, [r6, #0]
 800d91c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d91e:	3701      	adds	r7, #1
 800d920:	601f      	str	r7, [r3, #0]
 800d922:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d924:	2b00      	cmp	r3, #0
 800d926:	f000 831d 	beq.w	800df64 <_dtoa_r+0xb34>
 800d92a:	601e      	str	r6, [r3, #0]
 800d92c:	e31a      	b.n	800df64 <_dtoa_r+0xb34>
 800d92e:	07e2      	lsls	r2, r4, #31
 800d930:	d505      	bpl.n	800d93e <_dtoa_r+0x50e>
 800d932:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d936:	f7f2 fe87 	bl	8000648 <__aeabi_dmul>
 800d93a:	3601      	adds	r6, #1
 800d93c:	2301      	movs	r3, #1
 800d93e:	1064      	asrs	r4, r4, #1
 800d940:	3508      	adds	r5, #8
 800d942:	e73f      	b.n	800d7c4 <_dtoa_r+0x394>
 800d944:	2602      	movs	r6, #2
 800d946:	e742      	b.n	800d7ce <_dtoa_r+0x39e>
 800d948:	9c07      	ldr	r4, [sp, #28]
 800d94a:	9704      	str	r7, [sp, #16]
 800d94c:	e761      	b.n	800d812 <_dtoa_r+0x3e2>
 800d94e:	4b27      	ldr	r3, [pc, #156]	@ (800d9ec <_dtoa_r+0x5bc>)
 800d950:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d952:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d956:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d95a:	4454      	add	r4, sl
 800d95c:	2900      	cmp	r1, #0
 800d95e:	d053      	beq.n	800da08 <_dtoa_r+0x5d8>
 800d960:	4928      	ldr	r1, [pc, #160]	@ (800da04 <_dtoa_r+0x5d4>)
 800d962:	2000      	movs	r0, #0
 800d964:	f7f2 ff9a 	bl	800089c <__aeabi_ddiv>
 800d968:	4633      	mov	r3, r6
 800d96a:	462a      	mov	r2, r5
 800d96c:	f7f2 fcb4 	bl	80002d8 <__aeabi_dsub>
 800d970:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d974:	4656      	mov	r6, sl
 800d976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d97a:	f7f3 f915 	bl	8000ba8 <__aeabi_d2iz>
 800d97e:	4605      	mov	r5, r0
 800d980:	f7f2 fdf8 	bl	8000574 <__aeabi_i2d>
 800d984:	4602      	mov	r2, r0
 800d986:	460b      	mov	r3, r1
 800d988:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d98c:	f7f2 fca4 	bl	80002d8 <__aeabi_dsub>
 800d990:	3530      	adds	r5, #48	@ 0x30
 800d992:	4602      	mov	r2, r0
 800d994:	460b      	mov	r3, r1
 800d996:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d99a:	f806 5b01 	strb.w	r5, [r6], #1
 800d99e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d9a2:	f7f3 f8c3 	bl	8000b2c <__aeabi_dcmplt>
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	d171      	bne.n	800da8e <_dtoa_r+0x65e>
 800d9aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9ae:	4911      	ldr	r1, [pc, #68]	@ (800d9f4 <_dtoa_r+0x5c4>)
 800d9b0:	2000      	movs	r0, #0
 800d9b2:	f7f2 fc91 	bl	80002d8 <__aeabi_dsub>
 800d9b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d9ba:	f7f3 f8b7 	bl	8000b2c <__aeabi_dcmplt>
 800d9be:	2800      	cmp	r0, #0
 800d9c0:	f040 8095 	bne.w	800daee <_dtoa_r+0x6be>
 800d9c4:	42a6      	cmp	r6, r4
 800d9c6:	f43f af50 	beq.w	800d86a <_dtoa_r+0x43a>
 800d9ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d9ce:	4b0a      	ldr	r3, [pc, #40]	@ (800d9f8 <_dtoa_r+0x5c8>)
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	f7f2 fe39 	bl	8000648 <__aeabi_dmul>
 800d9d6:	4b08      	ldr	r3, [pc, #32]	@ (800d9f8 <_dtoa_r+0x5c8>)
 800d9d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d9dc:	2200      	movs	r2, #0
 800d9de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9e2:	f7f2 fe31 	bl	8000648 <__aeabi_dmul>
 800d9e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9ea:	e7c4      	b.n	800d976 <_dtoa_r+0x546>
 800d9ec:	08010018 	.word	0x08010018
 800d9f0:	0800fff0 	.word	0x0800fff0
 800d9f4:	3ff00000 	.word	0x3ff00000
 800d9f8:	40240000 	.word	0x40240000
 800d9fc:	401c0000 	.word	0x401c0000
 800da00:	40140000 	.word	0x40140000
 800da04:	3fe00000 	.word	0x3fe00000
 800da08:	4631      	mov	r1, r6
 800da0a:	4628      	mov	r0, r5
 800da0c:	f7f2 fe1c 	bl	8000648 <__aeabi_dmul>
 800da10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800da14:	9415      	str	r4, [sp, #84]	@ 0x54
 800da16:	4656      	mov	r6, sl
 800da18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da1c:	f7f3 f8c4 	bl	8000ba8 <__aeabi_d2iz>
 800da20:	4605      	mov	r5, r0
 800da22:	f7f2 fda7 	bl	8000574 <__aeabi_i2d>
 800da26:	4602      	mov	r2, r0
 800da28:	460b      	mov	r3, r1
 800da2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da2e:	f7f2 fc53 	bl	80002d8 <__aeabi_dsub>
 800da32:	3530      	adds	r5, #48	@ 0x30
 800da34:	f806 5b01 	strb.w	r5, [r6], #1
 800da38:	4602      	mov	r2, r0
 800da3a:	460b      	mov	r3, r1
 800da3c:	42a6      	cmp	r6, r4
 800da3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800da42:	f04f 0200 	mov.w	r2, #0
 800da46:	d124      	bne.n	800da92 <_dtoa_r+0x662>
 800da48:	4bac      	ldr	r3, [pc, #688]	@ (800dcfc <_dtoa_r+0x8cc>)
 800da4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800da4e:	f7f2 fc45 	bl	80002dc <__adddf3>
 800da52:	4602      	mov	r2, r0
 800da54:	460b      	mov	r3, r1
 800da56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da5a:	f7f3 f885 	bl	8000b68 <__aeabi_dcmpgt>
 800da5e:	2800      	cmp	r0, #0
 800da60:	d145      	bne.n	800daee <_dtoa_r+0x6be>
 800da62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800da66:	49a5      	ldr	r1, [pc, #660]	@ (800dcfc <_dtoa_r+0x8cc>)
 800da68:	2000      	movs	r0, #0
 800da6a:	f7f2 fc35 	bl	80002d8 <__aeabi_dsub>
 800da6e:	4602      	mov	r2, r0
 800da70:	460b      	mov	r3, r1
 800da72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da76:	f7f3 f859 	bl	8000b2c <__aeabi_dcmplt>
 800da7a:	2800      	cmp	r0, #0
 800da7c:	f43f aef5 	beq.w	800d86a <_dtoa_r+0x43a>
 800da80:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800da82:	1e73      	subs	r3, r6, #1
 800da84:	9315      	str	r3, [sp, #84]	@ 0x54
 800da86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800da8a:	2b30      	cmp	r3, #48	@ 0x30
 800da8c:	d0f8      	beq.n	800da80 <_dtoa_r+0x650>
 800da8e:	9f04      	ldr	r7, [sp, #16]
 800da90:	e73e      	b.n	800d910 <_dtoa_r+0x4e0>
 800da92:	4b9b      	ldr	r3, [pc, #620]	@ (800dd00 <_dtoa_r+0x8d0>)
 800da94:	f7f2 fdd8 	bl	8000648 <__aeabi_dmul>
 800da98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da9c:	e7bc      	b.n	800da18 <_dtoa_r+0x5e8>
 800da9e:	d10c      	bne.n	800daba <_dtoa_r+0x68a>
 800daa0:	4b98      	ldr	r3, [pc, #608]	@ (800dd04 <_dtoa_r+0x8d4>)
 800daa2:	2200      	movs	r2, #0
 800daa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800daa8:	f7f2 fdce 	bl	8000648 <__aeabi_dmul>
 800daac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dab0:	f7f3 f850 	bl	8000b54 <__aeabi_dcmpge>
 800dab4:	2800      	cmp	r0, #0
 800dab6:	f000 8157 	beq.w	800dd68 <_dtoa_r+0x938>
 800daba:	2400      	movs	r4, #0
 800dabc:	4625      	mov	r5, r4
 800dabe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dac0:	43db      	mvns	r3, r3
 800dac2:	9304      	str	r3, [sp, #16]
 800dac4:	4656      	mov	r6, sl
 800dac6:	2700      	movs	r7, #0
 800dac8:	4621      	mov	r1, r4
 800daca:	4658      	mov	r0, fp
 800dacc:	f000 ff00 	bl	800e8d0 <_Bfree>
 800dad0:	2d00      	cmp	r5, #0
 800dad2:	d0dc      	beq.n	800da8e <_dtoa_r+0x65e>
 800dad4:	b12f      	cbz	r7, 800dae2 <_dtoa_r+0x6b2>
 800dad6:	42af      	cmp	r7, r5
 800dad8:	d003      	beq.n	800dae2 <_dtoa_r+0x6b2>
 800dada:	4639      	mov	r1, r7
 800dadc:	4658      	mov	r0, fp
 800dade:	f000 fef7 	bl	800e8d0 <_Bfree>
 800dae2:	4629      	mov	r1, r5
 800dae4:	4658      	mov	r0, fp
 800dae6:	f000 fef3 	bl	800e8d0 <_Bfree>
 800daea:	e7d0      	b.n	800da8e <_dtoa_r+0x65e>
 800daec:	9704      	str	r7, [sp, #16]
 800daee:	4633      	mov	r3, r6
 800daf0:	461e      	mov	r6, r3
 800daf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800daf6:	2a39      	cmp	r2, #57	@ 0x39
 800daf8:	d107      	bne.n	800db0a <_dtoa_r+0x6da>
 800dafa:	459a      	cmp	sl, r3
 800dafc:	d1f8      	bne.n	800daf0 <_dtoa_r+0x6c0>
 800dafe:	9a04      	ldr	r2, [sp, #16]
 800db00:	3201      	adds	r2, #1
 800db02:	9204      	str	r2, [sp, #16]
 800db04:	2230      	movs	r2, #48	@ 0x30
 800db06:	f88a 2000 	strb.w	r2, [sl]
 800db0a:	781a      	ldrb	r2, [r3, #0]
 800db0c:	3201      	adds	r2, #1
 800db0e:	701a      	strb	r2, [r3, #0]
 800db10:	e7bd      	b.n	800da8e <_dtoa_r+0x65e>
 800db12:	4b7b      	ldr	r3, [pc, #492]	@ (800dd00 <_dtoa_r+0x8d0>)
 800db14:	2200      	movs	r2, #0
 800db16:	f7f2 fd97 	bl	8000648 <__aeabi_dmul>
 800db1a:	2200      	movs	r2, #0
 800db1c:	2300      	movs	r3, #0
 800db1e:	4604      	mov	r4, r0
 800db20:	460d      	mov	r5, r1
 800db22:	f7f2 fff9 	bl	8000b18 <__aeabi_dcmpeq>
 800db26:	2800      	cmp	r0, #0
 800db28:	f43f aebb 	beq.w	800d8a2 <_dtoa_r+0x472>
 800db2c:	e6f0      	b.n	800d910 <_dtoa_r+0x4e0>
 800db2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800db30:	2a00      	cmp	r2, #0
 800db32:	f000 80db 	beq.w	800dcec <_dtoa_r+0x8bc>
 800db36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db38:	2a01      	cmp	r2, #1
 800db3a:	f300 80bf 	bgt.w	800dcbc <_dtoa_r+0x88c>
 800db3e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800db40:	2a00      	cmp	r2, #0
 800db42:	f000 80b7 	beq.w	800dcb4 <_dtoa_r+0x884>
 800db46:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800db4a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800db4c:	4646      	mov	r6, r8
 800db4e:	9a08      	ldr	r2, [sp, #32]
 800db50:	2101      	movs	r1, #1
 800db52:	441a      	add	r2, r3
 800db54:	4658      	mov	r0, fp
 800db56:	4498      	add	r8, r3
 800db58:	9208      	str	r2, [sp, #32]
 800db5a:	f000 ffb7 	bl	800eacc <__i2b>
 800db5e:	4605      	mov	r5, r0
 800db60:	b15e      	cbz	r6, 800db7a <_dtoa_r+0x74a>
 800db62:	9b08      	ldr	r3, [sp, #32]
 800db64:	2b00      	cmp	r3, #0
 800db66:	dd08      	ble.n	800db7a <_dtoa_r+0x74a>
 800db68:	42b3      	cmp	r3, r6
 800db6a:	9a08      	ldr	r2, [sp, #32]
 800db6c:	bfa8      	it	ge
 800db6e:	4633      	movge	r3, r6
 800db70:	eba8 0803 	sub.w	r8, r8, r3
 800db74:	1af6      	subs	r6, r6, r3
 800db76:	1ad3      	subs	r3, r2, r3
 800db78:	9308      	str	r3, [sp, #32]
 800db7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db7c:	b1f3      	cbz	r3, 800dbbc <_dtoa_r+0x78c>
 800db7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db80:	2b00      	cmp	r3, #0
 800db82:	f000 80b7 	beq.w	800dcf4 <_dtoa_r+0x8c4>
 800db86:	b18c      	cbz	r4, 800dbac <_dtoa_r+0x77c>
 800db88:	4629      	mov	r1, r5
 800db8a:	4622      	mov	r2, r4
 800db8c:	4658      	mov	r0, fp
 800db8e:	f001 f85d 	bl	800ec4c <__pow5mult>
 800db92:	464a      	mov	r2, r9
 800db94:	4601      	mov	r1, r0
 800db96:	4605      	mov	r5, r0
 800db98:	4658      	mov	r0, fp
 800db9a:	f000 ffad 	bl	800eaf8 <__multiply>
 800db9e:	4649      	mov	r1, r9
 800dba0:	9004      	str	r0, [sp, #16]
 800dba2:	4658      	mov	r0, fp
 800dba4:	f000 fe94 	bl	800e8d0 <_Bfree>
 800dba8:	9b04      	ldr	r3, [sp, #16]
 800dbaa:	4699      	mov	r9, r3
 800dbac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbae:	1b1a      	subs	r2, r3, r4
 800dbb0:	d004      	beq.n	800dbbc <_dtoa_r+0x78c>
 800dbb2:	4649      	mov	r1, r9
 800dbb4:	4658      	mov	r0, fp
 800dbb6:	f001 f849 	bl	800ec4c <__pow5mult>
 800dbba:	4681      	mov	r9, r0
 800dbbc:	2101      	movs	r1, #1
 800dbbe:	4658      	mov	r0, fp
 800dbc0:	f000 ff84 	bl	800eacc <__i2b>
 800dbc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbc6:	4604      	mov	r4, r0
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	f000 81cf 	beq.w	800df6c <_dtoa_r+0xb3c>
 800dbce:	461a      	mov	r2, r3
 800dbd0:	4601      	mov	r1, r0
 800dbd2:	4658      	mov	r0, fp
 800dbd4:	f001 f83a 	bl	800ec4c <__pow5mult>
 800dbd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbda:	2b01      	cmp	r3, #1
 800dbdc:	4604      	mov	r4, r0
 800dbde:	f300 8095 	bgt.w	800dd0c <_dtoa_r+0x8dc>
 800dbe2:	9b02      	ldr	r3, [sp, #8]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	f040 8087 	bne.w	800dcf8 <_dtoa_r+0x8c8>
 800dbea:	9b03      	ldr	r3, [sp, #12]
 800dbec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	f040 8089 	bne.w	800dd08 <_dtoa_r+0x8d8>
 800dbf6:	9b03      	ldr	r3, [sp, #12]
 800dbf8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dbfc:	0d1b      	lsrs	r3, r3, #20
 800dbfe:	051b      	lsls	r3, r3, #20
 800dc00:	b12b      	cbz	r3, 800dc0e <_dtoa_r+0x7de>
 800dc02:	9b08      	ldr	r3, [sp, #32]
 800dc04:	3301      	adds	r3, #1
 800dc06:	9308      	str	r3, [sp, #32]
 800dc08:	f108 0801 	add.w	r8, r8, #1
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	f000 81b0 	beq.w	800df78 <_dtoa_r+0xb48>
 800dc18:	6923      	ldr	r3, [r4, #16]
 800dc1a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dc1e:	6918      	ldr	r0, [r3, #16]
 800dc20:	f000 ff08 	bl	800ea34 <__hi0bits>
 800dc24:	f1c0 0020 	rsb	r0, r0, #32
 800dc28:	9b08      	ldr	r3, [sp, #32]
 800dc2a:	4418      	add	r0, r3
 800dc2c:	f010 001f 	ands.w	r0, r0, #31
 800dc30:	d077      	beq.n	800dd22 <_dtoa_r+0x8f2>
 800dc32:	f1c0 0320 	rsb	r3, r0, #32
 800dc36:	2b04      	cmp	r3, #4
 800dc38:	dd6b      	ble.n	800dd12 <_dtoa_r+0x8e2>
 800dc3a:	9b08      	ldr	r3, [sp, #32]
 800dc3c:	f1c0 001c 	rsb	r0, r0, #28
 800dc40:	4403      	add	r3, r0
 800dc42:	4480      	add	r8, r0
 800dc44:	4406      	add	r6, r0
 800dc46:	9308      	str	r3, [sp, #32]
 800dc48:	f1b8 0f00 	cmp.w	r8, #0
 800dc4c:	dd05      	ble.n	800dc5a <_dtoa_r+0x82a>
 800dc4e:	4649      	mov	r1, r9
 800dc50:	4642      	mov	r2, r8
 800dc52:	4658      	mov	r0, fp
 800dc54:	f001 f854 	bl	800ed00 <__lshift>
 800dc58:	4681      	mov	r9, r0
 800dc5a:	9b08      	ldr	r3, [sp, #32]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	dd05      	ble.n	800dc6c <_dtoa_r+0x83c>
 800dc60:	4621      	mov	r1, r4
 800dc62:	461a      	mov	r2, r3
 800dc64:	4658      	mov	r0, fp
 800dc66:	f001 f84b 	bl	800ed00 <__lshift>
 800dc6a:	4604      	mov	r4, r0
 800dc6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d059      	beq.n	800dd26 <_dtoa_r+0x8f6>
 800dc72:	4621      	mov	r1, r4
 800dc74:	4648      	mov	r0, r9
 800dc76:	f001 f8af 	bl	800edd8 <__mcmp>
 800dc7a:	2800      	cmp	r0, #0
 800dc7c:	da53      	bge.n	800dd26 <_dtoa_r+0x8f6>
 800dc7e:	1e7b      	subs	r3, r7, #1
 800dc80:	9304      	str	r3, [sp, #16]
 800dc82:	4649      	mov	r1, r9
 800dc84:	2300      	movs	r3, #0
 800dc86:	220a      	movs	r2, #10
 800dc88:	4658      	mov	r0, fp
 800dc8a:	f000 fe43 	bl	800e914 <__multadd>
 800dc8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc90:	4681      	mov	r9, r0
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	f000 8172 	beq.w	800df7c <_dtoa_r+0xb4c>
 800dc98:	2300      	movs	r3, #0
 800dc9a:	4629      	mov	r1, r5
 800dc9c:	220a      	movs	r2, #10
 800dc9e:	4658      	mov	r0, fp
 800dca0:	f000 fe38 	bl	800e914 <__multadd>
 800dca4:	9b00      	ldr	r3, [sp, #0]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	4605      	mov	r5, r0
 800dcaa:	dc67      	bgt.n	800dd7c <_dtoa_r+0x94c>
 800dcac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcae:	2b02      	cmp	r3, #2
 800dcb0:	dc41      	bgt.n	800dd36 <_dtoa_r+0x906>
 800dcb2:	e063      	b.n	800dd7c <_dtoa_r+0x94c>
 800dcb4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dcb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dcba:	e746      	b.n	800db4a <_dtoa_r+0x71a>
 800dcbc:	9b07      	ldr	r3, [sp, #28]
 800dcbe:	1e5c      	subs	r4, r3, #1
 800dcc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dcc2:	42a3      	cmp	r3, r4
 800dcc4:	bfbf      	itttt	lt
 800dcc6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dcc8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800dcca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800dccc:	1ae3      	sublt	r3, r4, r3
 800dcce:	bfb4      	ite	lt
 800dcd0:	18d2      	addlt	r2, r2, r3
 800dcd2:	1b1c      	subge	r4, r3, r4
 800dcd4:	9b07      	ldr	r3, [sp, #28]
 800dcd6:	bfbc      	itt	lt
 800dcd8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800dcda:	2400      	movlt	r4, #0
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	bfb5      	itete	lt
 800dce0:	eba8 0603 	sublt.w	r6, r8, r3
 800dce4:	9b07      	ldrge	r3, [sp, #28]
 800dce6:	2300      	movlt	r3, #0
 800dce8:	4646      	movge	r6, r8
 800dcea:	e730      	b.n	800db4e <_dtoa_r+0x71e>
 800dcec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dcee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800dcf0:	4646      	mov	r6, r8
 800dcf2:	e735      	b.n	800db60 <_dtoa_r+0x730>
 800dcf4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dcf6:	e75c      	b.n	800dbb2 <_dtoa_r+0x782>
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	e788      	b.n	800dc0e <_dtoa_r+0x7de>
 800dcfc:	3fe00000 	.word	0x3fe00000
 800dd00:	40240000 	.word	0x40240000
 800dd04:	40140000 	.word	0x40140000
 800dd08:	9b02      	ldr	r3, [sp, #8]
 800dd0a:	e780      	b.n	800dc0e <_dtoa_r+0x7de>
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd10:	e782      	b.n	800dc18 <_dtoa_r+0x7e8>
 800dd12:	d099      	beq.n	800dc48 <_dtoa_r+0x818>
 800dd14:	9a08      	ldr	r2, [sp, #32]
 800dd16:	331c      	adds	r3, #28
 800dd18:	441a      	add	r2, r3
 800dd1a:	4498      	add	r8, r3
 800dd1c:	441e      	add	r6, r3
 800dd1e:	9208      	str	r2, [sp, #32]
 800dd20:	e792      	b.n	800dc48 <_dtoa_r+0x818>
 800dd22:	4603      	mov	r3, r0
 800dd24:	e7f6      	b.n	800dd14 <_dtoa_r+0x8e4>
 800dd26:	9b07      	ldr	r3, [sp, #28]
 800dd28:	9704      	str	r7, [sp, #16]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	dc20      	bgt.n	800dd70 <_dtoa_r+0x940>
 800dd2e:	9300      	str	r3, [sp, #0]
 800dd30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd32:	2b02      	cmp	r3, #2
 800dd34:	dd1e      	ble.n	800dd74 <_dtoa_r+0x944>
 800dd36:	9b00      	ldr	r3, [sp, #0]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	f47f aec0 	bne.w	800dabe <_dtoa_r+0x68e>
 800dd3e:	4621      	mov	r1, r4
 800dd40:	2205      	movs	r2, #5
 800dd42:	4658      	mov	r0, fp
 800dd44:	f000 fde6 	bl	800e914 <__multadd>
 800dd48:	4601      	mov	r1, r0
 800dd4a:	4604      	mov	r4, r0
 800dd4c:	4648      	mov	r0, r9
 800dd4e:	f001 f843 	bl	800edd8 <__mcmp>
 800dd52:	2800      	cmp	r0, #0
 800dd54:	f77f aeb3 	ble.w	800dabe <_dtoa_r+0x68e>
 800dd58:	4656      	mov	r6, sl
 800dd5a:	2331      	movs	r3, #49	@ 0x31
 800dd5c:	f806 3b01 	strb.w	r3, [r6], #1
 800dd60:	9b04      	ldr	r3, [sp, #16]
 800dd62:	3301      	adds	r3, #1
 800dd64:	9304      	str	r3, [sp, #16]
 800dd66:	e6ae      	b.n	800dac6 <_dtoa_r+0x696>
 800dd68:	9c07      	ldr	r4, [sp, #28]
 800dd6a:	9704      	str	r7, [sp, #16]
 800dd6c:	4625      	mov	r5, r4
 800dd6e:	e7f3      	b.n	800dd58 <_dtoa_r+0x928>
 800dd70:	9b07      	ldr	r3, [sp, #28]
 800dd72:	9300      	str	r3, [sp, #0]
 800dd74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	f000 8104 	beq.w	800df84 <_dtoa_r+0xb54>
 800dd7c:	2e00      	cmp	r6, #0
 800dd7e:	dd05      	ble.n	800dd8c <_dtoa_r+0x95c>
 800dd80:	4629      	mov	r1, r5
 800dd82:	4632      	mov	r2, r6
 800dd84:	4658      	mov	r0, fp
 800dd86:	f000 ffbb 	bl	800ed00 <__lshift>
 800dd8a:	4605      	mov	r5, r0
 800dd8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d05a      	beq.n	800de48 <_dtoa_r+0xa18>
 800dd92:	6869      	ldr	r1, [r5, #4]
 800dd94:	4658      	mov	r0, fp
 800dd96:	f000 fd5b 	bl	800e850 <_Balloc>
 800dd9a:	4606      	mov	r6, r0
 800dd9c:	b928      	cbnz	r0, 800ddaa <_dtoa_r+0x97a>
 800dd9e:	4b84      	ldr	r3, [pc, #528]	@ (800dfb0 <_dtoa_r+0xb80>)
 800dda0:	4602      	mov	r2, r0
 800dda2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dda6:	f7ff bb5a 	b.w	800d45e <_dtoa_r+0x2e>
 800ddaa:	692a      	ldr	r2, [r5, #16]
 800ddac:	3202      	adds	r2, #2
 800ddae:	0092      	lsls	r2, r2, #2
 800ddb0:	f105 010c 	add.w	r1, r5, #12
 800ddb4:	300c      	adds	r0, #12
 800ddb6:	f7ff fa94 	bl	800d2e2 <memcpy>
 800ddba:	2201      	movs	r2, #1
 800ddbc:	4631      	mov	r1, r6
 800ddbe:	4658      	mov	r0, fp
 800ddc0:	f000 ff9e 	bl	800ed00 <__lshift>
 800ddc4:	f10a 0301 	add.w	r3, sl, #1
 800ddc8:	9307      	str	r3, [sp, #28]
 800ddca:	9b00      	ldr	r3, [sp, #0]
 800ddcc:	4453      	add	r3, sl
 800ddce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ddd0:	9b02      	ldr	r3, [sp, #8]
 800ddd2:	f003 0301 	and.w	r3, r3, #1
 800ddd6:	462f      	mov	r7, r5
 800ddd8:	930a      	str	r3, [sp, #40]	@ 0x28
 800ddda:	4605      	mov	r5, r0
 800dddc:	9b07      	ldr	r3, [sp, #28]
 800ddde:	4621      	mov	r1, r4
 800dde0:	3b01      	subs	r3, #1
 800dde2:	4648      	mov	r0, r9
 800dde4:	9300      	str	r3, [sp, #0]
 800dde6:	f7ff fa99 	bl	800d31c <quorem>
 800ddea:	4639      	mov	r1, r7
 800ddec:	9002      	str	r0, [sp, #8]
 800ddee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ddf2:	4648      	mov	r0, r9
 800ddf4:	f000 fff0 	bl	800edd8 <__mcmp>
 800ddf8:	462a      	mov	r2, r5
 800ddfa:	9008      	str	r0, [sp, #32]
 800ddfc:	4621      	mov	r1, r4
 800ddfe:	4658      	mov	r0, fp
 800de00:	f001 f806 	bl	800ee10 <__mdiff>
 800de04:	68c2      	ldr	r2, [r0, #12]
 800de06:	4606      	mov	r6, r0
 800de08:	bb02      	cbnz	r2, 800de4c <_dtoa_r+0xa1c>
 800de0a:	4601      	mov	r1, r0
 800de0c:	4648      	mov	r0, r9
 800de0e:	f000 ffe3 	bl	800edd8 <__mcmp>
 800de12:	4602      	mov	r2, r0
 800de14:	4631      	mov	r1, r6
 800de16:	4658      	mov	r0, fp
 800de18:	920e      	str	r2, [sp, #56]	@ 0x38
 800de1a:	f000 fd59 	bl	800e8d0 <_Bfree>
 800de1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de22:	9e07      	ldr	r6, [sp, #28]
 800de24:	ea43 0102 	orr.w	r1, r3, r2
 800de28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de2a:	4319      	orrs	r1, r3
 800de2c:	d110      	bne.n	800de50 <_dtoa_r+0xa20>
 800de2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800de32:	d029      	beq.n	800de88 <_dtoa_r+0xa58>
 800de34:	9b08      	ldr	r3, [sp, #32]
 800de36:	2b00      	cmp	r3, #0
 800de38:	dd02      	ble.n	800de40 <_dtoa_r+0xa10>
 800de3a:	9b02      	ldr	r3, [sp, #8]
 800de3c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800de40:	9b00      	ldr	r3, [sp, #0]
 800de42:	f883 8000 	strb.w	r8, [r3]
 800de46:	e63f      	b.n	800dac8 <_dtoa_r+0x698>
 800de48:	4628      	mov	r0, r5
 800de4a:	e7bb      	b.n	800ddc4 <_dtoa_r+0x994>
 800de4c:	2201      	movs	r2, #1
 800de4e:	e7e1      	b.n	800de14 <_dtoa_r+0x9e4>
 800de50:	9b08      	ldr	r3, [sp, #32]
 800de52:	2b00      	cmp	r3, #0
 800de54:	db04      	blt.n	800de60 <_dtoa_r+0xa30>
 800de56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800de58:	430b      	orrs	r3, r1
 800de5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800de5c:	430b      	orrs	r3, r1
 800de5e:	d120      	bne.n	800dea2 <_dtoa_r+0xa72>
 800de60:	2a00      	cmp	r2, #0
 800de62:	dded      	ble.n	800de40 <_dtoa_r+0xa10>
 800de64:	4649      	mov	r1, r9
 800de66:	2201      	movs	r2, #1
 800de68:	4658      	mov	r0, fp
 800de6a:	f000 ff49 	bl	800ed00 <__lshift>
 800de6e:	4621      	mov	r1, r4
 800de70:	4681      	mov	r9, r0
 800de72:	f000 ffb1 	bl	800edd8 <__mcmp>
 800de76:	2800      	cmp	r0, #0
 800de78:	dc03      	bgt.n	800de82 <_dtoa_r+0xa52>
 800de7a:	d1e1      	bne.n	800de40 <_dtoa_r+0xa10>
 800de7c:	f018 0f01 	tst.w	r8, #1
 800de80:	d0de      	beq.n	800de40 <_dtoa_r+0xa10>
 800de82:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800de86:	d1d8      	bne.n	800de3a <_dtoa_r+0xa0a>
 800de88:	9a00      	ldr	r2, [sp, #0]
 800de8a:	2339      	movs	r3, #57	@ 0x39
 800de8c:	7013      	strb	r3, [r2, #0]
 800de8e:	4633      	mov	r3, r6
 800de90:	461e      	mov	r6, r3
 800de92:	3b01      	subs	r3, #1
 800de94:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800de98:	2a39      	cmp	r2, #57	@ 0x39
 800de9a:	d052      	beq.n	800df42 <_dtoa_r+0xb12>
 800de9c:	3201      	adds	r2, #1
 800de9e:	701a      	strb	r2, [r3, #0]
 800dea0:	e612      	b.n	800dac8 <_dtoa_r+0x698>
 800dea2:	2a00      	cmp	r2, #0
 800dea4:	dd07      	ble.n	800deb6 <_dtoa_r+0xa86>
 800dea6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800deaa:	d0ed      	beq.n	800de88 <_dtoa_r+0xa58>
 800deac:	9a00      	ldr	r2, [sp, #0]
 800deae:	f108 0301 	add.w	r3, r8, #1
 800deb2:	7013      	strb	r3, [r2, #0]
 800deb4:	e608      	b.n	800dac8 <_dtoa_r+0x698>
 800deb6:	9b07      	ldr	r3, [sp, #28]
 800deb8:	9a07      	ldr	r2, [sp, #28]
 800deba:	f803 8c01 	strb.w	r8, [r3, #-1]
 800debe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dec0:	4293      	cmp	r3, r2
 800dec2:	d028      	beq.n	800df16 <_dtoa_r+0xae6>
 800dec4:	4649      	mov	r1, r9
 800dec6:	2300      	movs	r3, #0
 800dec8:	220a      	movs	r2, #10
 800deca:	4658      	mov	r0, fp
 800decc:	f000 fd22 	bl	800e914 <__multadd>
 800ded0:	42af      	cmp	r7, r5
 800ded2:	4681      	mov	r9, r0
 800ded4:	f04f 0300 	mov.w	r3, #0
 800ded8:	f04f 020a 	mov.w	r2, #10
 800dedc:	4639      	mov	r1, r7
 800dede:	4658      	mov	r0, fp
 800dee0:	d107      	bne.n	800def2 <_dtoa_r+0xac2>
 800dee2:	f000 fd17 	bl	800e914 <__multadd>
 800dee6:	4607      	mov	r7, r0
 800dee8:	4605      	mov	r5, r0
 800deea:	9b07      	ldr	r3, [sp, #28]
 800deec:	3301      	adds	r3, #1
 800deee:	9307      	str	r3, [sp, #28]
 800def0:	e774      	b.n	800dddc <_dtoa_r+0x9ac>
 800def2:	f000 fd0f 	bl	800e914 <__multadd>
 800def6:	4629      	mov	r1, r5
 800def8:	4607      	mov	r7, r0
 800defa:	2300      	movs	r3, #0
 800defc:	220a      	movs	r2, #10
 800defe:	4658      	mov	r0, fp
 800df00:	f000 fd08 	bl	800e914 <__multadd>
 800df04:	4605      	mov	r5, r0
 800df06:	e7f0      	b.n	800deea <_dtoa_r+0xaba>
 800df08:	9b00      	ldr	r3, [sp, #0]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	bfcc      	ite	gt
 800df0e:	461e      	movgt	r6, r3
 800df10:	2601      	movle	r6, #1
 800df12:	4456      	add	r6, sl
 800df14:	2700      	movs	r7, #0
 800df16:	4649      	mov	r1, r9
 800df18:	2201      	movs	r2, #1
 800df1a:	4658      	mov	r0, fp
 800df1c:	f000 fef0 	bl	800ed00 <__lshift>
 800df20:	4621      	mov	r1, r4
 800df22:	4681      	mov	r9, r0
 800df24:	f000 ff58 	bl	800edd8 <__mcmp>
 800df28:	2800      	cmp	r0, #0
 800df2a:	dcb0      	bgt.n	800de8e <_dtoa_r+0xa5e>
 800df2c:	d102      	bne.n	800df34 <_dtoa_r+0xb04>
 800df2e:	f018 0f01 	tst.w	r8, #1
 800df32:	d1ac      	bne.n	800de8e <_dtoa_r+0xa5e>
 800df34:	4633      	mov	r3, r6
 800df36:	461e      	mov	r6, r3
 800df38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df3c:	2a30      	cmp	r2, #48	@ 0x30
 800df3e:	d0fa      	beq.n	800df36 <_dtoa_r+0xb06>
 800df40:	e5c2      	b.n	800dac8 <_dtoa_r+0x698>
 800df42:	459a      	cmp	sl, r3
 800df44:	d1a4      	bne.n	800de90 <_dtoa_r+0xa60>
 800df46:	9b04      	ldr	r3, [sp, #16]
 800df48:	3301      	adds	r3, #1
 800df4a:	9304      	str	r3, [sp, #16]
 800df4c:	2331      	movs	r3, #49	@ 0x31
 800df4e:	f88a 3000 	strb.w	r3, [sl]
 800df52:	e5b9      	b.n	800dac8 <_dtoa_r+0x698>
 800df54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800df56:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800dfb4 <_dtoa_r+0xb84>
 800df5a:	b11b      	cbz	r3, 800df64 <_dtoa_r+0xb34>
 800df5c:	f10a 0308 	add.w	r3, sl, #8
 800df60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800df62:	6013      	str	r3, [r2, #0]
 800df64:	4650      	mov	r0, sl
 800df66:	b019      	add	sp, #100	@ 0x64
 800df68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df6e:	2b01      	cmp	r3, #1
 800df70:	f77f ae37 	ble.w	800dbe2 <_dtoa_r+0x7b2>
 800df74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df76:	930a      	str	r3, [sp, #40]	@ 0x28
 800df78:	2001      	movs	r0, #1
 800df7a:	e655      	b.n	800dc28 <_dtoa_r+0x7f8>
 800df7c:	9b00      	ldr	r3, [sp, #0]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	f77f aed6 	ble.w	800dd30 <_dtoa_r+0x900>
 800df84:	4656      	mov	r6, sl
 800df86:	4621      	mov	r1, r4
 800df88:	4648      	mov	r0, r9
 800df8a:	f7ff f9c7 	bl	800d31c <quorem>
 800df8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800df92:	f806 8b01 	strb.w	r8, [r6], #1
 800df96:	9b00      	ldr	r3, [sp, #0]
 800df98:	eba6 020a 	sub.w	r2, r6, sl
 800df9c:	4293      	cmp	r3, r2
 800df9e:	ddb3      	ble.n	800df08 <_dtoa_r+0xad8>
 800dfa0:	4649      	mov	r1, r9
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	220a      	movs	r2, #10
 800dfa6:	4658      	mov	r0, fp
 800dfa8:	f000 fcb4 	bl	800e914 <__multadd>
 800dfac:	4681      	mov	r9, r0
 800dfae:	e7ea      	b.n	800df86 <_dtoa_r+0xb56>
 800dfb0:	0800ff15 	.word	0x0800ff15
 800dfb4:	0800fe99 	.word	0x0800fe99

0800dfb8 <_free_r>:
 800dfb8:	b538      	push	{r3, r4, r5, lr}
 800dfba:	4605      	mov	r5, r0
 800dfbc:	2900      	cmp	r1, #0
 800dfbe:	d041      	beq.n	800e044 <_free_r+0x8c>
 800dfc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfc4:	1f0c      	subs	r4, r1, #4
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	bfb8      	it	lt
 800dfca:	18e4      	addlt	r4, r4, r3
 800dfcc:	f000 fc34 	bl	800e838 <__malloc_lock>
 800dfd0:	4a1d      	ldr	r2, [pc, #116]	@ (800e048 <_free_r+0x90>)
 800dfd2:	6813      	ldr	r3, [r2, #0]
 800dfd4:	b933      	cbnz	r3, 800dfe4 <_free_r+0x2c>
 800dfd6:	6063      	str	r3, [r4, #4]
 800dfd8:	6014      	str	r4, [r2, #0]
 800dfda:	4628      	mov	r0, r5
 800dfdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dfe0:	f000 bc30 	b.w	800e844 <__malloc_unlock>
 800dfe4:	42a3      	cmp	r3, r4
 800dfe6:	d908      	bls.n	800dffa <_free_r+0x42>
 800dfe8:	6820      	ldr	r0, [r4, #0]
 800dfea:	1821      	adds	r1, r4, r0
 800dfec:	428b      	cmp	r3, r1
 800dfee:	bf01      	itttt	eq
 800dff0:	6819      	ldreq	r1, [r3, #0]
 800dff2:	685b      	ldreq	r3, [r3, #4]
 800dff4:	1809      	addeq	r1, r1, r0
 800dff6:	6021      	streq	r1, [r4, #0]
 800dff8:	e7ed      	b.n	800dfd6 <_free_r+0x1e>
 800dffa:	461a      	mov	r2, r3
 800dffc:	685b      	ldr	r3, [r3, #4]
 800dffe:	b10b      	cbz	r3, 800e004 <_free_r+0x4c>
 800e000:	42a3      	cmp	r3, r4
 800e002:	d9fa      	bls.n	800dffa <_free_r+0x42>
 800e004:	6811      	ldr	r1, [r2, #0]
 800e006:	1850      	adds	r0, r2, r1
 800e008:	42a0      	cmp	r0, r4
 800e00a:	d10b      	bne.n	800e024 <_free_r+0x6c>
 800e00c:	6820      	ldr	r0, [r4, #0]
 800e00e:	4401      	add	r1, r0
 800e010:	1850      	adds	r0, r2, r1
 800e012:	4283      	cmp	r3, r0
 800e014:	6011      	str	r1, [r2, #0]
 800e016:	d1e0      	bne.n	800dfda <_free_r+0x22>
 800e018:	6818      	ldr	r0, [r3, #0]
 800e01a:	685b      	ldr	r3, [r3, #4]
 800e01c:	6053      	str	r3, [r2, #4]
 800e01e:	4408      	add	r0, r1
 800e020:	6010      	str	r0, [r2, #0]
 800e022:	e7da      	b.n	800dfda <_free_r+0x22>
 800e024:	d902      	bls.n	800e02c <_free_r+0x74>
 800e026:	230c      	movs	r3, #12
 800e028:	602b      	str	r3, [r5, #0]
 800e02a:	e7d6      	b.n	800dfda <_free_r+0x22>
 800e02c:	6820      	ldr	r0, [r4, #0]
 800e02e:	1821      	adds	r1, r4, r0
 800e030:	428b      	cmp	r3, r1
 800e032:	bf04      	itt	eq
 800e034:	6819      	ldreq	r1, [r3, #0]
 800e036:	685b      	ldreq	r3, [r3, #4]
 800e038:	6063      	str	r3, [r4, #4]
 800e03a:	bf04      	itt	eq
 800e03c:	1809      	addeq	r1, r1, r0
 800e03e:	6021      	streq	r1, [r4, #0]
 800e040:	6054      	str	r4, [r2, #4]
 800e042:	e7ca      	b.n	800dfda <_free_r+0x22>
 800e044:	bd38      	pop	{r3, r4, r5, pc}
 800e046:	bf00      	nop
 800e048:	20000aec 	.word	0x20000aec

0800e04c <rshift>:
 800e04c:	6903      	ldr	r3, [r0, #16]
 800e04e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e052:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e056:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e05a:	f100 0414 	add.w	r4, r0, #20
 800e05e:	dd45      	ble.n	800e0ec <rshift+0xa0>
 800e060:	f011 011f 	ands.w	r1, r1, #31
 800e064:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e068:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e06c:	d10c      	bne.n	800e088 <rshift+0x3c>
 800e06e:	f100 0710 	add.w	r7, r0, #16
 800e072:	4629      	mov	r1, r5
 800e074:	42b1      	cmp	r1, r6
 800e076:	d334      	bcc.n	800e0e2 <rshift+0x96>
 800e078:	1a9b      	subs	r3, r3, r2
 800e07a:	009b      	lsls	r3, r3, #2
 800e07c:	1eea      	subs	r2, r5, #3
 800e07e:	4296      	cmp	r6, r2
 800e080:	bf38      	it	cc
 800e082:	2300      	movcc	r3, #0
 800e084:	4423      	add	r3, r4
 800e086:	e015      	b.n	800e0b4 <rshift+0x68>
 800e088:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e08c:	f1c1 0820 	rsb	r8, r1, #32
 800e090:	40cf      	lsrs	r7, r1
 800e092:	f105 0e04 	add.w	lr, r5, #4
 800e096:	46a1      	mov	r9, r4
 800e098:	4576      	cmp	r6, lr
 800e09a:	46f4      	mov	ip, lr
 800e09c:	d815      	bhi.n	800e0ca <rshift+0x7e>
 800e09e:	1a9a      	subs	r2, r3, r2
 800e0a0:	0092      	lsls	r2, r2, #2
 800e0a2:	3a04      	subs	r2, #4
 800e0a4:	3501      	adds	r5, #1
 800e0a6:	42ae      	cmp	r6, r5
 800e0a8:	bf38      	it	cc
 800e0aa:	2200      	movcc	r2, #0
 800e0ac:	18a3      	adds	r3, r4, r2
 800e0ae:	50a7      	str	r7, [r4, r2]
 800e0b0:	b107      	cbz	r7, 800e0b4 <rshift+0x68>
 800e0b2:	3304      	adds	r3, #4
 800e0b4:	1b1a      	subs	r2, r3, r4
 800e0b6:	42a3      	cmp	r3, r4
 800e0b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e0bc:	bf08      	it	eq
 800e0be:	2300      	moveq	r3, #0
 800e0c0:	6102      	str	r2, [r0, #16]
 800e0c2:	bf08      	it	eq
 800e0c4:	6143      	streq	r3, [r0, #20]
 800e0c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0ca:	f8dc c000 	ldr.w	ip, [ip]
 800e0ce:	fa0c fc08 	lsl.w	ip, ip, r8
 800e0d2:	ea4c 0707 	orr.w	r7, ip, r7
 800e0d6:	f849 7b04 	str.w	r7, [r9], #4
 800e0da:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e0de:	40cf      	lsrs	r7, r1
 800e0e0:	e7da      	b.n	800e098 <rshift+0x4c>
 800e0e2:	f851 cb04 	ldr.w	ip, [r1], #4
 800e0e6:	f847 cf04 	str.w	ip, [r7, #4]!
 800e0ea:	e7c3      	b.n	800e074 <rshift+0x28>
 800e0ec:	4623      	mov	r3, r4
 800e0ee:	e7e1      	b.n	800e0b4 <rshift+0x68>

0800e0f0 <__hexdig_fun>:
 800e0f0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e0f4:	2b09      	cmp	r3, #9
 800e0f6:	d802      	bhi.n	800e0fe <__hexdig_fun+0xe>
 800e0f8:	3820      	subs	r0, #32
 800e0fa:	b2c0      	uxtb	r0, r0
 800e0fc:	4770      	bx	lr
 800e0fe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e102:	2b05      	cmp	r3, #5
 800e104:	d801      	bhi.n	800e10a <__hexdig_fun+0x1a>
 800e106:	3847      	subs	r0, #71	@ 0x47
 800e108:	e7f7      	b.n	800e0fa <__hexdig_fun+0xa>
 800e10a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e10e:	2b05      	cmp	r3, #5
 800e110:	d801      	bhi.n	800e116 <__hexdig_fun+0x26>
 800e112:	3827      	subs	r0, #39	@ 0x27
 800e114:	e7f1      	b.n	800e0fa <__hexdig_fun+0xa>
 800e116:	2000      	movs	r0, #0
 800e118:	4770      	bx	lr
	...

0800e11c <__gethex>:
 800e11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e120:	b085      	sub	sp, #20
 800e122:	468a      	mov	sl, r1
 800e124:	9302      	str	r3, [sp, #8]
 800e126:	680b      	ldr	r3, [r1, #0]
 800e128:	9001      	str	r0, [sp, #4]
 800e12a:	4690      	mov	r8, r2
 800e12c:	1c9c      	adds	r4, r3, #2
 800e12e:	46a1      	mov	r9, r4
 800e130:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e134:	2830      	cmp	r0, #48	@ 0x30
 800e136:	d0fa      	beq.n	800e12e <__gethex+0x12>
 800e138:	eba9 0303 	sub.w	r3, r9, r3
 800e13c:	f1a3 0b02 	sub.w	fp, r3, #2
 800e140:	f7ff ffd6 	bl	800e0f0 <__hexdig_fun>
 800e144:	4605      	mov	r5, r0
 800e146:	2800      	cmp	r0, #0
 800e148:	d168      	bne.n	800e21c <__gethex+0x100>
 800e14a:	49a0      	ldr	r1, [pc, #640]	@ (800e3cc <__gethex+0x2b0>)
 800e14c:	2201      	movs	r2, #1
 800e14e:	4648      	mov	r0, r9
 800e150:	f7ff f83e 	bl	800d1d0 <strncmp>
 800e154:	4607      	mov	r7, r0
 800e156:	2800      	cmp	r0, #0
 800e158:	d167      	bne.n	800e22a <__gethex+0x10e>
 800e15a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e15e:	4626      	mov	r6, r4
 800e160:	f7ff ffc6 	bl	800e0f0 <__hexdig_fun>
 800e164:	2800      	cmp	r0, #0
 800e166:	d062      	beq.n	800e22e <__gethex+0x112>
 800e168:	4623      	mov	r3, r4
 800e16a:	7818      	ldrb	r0, [r3, #0]
 800e16c:	2830      	cmp	r0, #48	@ 0x30
 800e16e:	4699      	mov	r9, r3
 800e170:	f103 0301 	add.w	r3, r3, #1
 800e174:	d0f9      	beq.n	800e16a <__gethex+0x4e>
 800e176:	f7ff ffbb 	bl	800e0f0 <__hexdig_fun>
 800e17a:	fab0 f580 	clz	r5, r0
 800e17e:	096d      	lsrs	r5, r5, #5
 800e180:	f04f 0b01 	mov.w	fp, #1
 800e184:	464a      	mov	r2, r9
 800e186:	4616      	mov	r6, r2
 800e188:	3201      	adds	r2, #1
 800e18a:	7830      	ldrb	r0, [r6, #0]
 800e18c:	f7ff ffb0 	bl	800e0f0 <__hexdig_fun>
 800e190:	2800      	cmp	r0, #0
 800e192:	d1f8      	bne.n	800e186 <__gethex+0x6a>
 800e194:	498d      	ldr	r1, [pc, #564]	@ (800e3cc <__gethex+0x2b0>)
 800e196:	2201      	movs	r2, #1
 800e198:	4630      	mov	r0, r6
 800e19a:	f7ff f819 	bl	800d1d0 <strncmp>
 800e19e:	2800      	cmp	r0, #0
 800e1a0:	d13f      	bne.n	800e222 <__gethex+0x106>
 800e1a2:	b944      	cbnz	r4, 800e1b6 <__gethex+0x9a>
 800e1a4:	1c74      	adds	r4, r6, #1
 800e1a6:	4622      	mov	r2, r4
 800e1a8:	4616      	mov	r6, r2
 800e1aa:	3201      	adds	r2, #1
 800e1ac:	7830      	ldrb	r0, [r6, #0]
 800e1ae:	f7ff ff9f 	bl	800e0f0 <__hexdig_fun>
 800e1b2:	2800      	cmp	r0, #0
 800e1b4:	d1f8      	bne.n	800e1a8 <__gethex+0x8c>
 800e1b6:	1ba4      	subs	r4, r4, r6
 800e1b8:	00a7      	lsls	r7, r4, #2
 800e1ba:	7833      	ldrb	r3, [r6, #0]
 800e1bc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e1c0:	2b50      	cmp	r3, #80	@ 0x50
 800e1c2:	d13e      	bne.n	800e242 <__gethex+0x126>
 800e1c4:	7873      	ldrb	r3, [r6, #1]
 800e1c6:	2b2b      	cmp	r3, #43	@ 0x2b
 800e1c8:	d033      	beq.n	800e232 <__gethex+0x116>
 800e1ca:	2b2d      	cmp	r3, #45	@ 0x2d
 800e1cc:	d034      	beq.n	800e238 <__gethex+0x11c>
 800e1ce:	1c71      	adds	r1, r6, #1
 800e1d0:	2400      	movs	r4, #0
 800e1d2:	7808      	ldrb	r0, [r1, #0]
 800e1d4:	f7ff ff8c 	bl	800e0f0 <__hexdig_fun>
 800e1d8:	1e43      	subs	r3, r0, #1
 800e1da:	b2db      	uxtb	r3, r3
 800e1dc:	2b18      	cmp	r3, #24
 800e1de:	d830      	bhi.n	800e242 <__gethex+0x126>
 800e1e0:	f1a0 0210 	sub.w	r2, r0, #16
 800e1e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e1e8:	f7ff ff82 	bl	800e0f0 <__hexdig_fun>
 800e1ec:	f100 3cff 	add.w	ip, r0, #4294967295
 800e1f0:	fa5f fc8c 	uxtb.w	ip, ip
 800e1f4:	f1bc 0f18 	cmp.w	ip, #24
 800e1f8:	f04f 030a 	mov.w	r3, #10
 800e1fc:	d91e      	bls.n	800e23c <__gethex+0x120>
 800e1fe:	b104      	cbz	r4, 800e202 <__gethex+0xe6>
 800e200:	4252      	negs	r2, r2
 800e202:	4417      	add	r7, r2
 800e204:	f8ca 1000 	str.w	r1, [sl]
 800e208:	b1ed      	cbz	r5, 800e246 <__gethex+0x12a>
 800e20a:	f1bb 0f00 	cmp.w	fp, #0
 800e20e:	bf0c      	ite	eq
 800e210:	2506      	moveq	r5, #6
 800e212:	2500      	movne	r5, #0
 800e214:	4628      	mov	r0, r5
 800e216:	b005      	add	sp, #20
 800e218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e21c:	2500      	movs	r5, #0
 800e21e:	462c      	mov	r4, r5
 800e220:	e7b0      	b.n	800e184 <__gethex+0x68>
 800e222:	2c00      	cmp	r4, #0
 800e224:	d1c7      	bne.n	800e1b6 <__gethex+0x9a>
 800e226:	4627      	mov	r7, r4
 800e228:	e7c7      	b.n	800e1ba <__gethex+0x9e>
 800e22a:	464e      	mov	r6, r9
 800e22c:	462f      	mov	r7, r5
 800e22e:	2501      	movs	r5, #1
 800e230:	e7c3      	b.n	800e1ba <__gethex+0x9e>
 800e232:	2400      	movs	r4, #0
 800e234:	1cb1      	adds	r1, r6, #2
 800e236:	e7cc      	b.n	800e1d2 <__gethex+0xb6>
 800e238:	2401      	movs	r4, #1
 800e23a:	e7fb      	b.n	800e234 <__gethex+0x118>
 800e23c:	fb03 0002 	mla	r0, r3, r2, r0
 800e240:	e7ce      	b.n	800e1e0 <__gethex+0xc4>
 800e242:	4631      	mov	r1, r6
 800e244:	e7de      	b.n	800e204 <__gethex+0xe8>
 800e246:	eba6 0309 	sub.w	r3, r6, r9
 800e24a:	3b01      	subs	r3, #1
 800e24c:	4629      	mov	r1, r5
 800e24e:	2b07      	cmp	r3, #7
 800e250:	dc0a      	bgt.n	800e268 <__gethex+0x14c>
 800e252:	9801      	ldr	r0, [sp, #4]
 800e254:	f000 fafc 	bl	800e850 <_Balloc>
 800e258:	4604      	mov	r4, r0
 800e25a:	b940      	cbnz	r0, 800e26e <__gethex+0x152>
 800e25c:	4b5c      	ldr	r3, [pc, #368]	@ (800e3d0 <__gethex+0x2b4>)
 800e25e:	4602      	mov	r2, r0
 800e260:	21e4      	movs	r1, #228	@ 0xe4
 800e262:	485c      	ldr	r0, [pc, #368]	@ (800e3d4 <__gethex+0x2b8>)
 800e264:	f001 fa5c 	bl	800f720 <__assert_func>
 800e268:	3101      	adds	r1, #1
 800e26a:	105b      	asrs	r3, r3, #1
 800e26c:	e7ef      	b.n	800e24e <__gethex+0x132>
 800e26e:	f100 0a14 	add.w	sl, r0, #20
 800e272:	2300      	movs	r3, #0
 800e274:	4655      	mov	r5, sl
 800e276:	469b      	mov	fp, r3
 800e278:	45b1      	cmp	r9, r6
 800e27a:	d337      	bcc.n	800e2ec <__gethex+0x1d0>
 800e27c:	f845 bb04 	str.w	fp, [r5], #4
 800e280:	eba5 050a 	sub.w	r5, r5, sl
 800e284:	10ad      	asrs	r5, r5, #2
 800e286:	6125      	str	r5, [r4, #16]
 800e288:	4658      	mov	r0, fp
 800e28a:	f000 fbd3 	bl	800ea34 <__hi0bits>
 800e28e:	016d      	lsls	r5, r5, #5
 800e290:	f8d8 6000 	ldr.w	r6, [r8]
 800e294:	1a2d      	subs	r5, r5, r0
 800e296:	42b5      	cmp	r5, r6
 800e298:	dd54      	ble.n	800e344 <__gethex+0x228>
 800e29a:	1bad      	subs	r5, r5, r6
 800e29c:	4629      	mov	r1, r5
 800e29e:	4620      	mov	r0, r4
 800e2a0:	f000 ff67 	bl	800f172 <__any_on>
 800e2a4:	4681      	mov	r9, r0
 800e2a6:	b178      	cbz	r0, 800e2c8 <__gethex+0x1ac>
 800e2a8:	1e6b      	subs	r3, r5, #1
 800e2aa:	1159      	asrs	r1, r3, #5
 800e2ac:	f003 021f 	and.w	r2, r3, #31
 800e2b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e2b4:	f04f 0901 	mov.w	r9, #1
 800e2b8:	fa09 f202 	lsl.w	r2, r9, r2
 800e2bc:	420a      	tst	r2, r1
 800e2be:	d003      	beq.n	800e2c8 <__gethex+0x1ac>
 800e2c0:	454b      	cmp	r3, r9
 800e2c2:	dc36      	bgt.n	800e332 <__gethex+0x216>
 800e2c4:	f04f 0902 	mov.w	r9, #2
 800e2c8:	4629      	mov	r1, r5
 800e2ca:	4620      	mov	r0, r4
 800e2cc:	f7ff febe 	bl	800e04c <rshift>
 800e2d0:	442f      	add	r7, r5
 800e2d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e2d6:	42bb      	cmp	r3, r7
 800e2d8:	da42      	bge.n	800e360 <__gethex+0x244>
 800e2da:	9801      	ldr	r0, [sp, #4]
 800e2dc:	4621      	mov	r1, r4
 800e2de:	f000 faf7 	bl	800e8d0 <_Bfree>
 800e2e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	6013      	str	r3, [r2, #0]
 800e2e8:	25a3      	movs	r5, #163	@ 0xa3
 800e2ea:	e793      	b.n	800e214 <__gethex+0xf8>
 800e2ec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e2f0:	2a2e      	cmp	r2, #46	@ 0x2e
 800e2f2:	d012      	beq.n	800e31a <__gethex+0x1fe>
 800e2f4:	2b20      	cmp	r3, #32
 800e2f6:	d104      	bne.n	800e302 <__gethex+0x1e6>
 800e2f8:	f845 bb04 	str.w	fp, [r5], #4
 800e2fc:	f04f 0b00 	mov.w	fp, #0
 800e300:	465b      	mov	r3, fp
 800e302:	7830      	ldrb	r0, [r6, #0]
 800e304:	9303      	str	r3, [sp, #12]
 800e306:	f7ff fef3 	bl	800e0f0 <__hexdig_fun>
 800e30a:	9b03      	ldr	r3, [sp, #12]
 800e30c:	f000 000f 	and.w	r0, r0, #15
 800e310:	4098      	lsls	r0, r3
 800e312:	ea4b 0b00 	orr.w	fp, fp, r0
 800e316:	3304      	adds	r3, #4
 800e318:	e7ae      	b.n	800e278 <__gethex+0x15c>
 800e31a:	45b1      	cmp	r9, r6
 800e31c:	d8ea      	bhi.n	800e2f4 <__gethex+0x1d8>
 800e31e:	492b      	ldr	r1, [pc, #172]	@ (800e3cc <__gethex+0x2b0>)
 800e320:	9303      	str	r3, [sp, #12]
 800e322:	2201      	movs	r2, #1
 800e324:	4630      	mov	r0, r6
 800e326:	f7fe ff53 	bl	800d1d0 <strncmp>
 800e32a:	9b03      	ldr	r3, [sp, #12]
 800e32c:	2800      	cmp	r0, #0
 800e32e:	d1e1      	bne.n	800e2f4 <__gethex+0x1d8>
 800e330:	e7a2      	b.n	800e278 <__gethex+0x15c>
 800e332:	1ea9      	subs	r1, r5, #2
 800e334:	4620      	mov	r0, r4
 800e336:	f000 ff1c 	bl	800f172 <__any_on>
 800e33a:	2800      	cmp	r0, #0
 800e33c:	d0c2      	beq.n	800e2c4 <__gethex+0x1a8>
 800e33e:	f04f 0903 	mov.w	r9, #3
 800e342:	e7c1      	b.n	800e2c8 <__gethex+0x1ac>
 800e344:	da09      	bge.n	800e35a <__gethex+0x23e>
 800e346:	1b75      	subs	r5, r6, r5
 800e348:	4621      	mov	r1, r4
 800e34a:	9801      	ldr	r0, [sp, #4]
 800e34c:	462a      	mov	r2, r5
 800e34e:	f000 fcd7 	bl	800ed00 <__lshift>
 800e352:	1b7f      	subs	r7, r7, r5
 800e354:	4604      	mov	r4, r0
 800e356:	f100 0a14 	add.w	sl, r0, #20
 800e35a:	f04f 0900 	mov.w	r9, #0
 800e35e:	e7b8      	b.n	800e2d2 <__gethex+0x1b6>
 800e360:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e364:	42bd      	cmp	r5, r7
 800e366:	dd6f      	ble.n	800e448 <__gethex+0x32c>
 800e368:	1bed      	subs	r5, r5, r7
 800e36a:	42ae      	cmp	r6, r5
 800e36c:	dc34      	bgt.n	800e3d8 <__gethex+0x2bc>
 800e36e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e372:	2b02      	cmp	r3, #2
 800e374:	d022      	beq.n	800e3bc <__gethex+0x2a0>
 800e376:	2b03      	cmp	r3, #3
 800e378:	d024      	beq.n	800e3c4 <__gethex+0x2a8>
 800e37a:	2b01      	cmp	r3, #1
 800e37c:	d115      	bne.n	800e3aa <__gethex+0x28e>
 800e37e:	42ae      	cmp	r6, r5
 800e380:	d113      	bne.n	800e3aa <__gethex+0x28e>
 800e382:	2e01      	cmp	r6, #1
 800e384:	d10b      	bne.n	800e39e <__gethex+0x282>
 800e386:	9a02      	ldr	r2, [sp, #8]
 800e388:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e38c:	6013      	str	r3, [r2, #0]
 800e38e:	2301      	movs	r3, #1
 800e390:	6123      	str	r3, [r4, #16]
 800e392:	f8ca 3000 	str.w	r3, [sl]
 800e396:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e398:	2562      	movs	r5, #98	@ 0x62
 800e39a:	601c      	str	r4, [r3, #0]
 800e39c:	e73a      	b.n	800e214 <__gethex+0xf8>
 800e39e:	1e71      	subs	r1, r6, #1
 800e3a0:	4620      	mov	r0, r4
 800e3a2:	f000 fee6 	bl	800f172 <__any_on>
 800e3a6:	2800      	cmp	r0, #0
 800e3a8:	d1ed      	bne.n	800e386 <__gethex+0x26a>
 800e3aa:	9801      	ldr	r0, [sp, #4]
 800e3ac:	4621      	mov	r1, r4
 800e3ae:	f000 fa8f 	bl	800e8d0 <_Bfree>
 800e3b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	6013      	str	r3, [r2, #0]
 800e3b8:	2550      	movs	r5, #80	@ 0x50
 800e3ba:	e72b      	b.n	800e214 <__gethex+0xf8>
 800e3bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d1f3      	bne.n	800e3aa <__gethex+0x28e>
 800e3c2:	e7e0      	b.n	800e386 <__gethex+0x26a>
 800e3c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d1dd      	bne.n	800e386 <__gethex+0x26a>
 800e3ca:	e7ee      	b.n	800e3aa <__gethex+0x28e>
 800e3cc:	0800fe04 	.word	0x0800fe04
 800e3d0:	0800ff15 	.word	0x0800ff15
 800e3d4:	0800ff26 	.word	0x0800ff26
 800e3d8:	1e6f      	subs	r7, r5, #1
 800e3da:	f1b9 0f00 	cmp.w	r9, #0
 800e3de:	d130      	bne.n	800e442 <__gethex+0x326>
 800e3e0:	b127      	cbz	r7, 800e3ec <__gethex+0x2d0>
 800e3e2:	4639      	mov	r1, r7
 800e3e4:	4620      	mov	r0, r4
 800e3e6:	f000 fec4 	bl	800f172 <__any_on>
 800e3ea:	4681      	mov	r9, r0
 800e3ec:	117a      	asrs	r2, r7, #5
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e3f4:	f007 071f 	and.w	r7, r7, #31
 800e3f8:	40bb      	lsls	r3, r7
 800e3fa:	4213      	tst	r3, r2
 800e3fc:	4629      	mov	r1, r5
 800e3fe:	4620      	mov	r0, r4
 800e400:	bf18      	it	ne
 800e402:	f049 0902 	orrne.w	r9, r9, #2
 800e406:	f7ff fe21 	bl	800e04c <rshift>
 800e40a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e40e:	1b76      	subs	r6, r6, r5
 800e410:	2502      	movs	r5, #2
 800e412:	f1b9 0f00 	cmp.w	r9, #0
 800e416:	d047      	beq.n	800e4a8 <__gethex+0x38c>
 800e418:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e41c:	2b02      	cmp	r3, #2
 800e41e:	d015      	beq.n	800e44c <__gethex+0x330>
 800e420:	2b03      	cmp	r3, #3
 800e422:	d017      	beq.n	800e454 <__gethex+0x338>
 800e424:	2b01      	cmp	r3, #1
 800e426:	d109      	bne.n	800e43c <__gethex+0x320>
 800e428:	f019 0f02 	tst.w	r9, #2
 800e42c:	d006      	beq.n	800e43c <__gethex+0x320>
 800e42e:	f8da 3000 	ldr.w	r3, [sl]
 800e432:	ea49 0903 	orr.w	r9, r9, r3
 800e436:	f019 0f01 	tst.w	r9, #1
 800e43a:	d10e      	bne.n	800e45a <__gethex+0x33e>
 800e43c:	f045 0510 	orr.w	r5, r5, #16
 800e440:	e032      	b.n	800e4a8 <__gethex+0x38c>
 800e442:	f04f 0901 	mov.w	r9, #1
 800e446:	e7d1      	b.n	800e3ec <__gethex+0x2d0>
 800e448:	2501      	movs	r5, #1
 800e44a:	e7e2      	b.n	800e412 <__gethex+0x2f6>
 800e44c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e44e:	f1c3 0301 	rsb	r3, r3, #1
 800e452:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e454:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e456:	2b00      	cmp	r3, #0
 800e458:	d0f0      	beq.n	800e43c <__gethex+0x320>
 800e45a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e45e:	f104 0314 	add.w	r3, r4, #20
 800e462:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e466:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e46a:	f04f 0c00 	mov.w	ip, #0
 800e46e:	4618      	mov	r0, r3
 800e470:	f853 2b04 	ldr.w	r2, [r3], #4
 800e474:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e478:	d01b      	beq.n	800e4b2 <__gethex+0x396>
 800e47a:	3201      	adds	r2, #1
 800e47c:	6002      	str	r2, [r0, #0]
 800e47e:	2d02      	cmp	r5, #2
 800e480:	f104 0314 	add.w	r3, r4, #20
 800e484:	d13c      	bne.n	800e500 <__gethex+0x3e4>
 800e486:	f8d8 2000 	ldr.w	r2, [r8]
 800e48a:	3a01      	subs	r2, #1
 800e48c:	42b2      	cmp	r2, r6
 800e48e:	d109      	bne.n	800e4a4 <__gethex+0x388>
 800e490:	1171      	asrs	r1, r6, #5
 800e492:	2201      	movs	r2, #1
 800e494:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e498:	f006 061f 	and.w	r6, r6, #31
 800e49c:	fa02 f606 	lsl.w	r6, r2, r6
 800e4a0:	421e      	tst	r6, r3
 800e4a2:	d13a      	bne.n	800e51a <__gethex+0x3fe>
 800e4a4:	f045 0520 	orr.w	r5, r5, #32
 800e4a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4aa:	601c      	str	r4, [r3, #0]
 800e4ac:	9b02      	ldr	r3, [sp, #8]
 800e4ae:	601f      	str	r7, [r3, #0]
 800e4b0:	e6b0      	b.n	800e214 <__gethex+0xf8>
 800e4b2:	4299      	cmp	r1, r3
 800e4b4:	f843 cc04 	str.w	ip, [r3, #-4]
 800e4b8:	d8d9      	bhi.n	800e46e <__gethex+0x352>
 800e4ba:	68a3      	ldr	r3, [r4, #8]
 800e4bc:	459b      	cmp	fp, r3
 800e4be:	db17      	blt.n	800e4f0 <__gethex+0x3d4>
 800e4c0:	6861      	ldr	r1, [r4, #4]
 800e4c2:	9801      	ldr	r0, [sp, #4]
 800e4c4:	3101      	adds	r1, #1
 800e4c6:	f000 f9c3 	bl	800e850 <_Balloc>
 800e4ca:	4681      	mov	r9, r0
 800e4cc:	b918      	cbnz	r0, 800e4d6 <__gethex+0x3ba>
 800e4ce:	4b1a      	ldr	r3, [pc, #104]	@ (800e538 <__gethex+0x41c>)
 800e4d0:	4602      	mov	r2, r0
 800e4d2:	2184      	movs	r1, #132	@ 0x84
 800e4d4:	e6c5      	b.n	800e262 <__gethex+0x146>
 800e4d6:	6922      	ldr	r2, [r4, #16]
 800e4d8:	3202      	adds	r2, #2
 800e4da:	f104 010c 	add.w	r1, r4, #12
 800e4de:	0092      	lsls	r2, r2, #2
 800e4e0:	300c      	adds	r0, #12
 800e4e2:	f7fe fefe 	bl	800d2e2 <memcpy>
 800e4e6:	4621      	mov	r1, r4
 800e4e8:	9801      	ldr	r0, [sp, #4]
 800e4ea:	f000 f9f1 	bl	800e8d0 <_Bfree>
 800e4ee:	464c      	mov	r4, r9
 800e4f0:	6923      	ldr	r3, [r4, #16]
 800e4f2:	1c5a      	adds	r2, r3, #1
 800e4f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e4f8:	6122      	str	r2, [r4, #16]
 800e4fa:	2201      	movs	r2, #1
 800e4fc:	615a      	str	r2, [r3, #20]
 800e4fe:	e7be      	b.n	800e47e <__gethex+0x362>
 800e500:	6922      	ldr	r2, [r4, #16]
 800e502:	455a      	cmp	r2, fp
 800e504:	dd0b      	ble.n	800e51e <__gethex+0x402>
 800e506:	2101      	movs	r1, #1
 800e508:	4620      	mov	r0, r4
 800e50a:	f7ff fd9f 	bl	800e04c <rshift>
 800e50e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e512:	3701      	adds	r7, #1
 800e514:	42bb      	cmp	r3, r7
 800e516:	f6ff aee0 	blt.w	800e2da <__gethex+0x1be>
 800e51a:	2501      	movs	r5, #1
 800e51c:	e7c2      	b.n	800e4a4 <__gethex+0x388>
 800e51e:	f016 061f 	ands.w	r6, r6, #31
 800e522:	d0fa      	beq.n	800e51a <__gethex+0x3fe>
 800e524:	4453      	add	r3, sl
 800e526:	f1c6 0620 	rsb	r6, r6, #32
 800e52a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e52e:	f000 fa81 	bl	800ea34 <__hi0bits>
 800e532:	42b0      	cmp	r0, r6
 800e534:	dbe7      	blt.n	800e506 <__gethex+0x3ea>
 800e536:	e7f0      	b.n	800e51a <__gethex+0x3fe>
 800e538:	0800ff15 	.word	0x0800ff15

0800e53c <L_shift>:
 800e53c:	f1c2 0208 	rsb	r2, r2, #8
 800e540:	0092      	lsls	r2, r2, #2
 800e542:	b570      	push	{r4, r5, r6, lr}
 800e544:	f1c2 0620 	rsb	r6, r2, #32
 800e548:	6843      	ldr	r3, [r0, #4]
 800e54a:	6804      	ldr	r4, [r0, #0]
 800e54c:	fa03 f506 	lsl.w	r5, r3, r6
 800e550:	432c      	orrs	r4, r5
 800e552:	40d3      	lsrs	r3, r2
 800e554:	6004      	str	r4, [r0, #0]
 800e556:	f840 3f04 	str.w	r3, [r0, #4]!
 800e55a:	4288      	cmp	r0, r1
 800e55c:	d3f4      	bcc.n	800e548 <L_shift+0xc>
 800e55e:	bd70      	pop	{r4, r5, r6, pc}

0800e560 <__match>:
 800e560:	b530      	push	{r4, r5, lr}
 800e562:	6803      	ldr	r3, [r0, #0]
 800e564:	3301      	adds	r3, #1
 800e566:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e56a:	b914      	cbnz	r4, 800e572 <__match+0x12>
 800e56c:	6003      	str	r3, [r0, #0]
 800e56e:	2001      	movs	r0, #1
 800e570:	bd30      	pop	{r4, r5, pc}
 800e572:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e576:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e57a:	2d19      	cmp	r5, #25
 800e57c:	bf98      	it	ls
 800e57e:	3220      	addls	r2, #32
 800e580:	42a2      	cmp	r2, r4
 800e582:	d0f0      	beq.n	800e566 <__match+0x6>
 800e584:	2000      	movs	r0, #0
 800e586:	e7f3      	b.n	800e570 <__match+0x10>

0800e588 <__hexnan>:
 800e588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e58c:	680b      	ldr	r3, [r1, #0]
 800e58e:	6801      	ldr	r1, [r0, #0]
 800e590:	115e      	asrs	r6, r3, #5
 800e592:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e596:	f013 031f 	ands.w	r3, r3, #31
 800e59a:	b087      	sub	sp, #28
 800e59c:	bf18      	it	ne
 800e59e:	3604      	addne	r6, #4
 800e5a0:	2500      	movs	r5, #0
 800e5a2:	1f37      	subs	r7, r6, #4
 800e5a4:	4682      	mov	sl, r0
 800e5a6:	4690      	mov	r8, r2
 800e5a8:	9301      	str	r3, [sp, #4]
 800e5aa:	f846 5c04 	str.w	r5, [r6, #-4]
 800e5ae:	46b9      	mov	r9, r7
 800e5b0:	463c      	mov	r4, r7
 800e5b2:	9502      	str	r5, [sp, #8]
 800e5b4:	46ab      	mov	fp, r5
 800e5b6:	784a      	ldrb	r2, [r1, #1]
 800e5b8:	1c4b      	adds	r3, r1, #1
 800e5ba:	9303      	str	r3, [sp, #12]
 800e5bc:	b342      	cbz	r2, 800e610 <__hexnan+0x88>
 800e5be:	4610      	mov	r0, r2
 800e5c0:	9105      	str	r1, [sp, #20]
 800e5c2:	9204      	str	r2, [sp, #16]
 800e5c4:	f7ff fd94 	bl	800e0f0 <__hexdig_fun>
 800e5c8:	2800      	cmp	r0, #0
 800e5ca:	d151      	bne.n	800e670 <__hexnan+0xe8>
 800e5cc:	9a04      	ldr	r2, [sp, #16]
 800e5ce:	9905      	ldr	r1, [sp, #20]
 800e5d0:	2a20      	cmp	r2, #32
 800e5d2:	d818      	bhi.n	800e606 <__hexnan+0x7e>
 800e5d4:	9b02      	ldr	r3, [sp, #8]
 800e5d6:	459b      	cmp	fp, r3
 800e5d8:	dd13      	ble.n	800e602 <__hexnan+0x7a>
 800e5da:	454c      	cmp	r4, r9
 800e5dc:	d206      	bcs.n	800e5ec <__hexnan+0x64>
 800e5de:	2d07      	cmp	r5, #7
 800e5e0:	dc04      	bgt.n	800e5ec <__hexnan+0x64>
 800e5e2:	462a      	mov	r2, r5
 800e5e4:	4649      	mov	r1, r9
 800e5e6:	4620      	mov	r0, r4
 800e5e8:	f7ff ffa8 	bl	800e53c <L_shift>
 800e5ec:	4544      	cmp	r4, r8
 800e5ee:	d952      	bls.n	800e696 <__hexnan+0x10e>
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	f1a4 0904 	sub.w	r9, r4, #4
 800e5f6:	f844 3c04 	str.w	r3, [r4, #-4]
 800e5fa:	f8cd b008 	str.w	fp, [sp, #8]
 800e5fe:	464c      	mov	r4, r9
 800e600:	461d      	mov	r5, r3
 800e602:	9903      	ldr	r1, [sp, #12]
 800e604:	e7d7      	b.n	800e5b6 <__hexnan+0x2e>
 800e606:	2a29      	cmp	r2, #41	@ 0x29
 800e608:	d157      	bne.n	800e6ba <__hexnan+0x132>
 800e60a:	3102      	adds	r1, #2
 800e60c:	f8ca 1000 	str.w	r1, [sl]
 800e610:	f1bb 0f00 	cmp.w	fp, #0
 800e614:	d051      	beq.n	800e6ba <__hexnan+0x132>
 800e616:	454c      	cmp	r4, r9
 800e618:	d206      	bcs.n	800e628 <__hexnan+0xa0>
 800e61a:	2d07      	cmp	r5, #7
 800e61c:	dc04      	bgt.n	800e628 <__hexnan+0xa0>
 800e61e:	462a      	mov	r2, r5
 800e620:	4649      	mov	r1, r9
 800e622:	4620      	mov	r0, r4
 800e624:	f7ff ff8a 	bl	800e53c <L_shift>
 800e628:	4544      	cmp	r4, r8
 800e62a:	d936      	bls.n	800e69a <__hexnan+0x112>
 800e62c:	f1a8 0204 	sub.w	r2, r8, #4
 800e630:	4623      	mov	r3, r4
 800e632:	f853 1b04 	ldr.w	r1, [r3], #4
 800e636:	f842 1f04 	str.w	r1, [r2, #4]!
 800e63a:	429f      	cmp	r7, r3
 800e63c:	d2f9      	bcs.n	800e632 <__hexnan+0xaa>
 800e63e:	1b3b      	subs	r3, r7, r4
 800e640:	f023 0303 	bic.w	r3, r3, #3
 800e644:	3304      	adds	r3, #4
 800e646:	3401      	adds	r4, #1
 800e648:	3e03      	subs	r6, #3
 800e64a:	42b4      	cmp	r4, r6
 800e64c:	bf88      	it	hi
 800e64e:	2304      	movhi	r3, #4
 800e650:	4443      	add	r3, r8
 800e652:	2200      	movs	r2, #0
 800e654:	f843 2b04 	str.w	r2, [r3], #4
 800e658:	429f      	cmp	r7, r3
 800e65a:	d2fb      	bcs.n	800e654 <__hexnan+0xcc>
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	b91b      	cbnz	r3, 800e668 <__hexnan+0xe0>
 800e660:	4547      	cmp	r7, r8
 800e662:	d128      	bne.n	800e6b6 <__hexnan+0x12e>
 800e664:	2301      	movs	r3, #1
 800e666:	603b      	str	r3, [r7, #0]
 800e668:	2005      	movs	r0, #5
 800e66a:	b007      	add	sp, #28
 800e66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e670:	3501      	adds	r5, #1
 800e672:	2d08      	cmp	r5, #8
 800e674:	f10b 0b01 	add.w	fp, fp, #1
 800e678:	dd06      	ble.n	800e688 <__hexnan+0x100>
 800e67a:	4544      	cmp	r4, r8
 800e67c:	d9c1      	bls.n	800e602 <__hexnan+0x7a>
 800e67e:	2300      	movs	r3, #0
 800e680:	f844 3c04 	str.w	r3, [r4, #-4]
 800e684:	2501      	movs	r5, #1
 800e686:	3c04      	subs	r4, #4
 800e688:	6822      	ldr	r2, [r4, #0]
 800e68a:	f000 000f 	and.w	r0, r0, #15
 800e68e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e692:	6020      	str	r0, [r4, #0]
 800e694:	e7b5      	b.n	800e602 <__hexnan+0x7a>
 800e696:	2508      	movs	r5, #8
 800e698:	e7b3      	b.n	800e602 <__hexnan+0x7a>
 800e69a:	9b01      	ldr	r3, [sp, #4]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d0dd      	beq.n	800e65c <__hexnan+0xd4>
 800e6a0:	f1c3 0320 	rsb	r3, r3, #32
 800e6a4:	f04f 32ff 	mov.w	r2, #4294967295
 800e6a8:	40da      	lsrs	r2, r3
 800e6aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e6ae:	4013      	ands	r3, r2
 800e6b0:	f846 3c04 	str.w	r3, [r6, #-4]
 800e6b4:	e7d2      	b.n	800e65c <__hexnan+0xd4>
 800e6b6:	3f04      	subs	r7, #4
 800e6b8:	e7d0      	b.n	800e65c <__hexnan+0xd4>
 800e6ba:	2004      	movs	r0, #4
 800e6bc:	e7d5      	b.n	800e66a <__hexnan+0xe2>
	...

0800e6c0 <malloc>:
 800e6c0:	4b02      	ldr	r3, [pc, #8]	@ (800e6cc <malloc+0xc>)
 800e6c2:	4601      	mov	r1, r0
 800e6c4:	6818      	ldr	r0, [r3, #0]
 800e6c6:	f000 b825 	b.w	800e714 <_malloc_r>
 800e6ca:	bf00      	nop
 800e6cc:	20000208 	.word	0x20000208

0800e6d0 <sbrk_aligned>:
 800e6d0:	b570      	push	{r4, r5, r6, lr}
 800e6d2:	4e0f      	ldr	r6, [pc, #60]	@ (800e710 <sbrk_aligned+0x40>)
 800e6d4:	460c      	mov	r4, r1
 800e6d6:	6831      	ldr	r1, [r6, #0]
 800e6d8:	4605      	mov	r5, r0
 800e6da:	b911      	cbnz	r1, 800e6e2 <sbrk_aligned+0x12>
 800e6dc:	f001 f810 	bl	800f700 <_sbrk_r>
 800e6e0:	6030      	str	r0, [r6, #0]
 800e6e2:	4621      	mov	r1, r4
 800e6e4:	4628      	mov	r0, r5
 800e6e6:	f001 f80b 	bl	800f700 <_sbrk_r>
 800e6ea:	1c43      	adds	r3, r0, #1
 800e6ec:	d103      	bne.n	800e6f6 <sbrk_aligned+0x26>
 800e6ee:	f04f 34ff 	mov.w	r4, #4294967295
 800e6f2:	4620      	mov	r0, r4
 800e6f4:	bd70      	pop	{r4, r5, r6, pc}
 800e6f6:	1cc4      	adds	r4, r0, #3
 800e6f8:	f024 0403 	bic.w	r4, r4, #3
 800e6fc:	42a0      	cmp	r0, r4
 800e6fe:	d0f8      	beq.n	800e6f2 <sbrk_aligned+0x22>
 800e700:	1a21      	subs	r1, r4, r0
 800e702:	4628      	mov	r0, r5
 800e704:	f000 fffc 	bl	800f700 <_sbrk_r>
 800e708:	3001      	adds	r0, #1
 800e70a:	d1f2      	bne.n	800e6f2 <sbrk_aligned+0x22>
 800e70c:	e7ef      	b.n	800e6ee <sbrk_aligned+0x1e>
 800e70e:	bf00      	nop
 800e710:	20000ae8 	.word	0x20000ae8

0800e714 <_malloc_r>:
 800e714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e718:	1ccd      	adds	r5, r1, #3
 800e71a:	f025 0503 	bic.w	r5, r5, #3
 800e71e:	3508      	adds	r5, #8
 800e720:	2d0c      	cmp	r5, #12
 800e722:	bf38      	it	cc
 800e724:	250c      	movcc	r5, #12
 800e726:	2d00      	cmp	r5, #0
 800e728:	4606      	mov	r6, r0
 800e72a:	db01      	blt.n	800e730 <_malloc_r+0x1c>
 800e72c:	42a9      	cmp	r1, r5
 800e72e:	d904      	bls.n	800e73a <_malloc_r+0x26>
 800e730:	230c      	movs	r3, #12
 800e732:	6033      	str	r3, [r6, #0]
 800e734:	2000      	movs	r0, #0
 800e736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e73a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e810 <_malloc_r+0xfc>
 800e73e:	f000 f87b 	bl	800e838 <__malloc_lock>
 800e742:	f8d8 3000 	ldr.w	r3, [r8]
 800e746:	461c      	mov	r4, r3
 800e748:	bb44      	cbnz	r4, 800e79c <_malloc_r+0x88>
 800e74a:	4629      	mov	r1, r5
 800e74c:	4630      	mov	r0, r6
 800e74e:	f7ff ffbf 	bl	800e6d0 <sbrk_aligned>
 800e752:	1c43      	adds	r3, r0, #1
 800e754:	4604      	mov	r4, r0
 800e756:	d158      	bne.n	800e80a <_malloc_r+0xf6>
 800e758:	f8d8 4000 	ldr.w	r4, [r8]
 800e75c:	4627      	mov	r7, r4
 800e75e:	2f00      	cmp	r7, #0
 800e760:	d143      	bne.n	800e7ea <_malloc_r+0xd6>
 800e762:	2c00      	cmp	r4, #0
 800e764:	d04b      	beq.n	800e7fe <_malloc_r+0xea>
 800e766:	6823      	ldr	r3, [r4, #0]
 800e768:	4639      	mov	r1, r7
 800e76a:	4630      	mov	r0, r6
 800e76c:	eb04 0903 	add.w	r9, r4, r3
 800e770:	f000 ffc6 	bl	800f700 <_sbrk_r>
 800e774:	4581      	cmp	r9, r0
 800e776:	d142      	bne.n	800e7fe <_malloc_r+0xea>
 800e778:	6821      	ldr	r1, [r4, #0]
 800e77a:	1a6d      	subs	r5, r5, r1
 800e77c:	4629      	mov	r1, r5
 800e77e:	4630      	mov	r0, r6
 800e780:	f7ff ffa6 	bl	800e6d0 <sbrk_aligned>
 800e784:	3001      	adds	r0, #1
 800e786:	d03a      	beq.n	800e7fe <_malloc_r+0xea>
 800e788:	6823      	ldr	r3, [r4, #0]
 800e78a:	442b      	add	r3, r5
 800e78c:	6023      	str	r3, [r4, #0]
 800e78e:	f8d8 3000 	ldr.w	r3, [r8]
 800e792:	685a      	ldr	r2, [r3, #4]
 800e794:	bb62      	cbnz	r2, 800e7f0 <_malloc_r+0xdc>
 800e796:	f8c8 7000 	str.w	r7, [r8]
 800e79a:	e00f      	b.n	800e7bc <_malloc_r+0xa8>
 800e79c:	6822      	ldr	r2, [r4, #0]
 800e79e:	1b52      	subs	r2, r2, r5
 800e7a0:	d420      	bmi.n	800e7e4 <_malloc_r+0xd0>
 800e7a2:	2a0b      	cmp	r2, #11
 800e7a4:	d917      	bls.n	800e7d6 <_malloc_r+0xc2>
 800e7a6:	1961      	adds	r1, r4, r5
 800e7a8:	42a3      	cmp	r3, r4
 800e7aa:	6025      	str	r5, [r4, #0]
 800e7ac:	bf18      	it	ne
 800e7ae:	6059      	strne	r1, [r3, #4]
 800e7b0:	6863      	ldr	r3, [r4, #4]
 800e7b2:	bf08      	it	eq
 800e7b4:	f8c8 1000 	streq.w	r1, [r8]
 800e7b8:	5162      	str	r2, [r4, r5]
 800e7ba:	604b      	str	r3, [r1, #4]
 800e7bc:	4630      	mov	r0, r6
 800e7be:	f000 f841 	bl	800e844 <__malloc_unlock>
 800e7c2:	f104 000b 	add.w	r0, r4, #11
 800e7c6:	1d23      	adds	r3, r4, #4
 800e7c8:	f020 0007 	bic.w	r0, r0, #7
 800e7cc:	1ac2      	subs	r2, r0, r3
 800e7ce:	bf1c      	itt	ne
 800e7d0:	1a1b      	subne	r3, r3, r0
 800e7d2:	50a3      	strne	r3, [r4, r2]
 800e7d4:	e7af      	b.n	800e736 <_malloc_r+0x22>
 800e7d6:	6862      	ldr	r2, [r4, #4]
 800e7d8:	42a3      	cmp	r3, r4
 800e7da:	bf0c      	ite	eq
 800e7dc:	f8c8 2000 	streq.w	r2, [r8]
 800e7e0:	605a      	strne	r2, [r3, #4]
 800e7e2:	e7eb      	b.n	800e7bc <_malloc_r+0xa8>
 800e7e4:	4623      	mov	r3, r4
 800e7e6:	6864      	ldr	r4, [r4, #4]
 800e7e8:	e7ae      	b.n	800e748 <_malloc_r+0x34>
 800e7ea:	463c      	mov	r4, r7
 800e7ec:	687f      	ldr	r7, [r7, #4]
 800e7ee:	e7b6      	b.n	800e75e <_malloc_r+0x4a>
 800e7f0:	461a      	mov	r2, r3
 800e7f2:	685b      	ldr	r3, [r3, #4]
 800e7f4:	42a3      	cmp	r3, r4
 800e7f6:	d1fb      	bne.n	800e7f0 <_malloc_r+0xdc>
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	6053      	str	r3, [r2, #4]
 800e7fc:	e7de      	b.n	800e7bc <_malloc_r+0xa8>
 800e7fe:	230c      	movs	r3, #12
 800e800:	6033      	str	r3, [r6, #0]
 800e802:	4630      	mov	r0, r6
 800e804:	f000 f81e 	bl	800e844 <__malloc_unlock>
 800e808:	e794      	b.n	800e734 <_malloc_r+0x20>
 800e80a:	6005      	str	r5, [r0, #0]
 800e80c:	e7d6      	b.n	800e7bc <_malloc_r+0xa8>
 800e80e:	bf00      	nop
 800e810:	20000aec 	.word	0x20000aec

0800e814 <__ascii_mbtowc>:
 800e814:	b082      	sub	sp, #8
 800e816:	b901      	cbnz	r1, 800e81a <__ascii_mbtowc+0x6>
 800e818:	a901      	add	r1, sp, #4
 800e81a:	b142      	cbz	r2, 800e82e <__ascii_mbtowc+0x1a>
 800e81c:	b14b      	cbz	r3, 800e832 <__ascii_mbtowc+0x1e>
 800e81e:	7813      	ldrb	r3, [r2, #0]
 800e820:	600b      	str	r3, [r1, #0]
 800e822:	7812      	ldrb	r2, [r2, #0]
 800e824:	1e10      	subs	r0, r2, #0
 800e826:	bf18      	it	ne
 800e828:	2001      	movne	r0, #1
 800e82a:	b002      	add	sp, #8
 800e82c:	4770      	bx	lr
 800e82e:	4610      	mov	r0, r2
 800e830:	e7fb      	b.n	800e82a <__ascii_mbtowc+0x16>
 800e832:	f06f 0001 	mvn.w	r0, #1
 800e836:	e7f8      	b.n	800e82a <__ascii_mbtowc+0x16>

0800e838 <__malloc_lock>:
 800e838:	4801      	ldr	r0, [pc, #4]	@ (800e840 <__malloc_lock+0x8>)
 800e83a:	f7fe bd50 	b.w	800d2de <__retarget_lock_acquire_recursive>
 800e83e:	bf00      	nop
 800e840:	20000ae4 	.word	0x20000ae4

0800e844 <__malloc_unlock>:
 800e844:	4801      	ldr	r0, [pc, #4]	@ (800e84c <__malloc_unlock+0x8>)
 800e846:	f7fe bd4b 	b.w	800d2e0 <__retarget_lock_release_recursive>
 800e84a:	bf00      	nop
 800e84c:	20000ae4 	.word	0x20000ae4

0800e850 <_Balloc>:
 800e850:	b570      	push	{r4, r5, r6, lr}
 800e852:	69c6      	ldr	r6, [r0, #28]
 800e854:	4604      	mov	r4, r0
 800e856:	460d      	mov	r5, r1
 800e858:	b976      	cbnz	r6, 800e878 <_Balloc+0x28>
 800e85a:	2010      	movs	r0, #16
 800e85c:	f7ff ff30 	bl	800e6c0 <malloc>
 800e860:	4602      	mov	r2, r0
 800e862:	61e0      	str	r0, [r4, #28]
 800e864:	b920      	cbnz	r0, 800e870 <_Balloc+0x20>
 800e866:	4b18      	ldr	r3, [pc, #96]	@ (800e8c8 <_Balloc+0x78>)
 800e868:	4818      	ldr	r0, [pc, #96]	@ (800e8cc <_Balloc+0x7c>)
 800e86a:	216b      	movs	r1, #107	@ 0x6b
 800e86c:	f000 ff58 	bl	800f720 <__assert_func>
 800e870:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e874:	6006      	str	r6, [r0, #0]
 800e876:	60c6      	str	r6, [r0, #12]
 800e878:	69e6      	ldr	r6, [r4, #28]
 800e87a:	68f3      	ldr	r3, [r6, #12]
 800e87c:	b183      	cbz	r3, 800e8a0 <_Balloc+0x50>
 800e87e:	69e3      	ldr	r3, [r4, #28]
 800e880:	68db      	ldr	r3, [r3, #12]
 800e882:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e886:	b9b8      	cbnz	r0, 800e8b8 <_Balloc+0x68>
 800e888:	2101      	movs	r1, #1
 800e88a:	fa01 f605 	lsl.w	r6, r1, r5
 800e88e:	1d72      	adds	r2, r6, #5
 800e890:	0092      	lsls	r2, r2, #2
 800e892:	4620      	mov	r0, r4
 800e894:	f000 ff62 	bl	800f75c <_calloc_r>
 800e898:	b160      	cbz	r0, 800e8b4 <_Balloc+0x64>
 800e89a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e89e:	e00e      	b.n	800e8be <_Balloc+0x6e>
 800e8a0:	2221      	movs	r2, #33	@ 0x21
 800e8a2:	2104      	movs	r1, #4
 800e8a4:	4620      	mov	r0, r4
 800e8a6:	f000 ff59 	bl	800f75c <_calloc_r>
 800e8aa:	69e3      	ldr	r3, [r4, #28]
 800e8ac:	60f0      	str	r0, [r6, #12]
 800e8ae:	68db      	ldr	r3, [r3, #12]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d1e4      	bne.n	800e87e <_Balloc+0x2e>
 800e8b4:	2000      	movs	r0, #0
 800e8b6:	bd70      	pop	{r4, r5, r6, pc}
 800e8b8:	6802      	ldr	r2, [r0, #0]
 800e8ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e8be:	2300      	movs	r3, #0
 800e8c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e8c4:	e7f7      	b.n	800e8b6 <_Balloc+0x66>
 800e8c6:	bf00      	nop
 800e8c8:	0800fea6 	.word	0x0800fea6
 800e8cc:	0800ff86 	.word	0x0800ff86

0800e8d0 <_Bfree>:
 800e8d0:	b570      	push	{r4, r5, r6, lr}
 800e8d2:	69c6      	ldr	r6, [r0, #28]
 800e8d4:	4605      	mov	r5, r0
 800e8d6:	460c      	mov	r4, r1
 800e8d8:	b976      	cbnz	r6, 800e8f8 <_Bfree+0x28>
 800e8da:	2010      	movs	r0, #16
 800e8dc:	f7ff fef0 	bl	800e6c0 <malloc>
 800e8e0:	4602      	mov	r2, r0
 800e8e2:	61e8      	str	r0, [r5, #28]
 800e8e4:	b920      	cbnz	r0, 800e8f0 <_Bfree+0x20>
 800e8e6:	4b09      	ldr	r3, [pc, #36]	@ (800e90c <_Bfree+0x3c>)
 800e8e8:	4809      	ldr	r0, [pc, #36]	@ (800e910 <_Bfree+0x40>)
 800e8ea:	218f      	movs	r1, #143	@ 0x8f
 800e8ec:	f000 ff18 	bl	800f720 <__assert_func>
 800e8f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e8f4:	6006      	str	r6, [r0, #0]
 800e8f6:	60c6      	str	r6, [r0, #12]
 800e8f8:	b13c      	cbz	r4, 800e90a <_Bfree+0x3a>
 800e8fa:	69eb      	ldr	r3, [r5, #28]
 800e8fc:	6862      	ldr	r2, [r4, #4]
 800e8fe:	68db      	ldr	r3, [r3, #12]
 800e900:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e904:	6021      	str	r1, [r4, #0]
 800e906:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e90a:	bd70      	pop	{r4, r5, r6, pc}
 800e90c:	0800fea6 	.word	0x0800fea6
 800e910:	0800ff86 	.word	0x0800ff86

0800e914 <__multadd>:
 800e914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e918:	690d      	ldr	r5, [r1, #16]
 800e91a:	4607      	mov	r7, r0
 800e91c:	460c      	mov	r4, r1
 800e91e:	461e      	mov	r6, r3
 800e920:	f101 0c14 	add.w	ip, r1, #20
 800e924:	2000      	movs	r0, #0
 800e926:	f8dc 3000 	ldr.w	r3, [ip]
 800e92a:	b299      	uxth	r1, r3
 800e92c:	fb02 6101 	mla	r1, r2, r1, r6
 800e930:	0c1e      	lsrs	r6, r3, #16
 800e932:	0c0b      	lsrs	r3, r1, #16
 800e934:	fb02 3306 	mla	r3, r2, r6, r3
 800e938:	b289      	uxth	r1, r1
 800e93a:	3001      	adds	r0, #1
 800e93c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e940:	4285      	cmp	r5, r0
 800e942:	f84c 1b04 	str.w	r1, [ip], #4
 800e946:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e94a:	dcec      	bgt.n	800e926 <__multadd+0x12>
 800e94c:	b30e      	cbz	r6, 800e992 <__multadd+0x7e>
 800e94e:	68a3      	ldr	r3, [r4, #8]
 800e950:	42ab      	cmp	r3, r5
 800e952:	dc19      	bgt.n	800e988 <__multadd+0x74>
 800e954:	6861      	ldr	r1, [r4, #4]
 800e956:	4638      	mov	r0, r7
 800e958:	3101      	adds	r1, #1
 800e95a:	f7ff ff79 	bl	800e850 <_Balloc>
 800e95e:	4680      	mov	r8, r0
 800e960:	b928      	cbnz	r0, 800e96e <__multadd+0x5a>
 800e962:	4602      	mov	r2, r0
 800e964:	4b0c      	ldr	r3, [pc, #48]	@ (800e998 <__multadd+0x84>)
 800e966:	480d      	ldr	r0, [pc, #52]	@ (800e99c <__multadd+0x88>)
 800e968:	21ba      	movs	r1, #186	@ 0xba
 800e96a:	f000 fed9 	bl	800f720 <__assert_func>
 800e96e:	6922      	ldr	r2, [r4, #16]
 800e970:	3202      	adds	r2, #2
 800e972:	f104 010c 	add.w	r1, r4, #12
 800e976:	0092      	lsls	r2, r2, #2
 800e978:	300c      	adds	r0, #12
 800e97a:	f7fe fcb2 	bl	800d2e2 <memcpy>
 800e97e:	4621      	mov	r1, r4
 800e980:	4638      	mov	r0, r7
 800e982:	f7ff ffa5 	bl	800e8d0 <_Bfree>
 800e986:	4644      	mov	r4, r8
 800e988:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e98c:	3501      	adds	r5, #1
 800e98e:	615e      	str	r6, [r3, #20]
 800e990:	6125      	str	r5, [r4, #16]
 800e992:	4620      	mov	r0, r4
 800e994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e998:	0800ff15 	.word	0x0800ff15
 800e99c:	0800ff86 	.word	0x0800ff86

0800e9a0 <__s2b>:
 800e9a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9a4:	460c      	mov	r4, r1
 800e9a6:	4615      	mov	r5, r2
 800e9a8:	461f      	mov	r7, r3
 800e9aa:	2209      	movs	r2, #9
 800e9ac:	3308      	adds	r3, #8
 800e9ae:	4606      	mov	r6, r0
 800e9b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e9b4:	2100      	movs	r1, #0
 800e9b6:	2201      	movs	r2, #1
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	db09      	blt.n	800e9d0 <__s2b+0x30>
 800e9bc:	4630      	mov	r0, r6
 800e9be:	f7ff ff47 	bl	800e850 <_Balloc>
 800e9c2:	b940      	cbnz	r0, 800e9d6 <__s2b+0x36>
 800e9c4:	4602      	mov	r2, r0
 800e9c6:	4b19      	ldr	r3, [pc, #100]	@ (800ea2c <__s2b+0x8c>)
 800e9c8:	4819      	ldr	r0, [pc, #100]	@ (800ea30 <__s2b+0x90>)
 800e9ca:	21d3      	movs	r1, #211	@ 0xd3
 800e9cc:	f000 fea8 	bl	800f720 <__assert_func>
 800e9d0:	0052      	lsls	r2, r2, #1
 800e9d2:	3101      	adds	r1, #1
 800e9d4:	e7f0      	b.n	800e9b8 <__s2b+0x18>
 800e9d6:	9b08      	ldr	r3, [sp, #32]
 800e9d8:	6143      	str	r3, [r0, #20]
 800e9da:	2d09      	cmp	r5, #9
 800e9dc:	f04f 0301 	mov.w	r3, #1
 800e9e0:	6103      	str	r3, [r0, #16]
 800e9e2:	dd16      	ble.n	800ea12 <__s2b+0x72>
 800e9e4:	f104 0909 	add.w	r9, r4, #9
 800e9e8:	46c8      	mov	r8, r9
 800e9ea:	442c      	add	r4, r5
 800e9ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e9f0:	4601      	mov	r1, r0
 800e9f2:	3b30      	subs	r3, #48	@ 0x30
 800e9f4:	220a      	movs	r2, #10
 800e9f6:	4630      	mov	r0, r6
 800e9f8:	f7ff ff8c 	bl	800e914 <__multadd>
 800e9fc:	45a0      	cmp	r8, r4
 800e9fe:	d1f5      	bne.n	800e9ec <__s2b+0x4c>
 800ea00:	f1a5 0408 	sub.w	r4, r5, #8
 800ea04:	444c      	add	r4, r9
 800ea06:	1b2d      	subs	r5, r5, r4
 800ea08:	1963      	adds	r3, r4, r5
 800ea0a:	42bb      	cmp	r3, r7
 800ea0c:	db04      	blt.n	800ea18 <__s2b+0x78>
 800ea0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea12:	340a      	adds	r4, #10
 800ea14:	2509      	movs	r5, #9
 800ea16:	e7f6      	b.n	800ea06 <__s2b+0x66>
 800ea18:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ea1c:	4601      	mov	r1, r0
 800ea1e:	3b30      	subs	r3, #48	@ 0x30
 800ea20:	220a      	movs	r2, #10
 800ea22:	4630      	mov	r0, r6
 800ea24:	f7ff ff76 	bl	800e914 <__multadd>
 800ea28:	e7ee      	b.n	800ea08 <__s2b+0x68>
 800ea2a:	bf00      	nop
 800ea2c:	0800ff15 	.word	0x0800ff15
 800ea30:	0800ff86 	.word	0x0800ff86

0800ea34 <__hi0bits>:
 800ea34:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ea38:	4603      	mov	r3, r0
 800ea3a:	bf36      	itet	cc
 800ea3c:	0403      	lslcc	r3, r0, #16
 800ea3e:	2000      	movcs	r0, #0
 800ea40:	2010      	movcc	r0, #16
 800ea42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ea46:	bf3c      	itt	cc
 800ea48:	021b      	lslcc	r3, r3, #8
 800ea4a:	3008      	addcc	r0, #8
 800ea4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ea50:	bf3c      	itt	cc
 800ea52:	011b      	lslcc	r3, r3, #4
 800ea54:	3004      	addcc	r0, #4
 800ea56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea5a:	bf3c      	itt	cc
 800ea5c:	009b      	lslcc	r3, r3, #2
 800ea5e:	3002      	addcc	r0, #2
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	db05      	blt.n	800ea70 <__hi0bits+0x3c>
 800ea64:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ea68:	f100 0001 	add.w	r0, r0, #1
 800ea6c:	bf08      	it	eq
 800ea6e:	2020      	moveq	r0, #32
 800ea70:	4770      	bx	lr

0800ea72 <__lo0bits>:
 800ea72:	6803      	ldr	r3, [r0, #0]
 800ea74:	4602      	mov	r2, r0
 800ea76:	f013 0007 	ands.w	r0, r3, #7
 800ea7a:	d00b      	beq.n	800ea94 <__lo0bits+0x22>
 800ea7c:	07d9      	lsls	r1, r3, #31
 800ea7e:	d421      	bmi.n	800eac4 <__lo0bits+0x52>
 800ea80:	0798      	lsls	r0, r3, #30
 800ea82:	bf49      	itett	mi
 800ea84:	085b      	lsrmi	r3, r3, #1
 800ea86:	089b      	lsrpl	r3, r3, #2
 800ea88:	2001      	movmi	r0, #1
 800ea8a:	6013      	strmi	r3, [r2, #0]
 800ea8c:	bf5c      	itt	pl
 800ea8e:	6013      	strpl	r3, [r2, #0]
 800ea90:	2002      	movpl	r0, #2
 800ea92:	4770      	bx	lr
 800ea94:	b299      	uxth	r1, r3
 800ea96:	b909      	cbnz	r1, 800ea9c <__lo0bits+0x2a>
 800ea98:	0c1b      	lsrs	r3, r3, #16
 800ea9a:	2010      	movs	r0, #16
 800ea9c:	b2d9      	uxtb	r1, r3
 800ea9e:	b909      	cbnz	r1, 800eaa4 <__lo0bits+0x32>
 800eaa0:	3008      	adds	r0, #8
 800eaa2:	0a1b      	lsrs	r3, r3, #8
 800eaa4:	0719      	lsls	r1, r3, #28
 800eaa6:	bf04      	itt	eq
 800eaa8:	091b      	lsreq	r3, r3, #4
 800eaaa:	3004      	addeq	r0, #4
 800eaac:	0799      	lsls	r1, r3, #30
 800eaae:	bf04      	itt	eq
 800eab0:	089b      	lsreq	r3, r3, #2
 800eab2:	3002      	addeq	r0, #2
 800eab4:	07d9      	lsls	r1, r3, #31
 800eab6:	d403      	bmi.n	800eac0 <__lo0bits+0x4e>
 800eab8:	085b      	lsrs	r3, r3, #1
 800eaba:	f100 0001 	add.w	r0, r0, #1
 800eabe:	d003      	beq.n	800eac8 <__lo0bits+0x56>
 800eac0:	6013      	str	r3, [r2, #0]
 800eac2:	4770      	bx	lr
 800eac4:	2000      	movs	r0, #0
 800eac6:	4770      	bx	lr
 800eac8:	2020      	movs	r0, #32
 800eaca:	4770      	bx	lr

0800eacc <__i2b>:
 800eacc:	b510      	push	{r4, lr}
 800eace:	460c      	mov	r4, r1
 800ead0:	2101      	movs	r1, #1
 800ead2:	f7ff febd 	bl	800e850 <_Balloc>
 800ead6:	4602      	mov	r2, r0
 800ead8:	b928      	cbnz	r0, 800eae6 <__i2b+0x1a>
 800eada:	4b05      	ldr	r3, [pc, #20]	@ (800eaf0 <__i2b+0x24>)
 800eadc:	4805      	ldr	r0, [pc, #20]	@ (800eaf4 <__i2b+0x28>)
 800eade:	f240 1145 	movw	r1, #325	@ 0x145
 800eae2:	f000 fe1d 	bl	800f720 <__assert_func>
 800eae6:	2301      	movs	r3, #1
 800eae8:	6144      	str	r4, [r0, #20]
 800eaea:	6103      	str	r3, [r0, #16]
 800eaec:	bd10      	pop	{r4, pc}
 800eaee:	bf00      	nop
 800eaf0:	0800ff15 	.word	0x0800ff15
 800eaf4:	0800ff86 	.word	0x0800ff86

0800eaf8 <__multiply>:
 800eaf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eafc:	4614      	mov	r4, r2
 800eafe:	690a      	ldr	r2, [r1, #16]
 800eb00:	6923      	ldr	r3, [r4, #16]
 800eb02:	429a      	cmp	r2, r3
 800eb04:	bfa8      	it	ge
 800eb06:	4623      	movge	r3, r4
 800eb08:	460f      	mov	r7, r1
 800eb0a:	bfa4      	itt	ge
 800eb0c:	460c      	movge	r4, r1
 800eb0e:	461f      	movge	r7, r3
 800eb10:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800eb14:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800eb18:	68a3      	ldr	r3, [r4, #8]
 800eb1a:	6861      	ldr	r1, [r4, #4]
 800eb1c:	eb0a 0609 	add.w	r6, sl, r9
 800eb20:	42b3      	cmp	r3, r6
 800eb22:	b085      	sub	sp, #20
 800eb24:	bfb8      	it	lt
 800eb26:	3101      	addlt	r1, #1
 800eb28:	f7ff fe92 	bl	800e850 <_Balloc>
 800eb2c:	b930      	cbnz	r0, 800eb3c <__multiply+0x44>
 800eb2e:	4602      	mov	r2, r0
 800eb30:	4b44      	ldr	r3, [pc, #272]	@ (800ec44 <__multiply+0x14c>)
 800eb32:	4845      	ldr	r0, [pc, #276]	@ (800ec48 <__multiply+0x150>)
 800eb34:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800eb38:	f000 fdf2 	bl	800f720 <__assert_func>
 800eb3c:	f100 0514 	add.w	r5, r0, #20
 800eb40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800eb44:	462b      	mov	r3, r5
 800eb46:	2200      	movs	r2, #0
 800eb48:	4543      	cmp	r3, r8
 800eb4a:	d321      	bcc.n	800eb90 <__multiply+0x98>
 800eb4c:	f107 0114 	add.w	r1, r7, #20
 800eb50:	f104 0214 	add.w	r2, r4, #20
 800eb54:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800eb58:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800eb5c:	9302      	str	r3, [sp, #8]
 800eb5e:	1b13      	subs	r3, r2, r4
 800eb60:	3b15      	subs	r3, #21
 800eb62:	f023 0303 	bic.w	r3, r3, #3
 800eb66:	3304      	adds	r3, #4
 800eb68:	f104 0715 	add.w	r7, r4, #21
 800eb6c:	42ba      	cmp	r2, r7
 800eb6e:	bf38      	it	cc
 800eb70:	2304      	movcc	r3, #4
 800eb72:	9301      	str	r3, [sp, #4]
 800eb74:	9b02      	ldr	r3, [sp, #8]
 800eb76:	9103      	str	r1, [sp, #12]
 800eb78:	428b      	cmp	r3, r1
 800eb7a:	d80c      	bhi.n	800eb96 <__multiply+0x9e>
 800eb7c:	2e00      	cmp	r6, #0
 800eb7e:	dd03      	ble.n	800eb88 <__multiply+0x90>
 800eb80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d05b      	beq.n	800ec40 <__multiply+0x148>
 800eb88:	6106      	str	r6, [r0, #16]
 800eb8a:	b005      	add	sp, #20
 800eb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb90:	f843 2b04 	str.w	r2, [r3], #4
 800eb94:	e7d8      	b.n	800eb48 <__multiply+0x50>
 800eb96:	f8b1 a000 	ldrh.w	sl, [r1]
 800eb9a:	f1ba 0f00 	cmp.w	sl, #0
 800eb9e:	d024      	beq.n	800ebea <__multiply+0xf2>
 800eba0:	f104 0e14 	add.w	lr, r4, #20
 800eba4:	46a9      	mov	r9, r5
 800eba6:	f04f 0c00 	mov.w	ip, #0
 800ebaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ebae:	f8d9 3000 	ldr.w	r3, [r9]
 800ebb2:	fa1f fb87 	uxth.w	fp, r7
 800ebb6:	b29b      	uxth	r3, r3
 800ebb8:	fb0a 330b 	mla	r3, sl, fp, r3
 800ebbc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ebc0:	f8d9 7000 	ldr.w	r7, [r9]
 800ebc4:	4463      	add	r3, ip
 800ebc6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ebca:	fb0a c70b 	mla	r7, sl, fp, ip
 800ebce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ebd2:	b29b      	uxth	r3, r3
 800ebd4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ebd8:	4572      	cmp	r2, lr
 800ebda:	f849 3b04 	str.w	r3, [r9], #4
 800ebde:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ebe2:	d8e2      	bhi.n	800ebaa <__multiply+0xb2>
 800ebe4:	9b01      	ldr	r3, [sp, #4]
 800ebe6:	f845 c003 	str.w	ip, [r5, r3]
 800ebea:	9b03      	ldr	r3, [sp, #12]
 800ebec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ebf0:	3104      	adds	r1, #4
 800ebf2:	f1b9 0f00 	cmp.w	r9, #0
 800ebf6:	d021      	beq.n	800ec3c <__multiply+0x144>
 800ebf8:	682b      	ldr	r3, [r5, #0]
 800ebfa:	f104 0c14 	add.w	ip, r4, #20
 800ebfe:	46ae      	mov	lr, r5
 800ec00:	f04f 0a00 	mov.w	sl, #0
 800ec04:	f8bc b000 	ldrh.w	fp, [ip]
 800ec08:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ec0c:	fb09 770b 	mla	r7, r9, fp, r7
 800ec10:	4457      	add	r7, sl
 800ec12:	b29b      	uxth	r3, r3
 800ec14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ec18:	f84e 3b04 	str.w	r3, [lr], #4
 800ec1c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ec20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ec24:	f8be 3000 	ldrh.w	r3, [lr]
 800ec28:	fb09 330a 	mla	r3, r9, sl, r3
 800ec2c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ec30:	4562      	cmp	r2, ip
 800ec32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ec36:	d8e5      	bhi.n	800ec04 <__multiply+0x10c>
 800ec38:	9f01      	ldr	r7, [sp, #4]
 800ec3a:	51eb      	str	r3, [r5, r7]
 800ec3c:	3504      	adds	r5, #4
 800ec3e:	e799      	b.n	800eb74 <__multiply+0x7c>
 800ec40:	3e01      	subs	r6, #1
 800ec42:	e79b      	b.n	800eb7c <__multiply+0x84>
 800ec44:	0800ff15 	.word	0x0800ff15
 800ec48:	0800ff86 	.word	0x0800ff86

0800ec4c <__pow5mult>:
 800ec4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec50:	4615      	mov	r5, r2
 800ec52:	f012 0203 	ands.w	r2, r2, #3
 800ec56:	4607      	mov	r7, r0
 800ec58:	460e      	mov	r6, r1
 800ec5a:	d007      	beq.n	800ec6c <__pow5mult+0x20>
 800ec5c:	4c25      	ldr	r4, [pc, #148]	@ (800ecf4 <__pow5mult+0xa8>)
 800ec5e:	3a01      	subs	r2, #1
 800ec60:	2300      	movs	r3, #0
 800ec62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ec66:	f7ff fe55 	bl	800e914 <__multadd>
 800ec6a:	4606      	mov	r6, r0
 800ec6c:	10ad      	asrs	r5, r5, #2
 800ec6e:	d03d      	beq.n	800ecec <__pow5mult+0xa0>
 800ec70:	69fc      	ldr	r4, [r7, #28]
 800ec72:	b97c      	cbnz	r4, 800ec94 <__pow5mult+0x48>
 800ec74:	2010      	movs	r0, #16
 800ec76:	f7ff fd23 	bl	800e6c0 <malloc>
 800ec7a:	4602      	mov	r2, r0
 800ec7c:	61f8      	str	r0, [r7, #28]
 800ec7e:	b928      	cbnz	r0, 800ec8c <__pow5mult+0x40>
 800ec80:	4b1d      	ldr	r3, [pc, #116]	@ (800ecf8 <__pow5mult+0xac>)
 800ec82:	481e      	ldr	r0, [pc, #120]	@ (800ecfc <__pow5mult+0xb0>)
 800ec84:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ec88:	f000 fd4a 	bl	800f720 <__assert_func>
 800ec8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ec90:	6004      	str	r4, [r0, #0]
 800ec92:	60c4      	str	r4, [r0, #12]
 800ec94:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ec98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ec9c:	b94c      	cbnz	r4, 800ecb2 <__pow5mult+0x66>
 800ec9e:	f240 2171 	movw	r1, #625	@ 0x271
 800eca2:	4638      	mov	r0, r7
 800eca4:	f7ff ff12 	bl	800eacc <__i2b>
 800eca8:	2300      	movs	r3, #0
 800ecaa:	f8c8 0008 	str.w	r0, [r8, #8]
 800ecae:	4604      	mov	r4, r0
 800ecb0:	6003      	str	r3, [r0, #0]
 800ecb2:	f04f 0900 	mov.w	r9, #0
 800ecb6:	07eb      	lsls	r3, r5, #31
 800ecb8:	d50a      	bpl.n	800ecd0 <__pow5mult+0x84>
 800ecba:	4631      	mov	r1, r6
 800ecbc:	4622      	mov	r2, r4
 800ecbe:	4638      	mov	r0, r7
 800ecc0:	f7ff ff1a 	bl	800eaf8 <__multiply>
 800ecc4:	4631      	mov	r1, r6
 800ecc6:	4680      	mov	r8, r0
 800ecc8:	4638      	mov	r0, r7
 800ecca:	f7ff fe01 	bl	800e8d0 <_Bfree>
 800ecce:	4646      	mov	r6, r8
 800ecd0:	106d      	asrs	r5, r5, #1
 800ecd2:	d00b      	beq.n	800ecec <__pow5mult+0xa0>
 800ecd4:	6820      	ldr	r0, [r4, #0]
 800ecd6:	b938      	cbnz	r0, 800ece8 <__pow5mult+0x9c>
 800ecd8:	4622      	mov	r2, r4
 800ecda:	4621      	mov	r1, r4
 800ecdc:	4638      	mov	r0, r7
 800ecde:	f7ff ff0b 	bl	800eaf8 <__multiply>
 800ece2:	6020      	str	r0, [r4, #0]
 800ece4:	f8c0 9000 	str.w	r9, [r0]
 800ece8:	4604      	mov	r4, r0
 800ecea:	e7e4      	b.n	800ecb6 <__pow5mult+0x6a>
 800ecec:	4630      	mov	r0, r6
 800ecee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecf2:	bf00      	nop
 800ecf4:	0800ffe0 	.word	0x0800ffe0
 800ecf8:	0800fea6 	.word	0x0800fea6
 800ecfc:	0800ff86 	.word	0x0800ff86

0800ed00 <__lshift>:
 800ed00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed04:	460c      	mov	r4, r1
 800ed06:	6849      	ldr	r1, [r1, #4]
 800ed08:	6923      	ldr	r3, [r4, #16]
 800ed0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ed0e:	68a3      	ldr	r3, [r4, #8]
 800ed10:	4607      	mov	r7, r0
 800ed12:	4691      	mov	r9, r2
 800ed14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ed18:	f108 0601 	add.w	r6, r8, #1
 800ed1c:	42b3      	cmp	r3, r6
 800ed1e:	db0b      	blt.n	800ed38 <__lshift+0x38>
 800ed20:	4638      	mov	r0, r7
 800ed22:	f7ff fd95 	bl	800e850 <_Balloc>
 800ed26:	4605      	mov	r5, r0
 800ed28:	b948      	cbnz	r0, 800ed3e <__lshift+0x3e>
 800ed2a:	4602      	mov	r2, r0
 800ed2c:	4b28      	ldr	r3, [pc, #160]	@ (800edd0 <__lshift+0xd0>)
 800ed2e:	4829      	ldr	r0, [pc, #164]	@ (800edd4 <__lshift+0xd4>)
 800ed30:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ed34:	f000 fcf4 	bl	800f720 <__assert_func>
 800ed38:	3101      	adds	r1, #1
 800ed3a:	005b      	lsls	r3, r3, #1
 800ed3c:	e7ee      	b.n	800ed1c <__lshift+0x1c>
 800ed3e:	2300      	movs	r3, #0
 800ed40:	f100 0114 	add.w	r1, r0, #20
 800ed44:	f100 0210 	add.w	r2, r0, #16
 800ed48:	4618      	mov	r0, r3
 800ed4a:	4553      	cmp	r3, sl
 800ed4c:	db33      	blt.n	800edb6 <__lshift+0xb6>
 800ed4e:	6920      	ldr	r0, [r4, #16]
 800ed50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ed54:	f104 0314 	add.w	r3, r4, #20
 800ed58:	f019 091f 	ands.w	r9, r9, #31
 800ed5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ed60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ed64:	d02b      	beq.n	800edbe <__lshift+0xbe>
 800ed66:	f1c9 0e20 	rsb	lr, r9, #32
 800ed6a:	468a      	mov	sl, r1
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	6818      	ldr	r0, [r3, #0]
 800ed70:	fa00 f009 	lsl.w	r0, r0, r9
 800ed74:	4310      	orrs	r0, r2
 800ed76:	f84a 0b04 	str.w	r0, [sl], #4
 800ed7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed7e:	459c      	cmp	ip, r3
 800ed80:	fa22 f20e 	lsr.w	r2, r2, lr
 800ed84:	d8f3      	bhi.n	800ed6e <__lshift+0x6e>
 800ed86:	ebac 0304 	sub.w	r3, ip, r4
 800ed8a:	3b15      	subs	r3, #21
 800ed8c:	f023 0303 	bic.w	r3, r3, #3
 800ed90:	3304      	adds	r3, #4
 800ed92:	f104 0015 	add.w	r0, r4, #21
 800ed96:	4584      	cmp	ip, r0
 800ed98:	bf38      	it	cc
 800ed9a:	2304      	movcc	r3, #4
 800ed9c:	50ca      	str	r2, [r1, r3]
 800ed9e:	b10a      	cbz	r2, 800eda4 <__lshift+0xa4>
 800eda0:	f108 0602 	add.w	r6, r8, #2
 800eda4:	3e01      	subs	r6, #1
 800eda6:	4638      	mov	r0, r7
 800eda8:	612e      	str	r6, [r5, #16]
 800edaa:	4621      	mov	r1, r4
 800edac:	f7ff fd90 	bl	800e8d0 <_Bfree>
 800edb0:	4628      	mov	r0, r5
 800edb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edb6:	f842 0f04 	str.w	r0, [r2, #4]!
 800edba:	3301      	adds	r3, #1
 800edbc:	e7c5      	b.n	800ed4a <__lshift+0x4a>
 800edbe:	3904      	subs	r1, #4
 800edc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800edc4:	f841 2f04 	str.w	r2, [r1, #4]!
 800edc8:	459c      	cmp	ip, r3
 800edca:	d8f9      	bhi.n	800edc0 <__lshift+0xc0>
 800edcc:	e7ea      	b.n	800eda4 <__lshift+0xa4>
 800edce:	bf00      	nop
 800edd0:	0800ff15 	.word	0x0800ff15
 800edd4:	0800ff86 	.word	0x0800ff86

0800edd8 <__mcmp>:
 800edd8:	690a      	ldr	r2, [r1, #16]
 800edda:	4603      	mov	r3, r0
 800eddc:	6900      	ldr	r0, [r0, #16]
 800edde:	1a80      	subs	r0, r0, r2
 800ede0:	b530      	push	{r4, r5, lr}
 800ede2:	d10e      	bne.n	800ee02 <__mcmp+0x2a>
 800ede4:	3314      	adds	r3, #20
 800ede6:	3114      	adds	r1, #20
 800ede8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800edec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800edf0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800edf4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800edf8:	4295      	cmp	r5, r2
 800edfa:	d003      	beq.n	800ee04 <__mcmp+0x2c>
 800edfc:	d205      	bcs.n	800ee0a <__mcmp+0x32>
 800edfe:	f04f 30ff 	mov.w	r0, #4294967295
 800ee02:	bd30      	pop	{r4, r5, pc}
 800ee04:	42a3      	cmp	r3, r4
 800ee06:	d3f3      	bcc.n	800edf0 <__mcmp+0x18>
 800ee08:	e7fb      	b.n	800ee02 <__mcmp+0x2a>
 800ee0a:	2001      	movs	r0, #1
 800ee0c:	e7f9      	b.n	800ee02 <__mcmp+0x2a>
	...

0800ee10 <__mdiff>:
 800ee10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee14:	4689      	mov	r9, r1
 800ee16:	4606      	mov	r6, r0
 800ee18:	4611      	mov	r1, r2
 800ee1a:	4648      	mov	r0, r9
 800ee1c:	4614      	mov	r4, r2
 800ee1e:	f7ff ffdb 	bl	800edd8 <__mcmp>
 800ee22:	1e05      	subs	r5, r0, #0
 800ee24:	d112      	bne.n	800ee4c <__mdiff+0x3c>
 800ee26:	4629      	mov	r1, r5
 800ee28:	4630      	mov	r0, r6
 800ee2a:	f7ff fd11 	bl	800e850 <_Balloc>
 800ee2e:	4602      	mov	r2, r0
 800ee30:	b928      	cbnz	r0, 800ee3e <__mdiff+0x2e>
 800ee32:	4b3f      	ldr	r3, [pc, #252]	@ (800ef30 <__mdiff+0x120>)
 800ee34:	f240 2137 	movw	r1, #567	@ 0x237
 800ee38:	483e      	ldr	r0, [pc, #248]	@ (800ef34 <__mdiff+0x124>)
 800ee3a:	f000 fc71 	bl	800f720 <__assert_func>
 800ee3e:	2301      	movs	r3, #1
 800ee40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ee44:	4610      	mov	r0, r2
 800ee46:	b003      	add	sp, #12
 800ee48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee4c:	bfbc      	itt	lt
 800ee4e:	464b      	movlt	r3, r9
 800ee50:	46a1      	movlt	r9, r4
 800ee52:	4630      	mov	r0, r6
 800ee54:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ee58:	bfba      	itte	lt
 800ee5a:	461c      	movlt	r4, r3
 800ee5c:	2501      	movlt	r5, #1
 800ee5e:	2500      	movge	r5, #0
 800ee60:	f7ff fcf6 	bl	800e850 <_Balloc>
 800ee64:	4602      	mov	r2, r0
 800ee66:	b918      	cbnz	r0, 800ee70 <__mdiff+0x60>
 800ee68:	4b31      	ldr	r3, [pc, #196]	@ (800ef30 <__mdiff+0x120>)
 800ee6a:	f240 2145 	movw	r1, #581	@ 0x245
 800ee6e:	e7e3      	b.n	800ee38 <__mdiff+0x28>
 800ee70:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ee74:	6926      	ldr	r6, [r4, #16]
 800ee76:	60c5      	str	r5, [r0, #12]
 800ee78:	f109 0310 	add.w	r3, r9, #16
 800ee7c:	f109 0514 	add.w	r5, r9, #20
 800ee80:	f104 0e14 	add.w	lr, r4, #20
 800ee84:	f100 0b14 	add.w	fp, r0, #20
 800ee88:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ee8c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ee90:	9301      	str	r3, [sp, #4]
 800ee92:	46d9      	mov	r9, fp
 800ee94:	f04f 0c00 	mov.w	ip, #0
 800ee98:	9b01      	ldr	r3, [sp, #4]
 800ee9a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ee9e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800eea2:	9301      	str	r3, [sp, #4]
 800eea4:	fa1f f38a 	uxth.w	r3, sl
 800eea8:	4619      	mov	r1, r3
 800eeaa:	b283      	uxth	r3, r0
 800eeac:	1acb      	subs	r3, r1, r3
 800eeae:	0c00      	lsrs	r0, r0, #16
 800eeb0:	4463      	add	r3, ip
 800eeb2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800eeb6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800eec0:	4576      	cmp	r6, lr
 800eec2:	f849 3b04 	str.w	r3, [r9], #4
 800eec6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eeca:	d8e5      	bhi.n	800ee98 <__mdiff+0x88>
 800eecc:	1b33      	subs	r3, r6, r4
 800eece:	3b15      	subs	r3, #21
 800eed0:	f023 0303 	bic.w	r3, r3, #3
 800eed4:	3415      	adds	r4, #21
 800eed6:	3304      	adds	r3, #4
 800eed8:	42a6      	cmp	r6, r4
 800eeda:	bf38      	it	cc
 800eedc:	2304      	movcc	r3, #4
 800eede:	441d      	add	r5, r3
 800eee0:	445b      	add	r3, fp
 800eee2:	461e      	mov	r6, r3
 800eee4:	462c      	mov	r4, r5
 800eee6:	4544      	cmp	r4, r8
 800eee8:	d30e      	bcc.n	800ef08 <__mdiff+0xf8>
 800eeea:	f108 0103 	add.w	r1, r8, #3
 800eeee:	1b49      	subs	r1, r1, r5
 800eef0:	f021 0103 	bic.w	r1, r1, #3
 800eef4:	3d03      	subs	r5, #3
 800eef6:	45a8      	cmp	r8, r5
 800eef8:	bf38      	it	cc
 800eefa:	2100      	movcc	r1, #0
 800eefc:	440b      	add	r3, r1
 800eefe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ef02:	b191      	cbz	r1, 800ef2a <__mdiff+0x11a>
 800ef04:	6117      	str	r7, [r2, #16]
 800ef06:	e79d      	b.n	800ee44 <__mdiff+0x34>
 800ef08:	f854 1b04 	ldr.w	r1, [r4], #4
 800ef0c:	46e6      	mov	lr, ip
 800ef0e:	0c08      	lsrs	r0, r1, #16
 800ef10:	fa1c fc81 	uxtah	ip, ip, r1
 800ef14:	4471      	add	r1, lr
 800ef16:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ef1a:	b289      	uxth	r1, r1
 800ef1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ef20:	f846 1b04 	str.w	r1, [r6], #4
 800ef24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ef28:	e7dd      	b.n	800eee6 <__mdiff+0xd6>
 800ef2a:	3f01      	subs	r7, #1
 800ef2c:	e7e7      	b.n	800eefe <__mdiff+0xee>
 800ef2e:	bf00      	nop
 800ef30:	0800ff15 	.word	0x0800ff15
 800ef34:	0800ff86 	.word	0x0800ff86

0800ef38 <__ulp>:
 800ef38:	b082      	sub	sp, #8
 800ef3a:	ed8d 0b00 	vstr	d0, [sp]
 800ef3e:	9a01      	ldr	r2, [sp, #4]
 800ef40:	4b0f      	ldr	r3, [pc, #60]	@ (800ef80 <__ulp+0x48>)
 800ef42:	4013      	ands	r3, r2
 800ef44:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	dc08      	bgt.n	800ef5e <__ulp+0x26>
 800ef4c:	425b      	negs	r3, r3
 800ef4e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ef52:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ef56:	da04      	bge.n	800ef62 <__ulp+0x2a>
 800ef58:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ef5c:	4113      	asrs	r3, r2
 800ef5e:	2200      	movs	r2, #0
 800ef60:	e008      	b.n	800ef74 <__ulp+0x3c>
 800ef62:	f1a2 0314 	sub.w	r3, r2, #20
 800ef66:	2b1e      	cmp	r3, #30
 800ef68:	bfda      	itte	le
 800ef6a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ef6e:	40da      	lsrle	r2, r3
 800ef70:	2201      	movgt	r2, #1
 800ef72:	2300      	movs	r3, #0
 800ef74:	4619      	mov	r1, r3
 800ef76:	4610      	mov	r0, r2
 800ef78:	ec41 0b10 	vmov	d0, r0, r1
 800ef7c:	b002      	add	sp, #8
 800ef7e:	4770      	bx	lr
 800ef80:	7ff00000 	.word	0x7ff00000

0800ef84 <__b2d>:
 800ef84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef88:	6906      	ldr	r6, [r0, #16]
 800ef8a:	f100 0814 	add.w	r8, r0, #20
 800ef8e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ef92:	1f37      	subs	r7, r6, #4
 800ef94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ef98:	4610      	mov	r0, r2
 800ef9a:	f7ff fd4b 	bl	800ea34 <__hi0bits>
 800ef9e:	f1c0 0320 	rsb	r3, r0, #32
 800efa2:	280a      	cmp	r0, #10
 800efa4:	600b      	str	r3, [r1, #0]
 800efa6:	491b      	ldr	r1, [pc, #108]	@ (800f014 <__b2d+0x90>)
 800efa8:	dc15      	bgt.n	800efd6 <__b2d+0x52>
 800efaa:	f1c0 0c0b 	rsb	ip, r0, #11
 800efae:	fa22 f30c 	lsr.w	r3, r2, ip
 800efb2:	45b8      	cmp	r8, r7
 800efb4:	ea43 0501 	orr.w	r5, r3, r1
 800efb8:	bf34      	ite	cc
 800efba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800efbe:	2300      	movcs	r3, #0
 800efc0:	3015      	adds	r0, #21
 800efc2:	fa02 f000 	lsl.w	r0, r2, r0
 800efc6:	fa23 f30c 	lsr.w	r3, r3, ip
 800efca:	4303      	orrs	r3, r0
 800efcc:	461c      	mov	r4, r3
 800efce:	ec45 4b10 	vmov	d0, r4, r5
 800efd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efd6:	45b8      	cmp	r8, r7
 800efd8:	bf3a      	itte	cc
 800efda:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800efde:	f1a6 0708 	subcc.w	r7, r6, #8
 800efe2:	2300      	movcs	r3, #0
 800efe4:	380b      	subs	r0, #11
 800efe6:	d012      	beq.n	800f00e <__b2d+0x8a>
 800efe8:	f1c0 0120 	rsb	r1, r0, #32
 800efec:	fa23 f401 	lsr.w	r4, r3, r1
 800eff0:	4082      	lsls	r2, r0
 800eff2:	4322      	orrs	r2, r4
 800eff4:	4547      	cmp	r7, r8
 800eff6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800effa:	bf8c      	ite	hi
 800effc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f000:	2200      	movls	r2, #0
 800f002:	4083      	lsls	r3, r0
 800f004:	40ca      	lsrs	r2, r1
 800f006:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f00a:	4313      	orrs	r3, r2
 800f00c:	e7de      	b.n	800efcc <__b2d+0x48>
 800f00e:	ea42 0501 	orr.w	r5, r2, r1
 800f012:	e7db      	b.n	800efcc <__b2d+0x48>
 800f014:	3ff00000 	.word	0x3ff00000

0800f018 <__d2b>:
 800f018:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f01c:	460f      	mov	r7, r1
 800f01e:	2101      	movs	r1, #1
 800f020:	ec59 8b10 	vmov	r8, r9, d0
 800f024:	4616      	mov	r6, r2
 800f026:	f7ff fc13 	bl	800e850 <_Balloc>
 800f02a:	4604      	mov	r4, r0
 800f02c:	b930      	cbnz	r0, 800f03c <__d2b+0x24>
 800f02e:	4602      	mov	r2, r0
 800f030:	4b23      	ldr	r3, [pc, #140]	@ (800f0c0 <__d2b+0xa8>)
 800f032:	4824      	ldr	r0, [pc, #144]	@ (800f0c4 <__d2b+0xac>)
 800f034:	f240 310f 	movw	r1, #783	@ 0x30f
 800f038:	f000 fb72 	bl	800f720 <__assert_func>
 800f03c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f040:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f044:	b10d      	cbz	r5, 800f04a <__d2b+0x32>
 800f046:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f04a:	9301      	str	r3, [sp, #4]
 800f04c:	f1b8 0300 	subs.w	r3, r8, #0
 800f050:	d023      	beq.n	800f09a <__d2b+0x82>
 800f052:	4668      	mov	r0, sp
 800f054:	9300      	str	r3, [sp, #0]
 800f056:	f7ff fd0c 	bl	800ea72 <__lo0bits>
 800f05a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f05e:	b1d0      	cbz	r0, 800f096 <__d2b+0x7e>
 800f060:	f1c0 0320 	rsb	r3, r0, #32
 800f064:	fa02 f303 	lsl.w	r3, r2, r3
 800f068:	430b      	orrs	r3, r1
 800f06a:	40c2      	lsrs	r2, r0
 800f06c:	6163      	str	r3, [r4, #20]
 800f06e:	9201      	str	r2, [sp, #4]
 800f070:	9b01      	ldr	r3, [sp, #4]
 800f072:	61a3      	str	r3, [r4, #24]
 800f074:	2b00      	cmp	r3, #0
 800f076:	bf0c      	ite	eq
 800f078:	2201      	moveq	r2, #1
 800f07a:	2202      	movne	r2, #2
 800f07c:	6122      	str	r2, [r4, #16]
 800f07e:	b1a5      	cbz	r5, 800f0aa <__d2b+0x92>
 800f080:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f084:	4405      	add	r5, r0
 800f086:	603d      	str	r5, [r7, #0]
 800f088:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f08c:	6030      	str	r0, [r6, #0]
 800f08e:	4620      	mov	r0, r4
 800f090:	b003      	add	sp, #12
 800f092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f096:	6161      	str	r1, [r4, #20]
 800f098:	e7ea      	b.n	800f070 <__d2b+0x58>
 800f09a:	a801      	add	r0, sp, #4
 800f09c:	f7ff fce9 	bl	800ea72 <__lo0bits>
 800f0a0:	9b01      	ldr	r3, [sp, #4]
 800f0a2:	6163      	str	r3, [r4, #20]
 800f0a4:	3020      	adds	r0, #32
 800f0a6:	2201      	movs	r2, #1
 800f0a8:	e7e8      	b.n	800f07c <__d2b+0x64>
 800f0aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f0ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f0b2:	6038      	str	r0, [r7, #0]
 800f0b4:	6918      	ldr	r0, [r3, #16]
 800f0b6:	f7ff fcbd 	bl	800ea34 <__hi0bits>
 800f0ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f0be:	e7e5      	b.n	800f08c <__d2b+0x74>
 800f0c0:	0800ff15 	.word	0x0800ff15
 800f0c4:	0800ff86 	.word	0x0800ff86

0800f0c8 <__ratio>:
 800f0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0cc:	b085      	sub	sp, #20
 800f0ce:	e9cd 1000 	strd	r1, r0, [sp]
 800f0d2:	a902      	add	r1, sp, #8
 800f0d4:	f7ff ff56 	bl	800ef84 <__b2d>
 800f0d8:	9800      	ldr	r0, [sp, #0]
 800f0da:	a903      	add	r1, sp, #12
 800f0dc:	ec55 4b10 	vmov	r4, r5, d0
 800f0e0:	f7ff ff50 	bl	800ef84 <__b2d>
 800f0e4:	9b01      	ldr	r3, [sp, #4]
 800f0e6:	6919      	ldr	r1, [r3, #16]
 800f0e8:	9b00      	ldr	r3, [sp, #0]
 800f0ea:	691b      	ldr	r3, [r3, #16]
 800f0ec:	1ac9      	subs	r1, r1, r3
 800f0ee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f0f2:	1a9b      	subs	r3, r3, r2
 800f0f4:	ec5b ab10 	vmov	sl, fp, d0
 800f0f8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	bfce      	itee	gt
 800f100:	462a      	movgt	r2, r5
 800f102:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f106:	465a      	movle	r2, fp
 800f108:	462f      	mov	r7, r5
 800f10a:	46d9      	mov	r9, fp
 800f10c:	bfcc      	ite	gt
 800f10e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f112:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f116:	464b      	mov	r3, r9
 800f118:	4652      	mov	r2, sl
 800f11a:	4620      	mov	r0, r4
 800f11c:	4639      	mov	r1, r7
 800f11e:	f7f1 fbbd 	bl	800089c <__aeabi_ddiv>
 800f122:	ec41 0b10 	vmov	d0, r0, r1
 800f126:	b005      	add	sp, #20
 800f128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f12c <__copybits>:
 800f12c:	3901      	subs	r1, #1
 800f12e:	b570      	push	{r4, r5, r6, lr}
 800f130:	1149      	asrs	r1, r1, #5
 800f132:	6914      	ldr	r4, [r2, #16]
 800f134:	3101      	adds	r1, #1
 800f136:	f102 0314 	add.w	r3, r2, #20
 800f13a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f13e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f142:	1f05      	subs	r5, r0, #4
 800f144:	42a3      	cmp	r3, r4
 800f146:	d30c      	bcc.n	800f162 <__copybits+0x36>
 800f148:	1aa3      	subs	r3, r4, r2
 800f14a:	3b11      	subs	r3, #17
 800f14c:	f023 0303 	bic.w	r3, r3, #3
 800f150:	3211      	adds	r2, #17
 800f152:	42a2      	cmp	r2, r4
 800f154:	bf88      	it	hi
 800f156:	2300      	movhi	r3, #0
 800f158:	4418      	add	r0, r3
 800f15a:	2300      	movs	r3, #0
 800f15c:	4288      	cmp	r0, r1
 800f15e:	d305      	bcc.n	800f16c <__copybits+0x40>
 800f160:	bd70      	pop	{r4, r5, r6, pc}
 800f162:	f853 6b04 	ldr.w	r6, [r3], #4
 800f166:	f845 6f04 	str.w	r6, [r5, #4]!
 800f16a:	e7eb      	b.n	800f144 <__copybits+0x18>
 800f16c:	f840 3b04 	str.w	r3, [r0], #4
 800f170:	e7f4      	b.n	800f15c <__copybits+0x30>

0800f172 <__any_on>:
 800f172:	f100 0214 	add.w	r2, r0, #20
 800f176:	6900      	ldr	r0, [r0, #16]
 800f178:	114b      	asrs	r3, r1, #5
 800f17a:	4298      	cmp	r0, r3
 800f17c:	b510      	push	{r4, lr}
 800f17e:	db11      	blt.n	800f1a4 <__any_on+0x32>
 800f180:	dd0a      	ble.n	800f198 <__any_on+0x26>
 800f182:	f011 011f 	ands.w	r1, r1, #31
 800f186:	d007      	beq.n	800f198 <__any_on+0x26>
 800f188:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f18c:	fa24 f001 	lsr.w	r0, r4, r1
 800f190:	fa00 f101 	lsl.w	r1, r0, r1
 800f194:	428c      	cmp	r4, r1
 800f196:	d10b      	bne.n	800f1b0 <__any_on+0x3e>
 800f198:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f19c:	4293      	cmp	r3, r2
 800f19e:	d803      	bhi.n	800f1a8 <__any_on+0x36>
 800f1a0:	2000      	movs	r0, #0
 800f1a2:	bd10      	pop	{r4, pc}
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	e7f7      	b.n	800f198 <__any_on+0x26>
 800f1a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f1ac:	2900      	cmp	r1, #0
 800f1ae:	d0f5      	beq.n	800f19c <__any_on+0x2a>
 800f1b0:	2001      	movs	r0, #1
 800f1b2:	e7f6      	b.n	800f1a2 <__any_on+0x30>

0800f1b4 <_strtol_l.constprop.0>:
 800f1b4:	2b24      	cmp	r3, #36	@ 0x24
 800f1b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1ba:	4686      	mov	lr, r0
 800f1bc:	4690      	mov	r8, r2
 800f1be:	d801      	bhi.n	800f1c4 <_strtol_l.constprop.0+0x10>
 800f1c0:	2b01      	cmp	r3, #1
 800f1c2:	d106      	bne.n	800f1d2 <_strtol_l.constprop.0+0x1e>
 800f1c4:	f7fe f860 	bl	800d288 <__errno>
 800f1c8:	2316      	movs	r3, #22
 800f1ca:	6003      	str	r3, [r0, #0]
 800f1cc:	2000      	movs	r0, #0
 800f1ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1d2:	4834      	ldr	r0, [pc, #208]	@ (800f2a4 <_strtol_l.constprop.0+0xf0>)
 800f1d4:	460d      	mov	r5, r1
 800f1d6:	462a      	mov	r2, r5
 800f1d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f1dc:	5d06      	ldrb	r6, [r0, r4]
 800f1de:	f016 0608 	ands.w	r6, r6, #8
 800f1e2:	d1f8      	bne.n	800f1d6 <_strtol_l.constprop.0+0x22>
 800f1e4:	2c2d      	cmp	r4, #45	@ 0x2d
 800f1e6:	d12d      	bne.n	800f244 <_strtol_l.constprop.0+0x90>
 800f1e8:	782c      	ldrb	r4, [r5, #0]
 800f1ea:	2601      	movs	r6, #1
 800f1ec:	1c95      	adds	r5, r2, #2
 800f1ee:	f033 0210 	bics.w	r2, r3, #16
 800f1f2:	d109      	bne.n	800f208 <_strtol_l.constprop.0+0x54>
 800f1f4:	2c30      	cmp	r4, #48	@ 0x30
 800f1f6:	d12a      	bne.n	800f24e <_strtol_l.constprop.0+0x9a>
 800f1f8:	782a      	ldrb	r2, [r5, #0]
 800f1fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f1fe:	2a58      	cmp	r2, #88	@ 0x58
 800f200:	d125      	bne.n	800f24e <_strtol_l.constprop.0+0x9a>
 800f202:	786c      	ldrb	r4, [r5, #1]
 800f204:	2310      	movs	r3, #16
 800f206:	3502      	adds	r5, #2
 800f208:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f20c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f210:	2200      	movs	r2, #0
 800f212:	fbbc f9f3 	udiv	r9, ip, r3
 800f216:	4610      	mov	r0, r2
 800f218:	fb03 ca19 	mls	sl, r3, r9, ip
 800f21c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f220:	2f09      	cmp	r7, #9
 800f222:	d81b      	bhi.n	800f25c <_strtol_l.constprop.0+0xa8>
 800f224:	463c      	mov	r4, r7
 800f226:	42a3      	cmp	r3, r4
 800f228:	dd27      	ble.n	800f27a <_strtol_l.constprop.0+0xc6>
 800f22a:	1c57      	adds	r7, r2, #1
 800f22c:	d007      	beq.n	800f23e <_strtol_l.constprop.0+0x8a>
 800f22e:	4581      	cmp	r9, r0
 800f230:	d320      	bcc.n	800f274 <_strtol_l.constprop.0+0xc0>
 800f232:	d101      	bne.n	800f238 <_strtol_l.constprop.0+0x84>
 800f234:	45a2      	cmp	sl, r4
 800f236:	db1d      	blt.n	800f274 <_strtol_l.constprop.0+0xc0>
 800f238:	fb00 4003 	mla	r0, r0, r3, r4
 800f23c:	2201      	movs	r2, #1
 800f23e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f242:	e7eb      	b.n	800f21c <_strtol_l.constprop.0+0x68>
 800f244:	2c2b      	cmp	r4, #43	@ 0x2b
 800f246:	bf04      	itt	eq
 800f248:	782c      	ldrbeq	r4, [r5, #0]
 800f24a:	1c95      	addeq	r5, r2, #2
 800f24c:	e7cf      	b.n	800f1ee <_strtol_l.constprop.0+0x3a>
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d1da      	bne.n	800f208 <_strtol_l.constprop.0+0x54>
 800f252:	2c30      	cmp	r4, #48	@ 0x30
 800f254:	bf0c      	ite	eq
 800f256:	2308      	moveq	r3, #8
 800f258:	230a      	movne	r3, #10
 800f25a:	e7d5      	b.n	800f208 <_strtol_l.constprop.0+0x54>
 800f25c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f260:	2f19      	cmp	r7, #25
 800f262:	d801      	bhi.n	800f268 <_strtol_l.constprop.0+0xb4>
 800f264:	3c37      	subs	r4, #55	@ 0x37
 800f266:	e7de      	b.n	800f226 <_strtol_l.constprop.0+0x72>
 800f268:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f26c:	2f19      	cmp	r7, #25
 800f26e:	d804      	bhi.n	800f27a <_strtol_l.constprop.0+0xc6>
 800f270:	3c57      	subs	r4, #87	@ 0x57
 800f272:	e7d8      	b.n	800f226 <_strtol_l.constprop.0+0x72>
 800f274:	f04f 32ff 	mov.w	r2, #4294967295
 800f278:	e7e1      	b.n	800f23e <_strtol_l.constprop.0+0x8a>
 800f27a:	1c53      	adds	r3, r2, #1
 800f27c:	d108      	bne.n	800f290 <_strtol_l.constprop.0+0xdc>
 800f27e:	2322      	movs	r3, #34	@ 0x22
 800f280:	f8ce 3000 	str.w	r3, [lr]
 800f284:	4660      	mov	r0, ip
 800f286:	f1b8 0f00 	cmp.w	r8, #0
 800f28a:	d0a0      	beq.n	800f1ce <_strtol_l.constprop.0+0x1a>
 800f28c:	1e69      	subs	r1, r5, #1
 800f28e:	e006      	b.n	800f29e <_strtol_l.constprop.0+0xea>
 800f290:	b106      	cbz	r6, 800f294 <_strtol_l.constprop.0+0xe0>
 800f292:	4240      	negs	r0, r0
 800f294:	f1b8 0f00 	cmp.w	r8, #0
 800f298:	d099      	beq.n	800f1ce <_strtol_l.constprop.0+0x1a>
 800f29a:	2a00      	cmp	r2, #0
 800f29c:	d1f6      	bne.n	800f28c <_strtol_l.constprop.0+0xd8>
 800f29e:	f8c8 1000 	str.w	r1, [r8]
 800f2a2:	e794      	b.n	800f1ce <_strtol_l.constprop.0+0x1a>
 800f2a4:	080100e1 	.word	0x080100e1

0800f2a8 <_strtol_r>:
 800f2a8:	f7ff bf84 	b.w	800f1b4 <_strtol_l.constprop.0>

0800f2ac <__ascii_wctomb>:
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	4608      	mov	r0, r1
 800f2b0:	b141      	cbz	r1, 800f2c4 <__ascii_wctomb+0x18>
 800f2b2:	2aff      	cmp	r2, #255	@ 0xff
 800f2b4:	d904      	bls.n	800f2c0 <__ascii_wctomb+0x14>
 800f2b6:	228a      	movs	r2, #138	@ 0x8a
 800f2b8:	601a      	str	r2, [r3, #0]
 800f2ba:	f04f 30ff 	mov.w	r0, #4294967295
 800f2be:	4770      	bx	lr
 800f2c0:	700a      	strb	r2, [r1, #0]
 800f2c2:	2001      	movs	r0, #1
 800f2c4:	4770      	bx	lr

0800f2c6 <__ssputs_r>:
 800f2c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2ca:	688e      	ldr	r6, [r1, #8]
 800f2cc:	461f      	mov	r7, r3
 800f2ce:	42be      	cmp	r6, r7
 800f2d0:	680b      	ldr	r3, [r1, #0]
 800f2d2:	4682      	mov	sl, r0
 800f2d4:	460c      	mov	r4, r1
 800f2d6:	4690      	mov	r8, r2
 800f2d8:	d82d      	bhi.n	800f336 <__ssputs_r+0x70>
 800f2da:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f2de:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f2e2:	d026      	beq.n	800f332 <__ssputs_r+0x6c>
 800f2e4:	6965      	ldr	r5, [r4, #20]
 800f2e6:	6909      	ldr	r1, [r1, #16]
 800f2e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f2ec:	eba3 0901 	sub.w	r9, r3, r1
 800f2f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f2f4:	1c7b      	adds	r3, r7, #1
 800f2f6:	444b      	add	r3, r9
 800f2f8:	106d      	asrs	r5, r5, #1
 800f2fa:	429d      	cmp	r5, r3
 800f2fc:	bf38      	it	cc
 800f2fe:	461d      	movcc	r5, r3
 800f300:	0553      	lsls	r3, r2, #21
 800f302:	d527      	bpl.n	800f354 <__ssputs_r+0x8e>
 800f304:	4629      	mov	r1, r5
 800f306:	f7ff fa05 	bl	800e714 <_malloc_r>
 800f30a:	4606      	mov	r6, r0
 800f30c:	b360      	cbz	r0, 800f368 <__ssputs_r+0xa2>
 800f30e:	6921      	ldr	r1, [r4, #16]
 800f310:	464a      	mov	r2, r9
 800f312:	f7fd ffe6 	bl	800d2e2 <memcpy>
 800f316:	89a3      	ldrh	r3, [r4, #12]
 800f318:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f31c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f320:	81a3      	strh	r3, [r4, #12]
 800f322:	6126      	str	r6, [r4, #16]
 800f324:	6165      	str	r5, [r4, #20]
 800f326:	444e      	add	r6, r9
 800f328:	eba5 0509 	sub.w	r5, r5, r9
 800f32c:	6026      	str	r6, [r4, #0]
 800f32e:	60a5      	str	r5, [r4, #8]
 800f330:	463e      	mov	r6, r7
 800f332:	42be      	cmp	r6, r7
 800f334:	d900      	bls.n	800f338 <__ssputs_r+0x72>
 800f336:	463e      	mov	r6, r7
 800f338:	6820      	ldr	r0, [r4, #0]
 800f33a:	4632      	mov	r2, r6
 800f33c:	4641      	mov	r1, r8
 800f33e:	f000 f9c5 	bl	800f6cc <memmove>
 800f342:	68a3      	ldr	r3, [r4, #8]
 800f344:	1b9b      	subs	r3, r3, r6
 800f346:	60a3      	str	r3, [r4, #8]
 800f348:	6823      	ldr	r3, [r4, #0]
 800f34a:	4433      	add	r3, r6
 800f34c:	6023      	str	r3, [r4, #0]
 800f34e:	2000      	movs	r0, #0
 800f350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f354:	462a      	mov	r2, r5
 800f356:	f000 fa15 	bl	800f784 <_realloc_r>
 800f35a:	4606      	mov	r6, r0
 800f35c:	2800      	cmp	r0, #0
 800f35e:	d1e0      	bne.n	800f322 <__ssputs_r+0x5c>
 800f360:	6921      	ldr	r1, [r4, #16]
 800f362:	4650      	mov	r0, sl
 800f364:	f7fe fe28 	bl	800dfb8 <_free_r>
 800f368:	230c      	movs	r3, #12
 800f36a:	f8ca 3000 	str.w	r3, [sl]
 800f36e:	89a3      	ldrh	r3, [r4, #12]
 800f370:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f374:	81a3      	strh	r3, [r4, #12]
 800f376:	f04f 30ff 	mov.w	r0, #4294967295
 800f37a:	e7e9      	b.n	800f350 <__ssputs_r+0x8a>

0800f37c <_svfiprintf_r>:
 800f37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f380:	4698      	mov	r8, r3
 800f382:	898b      	ldrh	r3, [r1, #12]
 800f384:	061b      	lsls	r3, r3, #24
 800f386:	b09d      	sub	sp, #116	@ 0x74
 800f388:	4607      	mov	r7, r0
 800f38a:	460d      	mov	r5, r1
 800f38c:	4614      	mov	r4, r2
 800f38e:	d510      	bpl.n	800f3b2 <_svfiprintf_r+0x36>
 800f390:	690b      	ldr	r3, [r1, #16]
 800f392:	b973      	cbnz	r3, 800f3b2 <_svfiprintf_r+0x36>
 800f394:	2140      	movs	r1, #64	@ 0x40
 800f396:	f7ff f9bd 	bl	800e714 <_malloc_r>
 800f39a:	6028      	str	r0, [r5, #0]
 800f39c:	6128      	str	r0, [r5, #16]
 800f39e:	b930      	cbnz	r0, 800f3ae <_svfiprintf_r+0x32>
 800f3a0:	230c      	movs	r3, #12
 800f3a2:	603b      	str	r3, [r7, #0]
 800f3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f3a8:	b01d      	add	sp, #116	@ 0x74
 800f3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3ae:	2340      	movs	r3, #64	@ 0x40
 800f3b0:	616b      	str	r3, [r5, #20]
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f3b6:	2320      	movs	r3, #32
 800f3b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f3bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3c0:	2330      	movs	r3, #48	@ 0x30
 800f3c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f560 <_svfiprintf_r+0x1e4>
 800f3c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f3ca:	f04f 0901 	mov.w	r9, #1
 800f3ce:	4623      	mov	r3, r4
 800f3d0:	469a      	mov	sl, r3
 800f3d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3d6:	b10a      	cbz	r2, 800f3dc <_svfiprintf_r+0x60>
 800f3d8:	2a25      	cmp	r2, #37	@ 0x25
 800f3da:	d1f9      	bne.n	800f3d0 <_svfiprintf_r+0x54>
 800f3dc:	ebba 0b04 	subs.w	fp, sl, r4
 800f3e0:	d00b      	beq.n	800f3fa <_svfiprintf_r+0x7e>
 800f3e2:	465b      	mov	r3, fp
 800f3e4:	4622      	mov	r2, r4
 800f3e6:	4629      	mov	r1, r5
 800f3e8:	4638      	mov	r0, r7
 800f3ea:	f7ff ff6c 	bl	800f2c6 <__ssputs_r>
 800f3ee:	3001      	adds	r0, #1
 800f3f0:	f000 80a7 	beq.w	800f542 <_svfiprintf_r+0x1c6>
 800f3f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f3f6:	445a      	add	r2, fp
 800f3f8:	9209      	str	r2, [sp, #36]	@ 0x24
 800f3fa:	f89a 3000 	ldrb.w	r3, [sl]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	f000 809f 	beq.w	800f542 <_svfiprintf_r+0x1c6>
 800f404:	2300      	movs	r3, #0
 800f406:	f04f 32ff 	mov.w	r2, #4294967295
 800f40a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f40e:	f10a 0a01 	add.w	sl, sl, #1
 800f412:	9304      	str	r3, [sp, #16]
 800f414:	9307      	str	r3, [sp, #28]
 800f416:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f41a:	931a      	str	r3, [sp, #104]	@ 0x68
 800f41c:	4654      	mov	r4, sl
 800f41e:	2205      	movs	r2, #5
 800f420:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f424:	484e      	ldr	r0, [pc, #312]	@ (800f560 <_svfiprintf_r+0x1e4>)
 800f426:	f7f0 fefb 	bl	8000220 <memchr>
 800f42a:	9a04      	ldr	r2, [sp, #16]
 800f42c:	b9d8      	cbnz	r0, 800f466 <_svfiprintf_r+0xea>
 800f42e:	06d0      	lsls	r0, r2, #27
 800f430:	bf44      	itt	mi
 800f432:	2320      	movmi	r3, #32
 800f434:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f438:	0711      	lsls	r1, r2, #28
 800f43a:	bf44      	itt	mi
 800f43c:	232b      	movmi	r3, #43	@ 0x2b
 800f43e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f442:	f89a 3000 	ldrb.w	r3, [sl]
 800f446:	2b2a      	cmp	r3, #42	@ 0x2a
 800f448:	d015      	beq.n	800f476 <_svfiprintf_r+0xfa>
 800f44a:	9a07      	ldr	r2, [sp, #28]
 800f44c:	4654      	mov	r4, sl
 800f44e:	2000      	movs	r0, #0
 800f450:	f04f 0c0a 	mov.w	ip, #10
 800f454:	4621      	mov	r1, r4
 800f456:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f45a:	3b30      	subs	r3, #48	@ 0x30
 800f45c:	2b09      	cmp	r3, #9
 800f45e:	d94b      	bls.n	800f4f8 <_svfiprintf_r+0x17c>
 800f460:	b1b0      	cbz	r0, 800f490 <_svfiprintf_r+0x114>
 800f462:	9207      	str	r2, [sp, #28]
 800f464:	e014      	b.n	800f490 <_svfiprintf_r+0x114>
 800f466:	eba0 0308 	sub.w	r3, r0, r8
 800f46a:	fa09 f303 	lsl.w	r3, r9, r3
 800f46e:	4313      	orrs	r3, r2
 800f470:	9304      	str	r3, [sp, #16]
 800f472:	46a2      	mov	sl, r4
 800f474:	e7d2      	b.n	800f41c <_svfiprintf_r+0xa0>
 800f476:	9b03      	ldr	r3, [sp, #12]
 800f478:	1d19      	adds	r1, r3, #4
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	9103      	str	r1, [sp, #12]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	bfbb      	ittet	lt
 800f482:	425b      	neglt	r3, r3
 800f484:	f042 0202 	orrlt.w	r2, r2, #2
 800f488:	9307      	strge	r3, [sp, #28]
 800f48a:	9307      	strlt	r3, [sp, #28]
 800f48c:	bfb8      	it	lt
 800f48e:	9204      	strlt	r2, [sp, #16]
 800f490:	7823      	ldrb	r3, [r4, #0]
 800f492:	2b2e      	cmp	r3, #46	@ 0x2e
 800f494:	d10a      	bne.n	800f4ac <_svfiprintf_r+0x130>
 800f496:	7863      	ldrb	r3, [r4, #1]
 800f498:	2b2a      	cmp	r3, #42	@ 0x2a
 800f49a:	d132      	bne.n	800f502 <_svfiprintf_r+0x186>
 800f49c:	9b03      	ldr	r3, [sp, #12]
 800f49e:	1d1a      	adds	r2, r3, #4
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	9203      	str	r2, [sp, #12]
 800f4a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f4a8:	3402      	adds	r4, #2
 800f4aa:	9305      	str	r3, [sp, #20]
 800f4ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f570 <_svfiprintf_r+0x1f4>
 800f4b0:	7821      	ldrb	r1, [r4, #0]
 800f4b2:	2203      	movs	r2, #3
 800f4b4:	4650      	mov	r0, sl
 800f4b6:	f7f0 feb3 	bl	8000220 <memchr>
 800f4ba:	b138      	cbz	r0, 800f4cc <_svfiprintf_r+0x150>
 800f4bc:	9b04      	ldr	r3, [sp, #16]
 800f4be:	eba0 000a 	sub.w	r0, r0, sl
 800f4c2:	2240      	movs	r2, #64	@ 0x40
 800f4c4:	4082      	lsls	r2, r0
 800f4c6:	4313      	orrs	r3, r2
 800f4c8:	3401      	adds	r4, #1
 800f4ca:	9304      	str	r3, [sp, #16]
 800f4cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4d0:	4824      	ldr	r0, [pc, #144]	@ (800f564 <_svfiprintf_r+0x1e8>)
 800f4d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f4d6:	2206      	movs	r2, #6
 800f4d8:	f7f0 fea2 	bl	8000220 <memchr>
 800f4dc:	2800      	cmp	r0, #0
 800f4de:	d036      	beq.n	800f54e <_svfiprintf_r+0x1d2>
 800f4e0:	4b21      	ldr	r3, [pc, #132]	@ (800f568 <_svfiprintf_r+0x1ec>)
 800f4e2:	bb1b      	cbnz	r3, 800f52c <_svfiprintf_r+0x1b0>
 800f4e4:	9b03      	ldr	r3, [sp, #12]
 800f4e6:	3307      	adds	r3, #7
 800f4e8:	f023 0307 	bic.w	r3, r3, #7
 800f4ec:	3308      	adds	r3, #8
 800f4ee:	9303      	str	r3, [sp, #12]
 800f4f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4f2:	4433      	add	r3, r6
 800f4f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4f6:	e76a      	b.n	800f3ce <_svfiprintf_r+0x52>
 800f4f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f4fc:	460c      	mov	r4, r1
 800f4fe:	2001      	movs	r0, #1
 800f500:	e7a8      	b.n	800f454 <_svfiprintf_r+0xd8>
 800f502:	2300      	movs	r3, #0
 800f504:	3401      	adds	r4, #1
 800f506:	9305      	str	r3, [sp, #20]
 800f508:	4619      	mov	r1, r3
 800f50a:	f04f 0c0a 	mov.w	ip, #10
 800f50e:	4620      	mov	r0, r4
 800f510:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f514:	3a30      	subs	r2, #48	@ 0x30
 800f516:	2a09      	cmp	r2, #9
 800f518:	d903      	bls.n	800f522 <_svfiprintf_r+0x1a6>
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d0c6      	beq.n	800f4ac <_svfiprintf_r+0x130>
 800f51e:	9105      	str	r1, [sp, #20]
 800f520:	e7c4      	b.n	800f4ac <_svfiprintf_r+0x130>
 800f522:	fb0c 2101 	mla	r1, ip, r1, r2
 800f526:	4604      	mov	r4, r0
 800f528:	2301      	movs	r3, #1
 800f52a:	e7f0      	b.n	800f50e <_svfiprintf_r+0x192>
 800f52c:	ab03      	add	r3, sp, #12
 800f52e:	9300      	str	r3, [sp, #0]
 800f530:	462a      	mov	r2, r5
 800f532:	4b0e      	ldr	r3, [pc, #56]	@ (800f56c <_svfiprintf_r+0x1f0>)
 800f534:	a904      	add	r1, sp, #16
 800f536:	4638      	mov	r0, r7
 800f538:	f7fc ff30 	bl	800c39c <_printf_float>
 800f53c:	1c42      	adds	r2, r0, #1
 800f53e:	4606      	mov	r6, r0
 800f540:	d1d6      	bne.n	800f4f0 <_svfiprintf_r+0x174>
 800f542:	89ab      	ldrh	r3, [r5, #12]
 800f544:	065b      	lsls	r3, r3, #25
 800f546:	f53f af2d 	bmi.w	800f3a4 <_svfiprintf_r+0x28>
 800f54a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f54c:	e72c      	b.n	800f3a8 <_svfiprintf_r+0x2c>
 800f54e:	ab03      	add	r3, sp, #12
 800f550:	9300      	str	r3, [sp, #0]
 800f552:	462a      	mov	r2, r5
 800f554:	4b05      	ldr	r3, [pc, #20]	@ (800f56c <_svfiprintf_r+0x1f0>)
 800f556:	a904      	add	r1, sp, #16
 800f558:	4638      	mov	r0, r7
 800f55a:	f7fd f9b7 	bl	800c8cc <_printf_i>
 800f55e:	e7ed      	b.n	800f53c <_svfiprintf_r+0x1c0>
 800f560:	080101e1 	.word	0x080101e1
 800f564:	080101eb 	.word	0x080101eb
 800f568:	0800c39d 	.word	0x0800c39d
 800f56c:	0800f2c7 	.word	0x0800f2c7
 800f570:	080101e7 	.word	0x080101e7

0800f574 <__sflush_r>:
 800f574:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f57c:	0716      	lsls	r6, r2, #28
 800f57e:	4605      	mov	r5, r0
 800f580:	460c      	mov	r4, r1
 800f582:	d454      	bmi.n	800f62e <__sflush_r+0xba>
 800f584:	684b      	ldr	r3, [r1, #4]
 800f586:	2b00      	cmp	r3, #0
 800f588:	dc02      	bgt.n	800f590 <__sflush_r+0x1c>
 800f58a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	dd48      	ble.n	800f622 <__sflush_r+0xae>
 800f590:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f592:	2e00      	cmp	r6, #0
 800f594:	d045      	beq.n	800f622 <__sflush_r+0xae>
 800f596:	2300      	movs	r3, #0
 800f598:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f59c:	682f      	ldr	r7, [r5, #0]
 800f59e:	6a21      	ldr	r1, [r4, #32]
 800f5a0:	602b      	str	r3, [r5, #0]
 800f5a2:	d030      	beq.n	800f606 <__sflush_r+0x92>
 800f5a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f5a6:	89a3      	ldrh	r3, [r4, #12]
 800f5a8:	0759      	lsls	r1, r3, #29
 800f5aa:	d505      	bpl.n	800f5b8 <__sflush_r+0x44>
 800f5ac:	6863      	ldr	r3, [r4, #4]
 800f5ae:	1ad2      	subs	r2, r2, r3
 800f5b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f5b2:	b10b      	cbz	r3, 800f5b8 <__sflush_r+0x44>
 800f5b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f5b6:	1ad2      	subs	r2, r2, r3
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f5bc:	6a21      	ldr	r1, [r4, #32]
 800f5be:	4628      	mov	r0, r5
 800f5c0:	47b0      	blx	r6
 800f5c2:	1c43      	adds	r3, r0, #1
 800f5c4:	89a3      	ldrh	r3, [r4, #12]
 800f5c6:	d106      	bne.n	800f5d6 <__sflush_r+0x62>
 800f5c8:	6829      	ldr	r1, [r5, #0]
 800f5ca:	291d      	cmp	r1, #29
 800f5cc:	d82b      	bhi.n	800f626 <__sflush_r+0xb2>
 800f5ce:	4a2a      	ldr	r2, [pc, #168]	@ (800f678 <__sflush_r+0x104>)
 800f5d0:	410a      	asrs	r2, r1
 800f5d2:	07d6      	lsls	r6, r2, #31
 800f5d4:	d427      	bmi.n	800f626 <__sflush_r+0xb2>
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	6062      	str	r2, [r4, #4]
 800f5da:	04d9      	lsls	r1, r3, #19
 800f5dc:	6922      	ldr	r2, [r4, #16]
 800f5de:	6022      	str	r2, [r4, #0]
 800f5e0:	d504      	bpl.n	800f5ec <__sflush_r+0x78>
 800f5e2:	1c42      	adds	r2, r0, #1
 800f5e4:	d101      	bne.n	800f5ea <__sflush_r+0x76>
 800f5e6:	682b      	ldr	r3, [r5, #0]
 800f5e8:	b903      	cbnz	r3, 800f5ec <__sflush_r+0x78>
 800f5ea:	6560      	str	r0, [r4, #84]	@ 0x54
 800f5ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f5ee:	602f      	str	r7, [r5, #0]
 800f5f0:	b1b9      	cbz	r1, 800f622 <__sflush_r+0xae>
 800f5f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f5f6:	4299      	cmp	r1, r3
 800f5f8:	d002      	beq.n	800f600 <__sflush_r+0x8c>
 800f5fa:	4628      	mov	r0, r5
 800f5fc:	f7fe fcdc 	bl	800dfb8 <_free_r>
 800f600:	2300      	movs	r3, #0
 800f602:	6363      	str	r3, [r4, #52]	@ 0x34
 800f604:	e00d      	b.n	800f622 <__sflush_r+0xae>
 800f606:	2301      	movs	r3, #1
 800f608:	4628      	mov	r0, r5
 800f60a:	47b0      	blx	r6
 800f60c:	4602      	mov	r2, r0
 800f60e:	1c50      	adds	r0, r2, #1
 800f610:	d1c9      	bne.n	800f5a6 <__sflush_r+0x32>
 800f612:	682b      	ldr	r3, [r5, #0]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d0c6      	beq.n	800f5a6 <__sflush_r+0x32>
 800f618:	2b1d      	cmp	r3, #29
 800f61a:	d001      	beq.n	800f620 <__sflush_r+0xac>
 800f61c:	2b16      	cmp	r3, #22
 800f61e:	d11e      	bne.n	800f65e <__sflush_r+0xea>
 800f620:	602f      	str	r7, [r5, #0]
 800f622:	2000      	movs	r0, #0
 800f624:	e022      	b.n	800f66c <__sflush_r+0xf8>
 800f626:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f62a:	b21b      	sxth	r3, r3
 800f62c:	e01b      	b.n	800f666 <__sflush_r+0xf2>
 800f62e:	690f      	ldr	r7, [r1, #16]
 800f630:	2f00      	cmp	r7, #0
 800f632:	d0f6      	beq.n	800f622 <__sflush_r+0xae>
 800f634:	0793      	lsls	r3, r2, #30
 800f636:	680e      	ldr	r6, [r1, #0]
 800f638:	bf08      	it	eq
 800f63a:	694b      	ldreq	r3, [r1, #20]
 800f63c:	600f      	str	r7, [r1, #0]
 800f63e:	bf18      	it	ne
 800f640:	2300      	movne	r3, #0
 800f642:	eba6 0807 	sub.w	r8, r6, r7
 800f646:	608b      	str	r3, [r1, #8]
 800f648:	f1b8 0f00 	cmp.w	r8, #0
 800f64c:	dde9      	ble.n	800f622 <__sflush_r+0xae>
 800f64e:	6a21      	ldr	r1, [r4, #32]
 800f650:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f652:	4643      	mov	r3, r8
 800f654:	463a      	mov	r2, r7
 800f656:	4628      	mov	r0, r5
 800f658:	47b0      	blx	r6
 800f65a:	2800      	cmp	r0, #0
 800f65c:	dc08      	bgt.n	800f670 <__sflush_r+0xfc>
 800f65e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f662:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f666:	81a3      	strh	r3, [r4, #12]
 800f668:	f04f 30ff 	mov.w	r0, #4294967295
 800f66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f670:	4407      	add	r7, r0
 800f672:	eba8 0800 	sub.w	r8, r8, r0
 800f676:	e7e7      	b.n	800f648 <__sflush_r+0xd4>
 800f678:	dfbffffe 	.word	0xdfbffffe

0800f67c <_fflush_r>:
 800f67c:	b538      	push	{r3, r4, r5, lr}
 800f67e:	690b      	ldr	r3, [r1, #16]
 800f680:	4605      	mov	r5, r0
 800f682:	460c      	mov	r4, r1
 800f684:	b913      	cbnz	r3, 800f68c <_fflush_r+0x10>
 800f686:	2500      	movs	r5, #0
 800f688:	4628      	mov	r0, r5
 800f68a:	bd38      	pop	{r3, r4, r5, pc}
 800f68c:	b118      	cbz	r0, 800f696 <_fflush_r+0x1a>
 800f68e:	6a03      	ldr	r3, [r0, #32]
 800f690:	b90b      	cbnz	r3, 800f696 <_fflush_r+0x1a>
 800f692:	f7fd fcdb 	bl	800d04c <__sinit>
 800f696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d0f3      	beq.n	800f686 <_fflush_r+0xa>
 800f69e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f6a0:	07d0      	lsls	r0, r2, #31
 800f6a2:	d404      	bmi.n	800f6ae <_fflush_r+0x32>
 800f6a4:	0599      	lsls	r1, r3, #22
 800f6a6:	d402      	bmi.n	800f6ae <_fflush_r+0x32>
 800f6a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f6aa:	f7fd fe18 	bl	800d2de <__retarget_lock_acquire_recursive>
 800f6ae:	4628      	mov	r0, r5
 800f6b0:	4621      	mov	r1, r4
 800f6b2:	f7ff ff5f 	bl	800f574 <__sflush_r>
 800f6b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f6b8:	07da      	lsls	r2, r3, #31
 800f6ba:	4605      	mov	r5, r0
 800f6bc:	d4e4      	bmi.n	800f688 <_fflush_r+0xc>
 800f6be:	89a3      	ldrh	r3, [r4, #12]
 800f6c0:	059b      	lsls	r3, r3, #22
 800f6c2:	d4e1      	bmi.n	800f688 <_fflush_r+0xc>
 800f6c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f6c6:	f7fd fe0b 	bl	800d2e0 <__retarget_lock_release_recursive>
 800f6ca:	e7dd      	b.n	800f688 <_fflush_r+0xc>

0800f6cc <memmove>:
 800f6cc:	4288      	cmp	r0, r1
 800f6ce:	b510      	push	{r4, lr}
 800f6d0:	eb01 0402 	add.w	r4, r1, r2
 800f6d4:	d902      	bls.n	800f6dc <memmove+0x10>
 800f6d6:	4284      	cmp	r4, r0
 800f6d8:	4623      	mov	r3, r4
 800f6da:	d807      	bhi.n	800f6ec <memmove+0x20>
 800f6dc:	1e43      	subs	r3, r0, #1
 800f6de:	42a1      	cmp	r1, r4
 800f6e0:	d008      	beq.n	800f6f4 <memmove+0x28>
 800f6e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f6e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f6ea:	e7f8      	b.n	800f6de <memmove+0x12>
 800f6ec:	4402      	add	r2, r0
 800f6ee:	4601      	mov	r1, r0
 800f6f0:	428a      	cmp	r2, r1
 800f6f2:	d100      	bne.n	800f6f6 <memmove+0x2a>
 800f6f4:	bd10      	pop	{r4, pc}
 800f6f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f6fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f6fe:	e7f7      	b.n	800f6f0 <memmove+0x24>

0800f700 <_sbrk_r>:
 800f700:	b538      	push	{r3, r4, r5, lr}
 800f702:	4d06      	ldr	r5, [pc, #24]	@ (800f71c <_sbrk_r+0x1c>)
 800f704:	2300      	movs	r3, #0
 800f706:	4604      	mov	r4, r0
 800f708:	4608      	mov	r0, r1
 800f70a:	602b      	str	r3, [r5, #0]
 800f70c:	f7f2 fab4 	bl	8001c78 <_sbrk>
 800f710:	1c43      	adds	r3, r0, #1
 800f712:	d102      	bne.n	800f71a <_sbrk_r+0x1a>
 800f714:	682b      	ldr	r3, [r5, #0]
 800f716:	b103      	cbz	r3, 800f71a <_sbrk_r+0x1a>
 800f718:	6023      	str	r3, [r4, #0]
 800f71a:	bd38      	pop	{r3, r4, r5, pc}
 800f71c:	20000ae0 	.word	0x20000ae0

0800f720 <__assert_func>:
 800f720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f722:	4614      	mov	r4, r2
 800f724:	461a      	mov	r2, r3
 800f726:	4b09      	ldr	r3, [pc, #36]	@ (800f74c <__assert_func+0x2c>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	4605      	mov	r5, r0
 800f72c:	68d8      	ldr	r0, [r3, #12]
 800f72e:	b954      	cbnz	r4, 800f746 <__assert_func+0x26>
 800f730:	4b07      	ldr	r3, [pc, #28]	@ (800f750 <__assert_func+0x30>)
 800f732:	461c      	mov	r4, r3
 800f734:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f738:	9100      	str	r1, [sp, #0]
 800f73a:	462b      	mov	r3, r5
 800f73c:	4905      	ldr	r1, [pc, #20]	@ (800f754 <__assert_func+0x34>)
 800f73e:	f000 f84f 	bl	800f7e0 <fiprintf>
 800f742:	f000 f85f 	bl	800f804 <abort>
 800f746:	4b04      	ldr	r3, [pc, #16]	@ (800f758 <__assert_func+0x38>)
 800f748:	e7f4      	b.n	800f734 <__assert_func+0x14>
 800f74a:	bf00      	nop
 800f74c:	20000208 	.word	0x20000208
 800f750:	0801022d 	.word	0x0801022d
 800f754:	080101ff 	.word	0x080101ff
 800f758:	080101f2 	.word	0x080101f2

0800f75c <_calloc_r>:
 800f75c:	b570      	push	{r4, r5, r6, lr}
 800f75e:	fba1 5402 	umull	r5, r4, r1, r2
 800f762:	b93c      	cbnz	r4, 800f774 <_calloc_r+0x18>
 800f764:	4629      	mov	r1, r5
 800f766:	f7fe ffd5 	bl	800e714 <_malloc_r>
 800f76a:	4606      	mov	r6, r0
 800f76c:	b928      	cbnz	r0, 800f77a <_calloc_r+0x1e>
 800f76e:	2600      	movs	r6, #0
 800f770:	4630      	mov	r0, r6
 800f772:	bd70      	pop	{r4, r5, r6, pc}
 800f774:	220c      	movs	r2, #12
 800f776:	6002      	str	r2, [r0, #0]
 800f778:	e7f9      	b.n	800f76e <_calloc_r+0x12>
 800f77a:	462a      	mov	r2, r5
 800f77c:	4621      	mov	r1, r4
 800f77e:	f7fd fd1f 	bl	800d1c0 <memset>
 800f782:	e7f5      	b.n	800f770 <_calloc_r+0x14>

0800f784 <_realloc_r>:
 800f784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f788:	4680      	mov	r8, r0
 800f78a:	4615      	mov	r5, r2
 800f78c:	460c      	mov	r4, r1
 800f78e:	b921      	cbnz	r1, 800f79a <_realloc_r+0x16>
 800f790:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f794:	4611      	mov	r1, r2
 800f796:	f7fe bfbd 	b.w	800e714 <_malloc_r>
 800f79a:	b92a      	cbnz	r2, 800f7a8 <_realloc_r+0x24>
 800f79c:	f7fe fc0c 	bl	800dfb8 <_free_r>
 800f7a0:	2400      	movs	r4, #0
 800f7a2:	4620      	mov	r0, r4
 800f7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7a8:	f000 f833 	bl	800f812 <_malloc_usable_size_r>
 800f7ac:	4285      	cmp	r5, r0
 800f7ae:	4606      	mov	r6, r0
 800f7b0:	d802      	bhi.n	800f7b8 <_realloc_r+0x34>
 800f7b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f7b6:	d8f4      	bhi.n	800f7a2 <_realloc_r+0x1e>
 800f7b8:	4629      	mov	r1, r5
 800f7ba:	4640      	mov	r0, r8
 800f7bc:	f7fe ffaa 	bl	800e714 <_malloc_r>
 800f7c0:	4607      	mov	r7, r0
 800f7c2:	2800      	cmp	r0, #0
 800f7c4:	d0ec      	beq.n	800f7a0 <_realloc_r+0x1c>
 800f7c6:	42b5      	cmp	r5, r6
 800f7c8:	462a      	mov	r2, r5
 800f7ca:	4621      	mov	r1, r4
 800f7cc:	bf28      	it	cs
 800f7ce:	4632      	movcs	r2, r6
 800f7d0:	f7fd fd87 	bl	800d2e2 <memcpy>
 800f7d4:	4621      	mov	r1, r4
 800f7d6:	4640      	mov	r0, r8
 800f7d8:	f7fe fbee 	bl	800dfb8 <_free_r>
 800f7dc:	463c      	mov	r4, r7
 800f7de:	e7e0      	b.n	800f7a2 <_realloc_r+0x1e>

0800f7e0 <fiprintf>:
 800f7e0:	b40e      	push	{r1, r2, r3}
 800f7e2:	b503      	push	{r0, r1, lr}
 800f7e4:	4601      	mov	r1, r0
 800f7e6:	ab03      	add	r3, sp, #12
 800f7e8:	4805      	ldr	r0, [pc, #20]	@ (800f800 <fiprintf+0x20>)
 800f7ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7ee:	6800      	ldr	r0, [r0, #0]
 800f7f0:	9301      	str	r3, [sp, #4]
 800f7f2:	f000 f83f 	bl	800f874 <_vfiprintf_r>
 800f7f6:	b002      	add	sp, #8
 800f7f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f7fc:	b003      	add	sp, #12
 800f7fe:	4770      	bx	lr
 800f800:	20000208 	.word	0x20000208

0800f804 <abort>:
 800f804:	b508      	push	{r3, lr}
 800f806:	2006      	movs	r0, #6
 800f808:	f000 fa08 	bl	800fc1c <raise>
 800f80c:	2001      	movs	r0, #1
 800f80e:	f7f2 f9bb 	bl	8001b88 <_exit>

0800f812 <_malloc_usable_size_r>:
 800f812:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f816:	1f18      	subs	r0, r3, #4
 800f818:	2b00      	cmp	r3, #0
 800f81a:	bfbc      	itt	lt
 800f81c:	580b      	ldrlt	r3, [r1, r0]
 800f81e:	18c0      	addlt	r0, r0, r3
 800f820:	4770      	bx	lr

0800f822 <__sfputc_r>:
 800f822:	6893      	ldr	r3, [r2, #8]
 800f824:	3b01      	subs	r3, #1
 800f826:	2b00      	cmp	r3, #0
 800f828:	b410      	push	{r4}
 800f82a:	6093      	str	r3, [r2, #8]
 800f82c:	da08      	bge.n	800f840 <__sfputc_r+0x1e>
 800f82e:	6994      	ldr	r4, [r2, #24]
 800f830:	42a3      	cmp	r3, r4
 800f832:	db01      	blt.n	800f838 <__sfputc_r+0x16>
 800f834:	290a      	cmp	r1, #10
 800f836:	d103      	bne.n	800f840 <__sfputc_r+0x1e>
 800f838:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f83c:	f000 b932 	b.w	800faa4 <__swbuf_r>
 800f840:	6813      	ldr	r3, [r2, #0]
 800f842:	1c58      	adds	r0, r3, #1
 800f844:	6010      	str	r0, [r2, #0]
 800f846:	7019      	strb	r1, [r3, #0]
 800f848:	4608      	mov	r0, r1
 800f84a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f84e:	4770      	bx	lr

0800f850 <__sfputs_r>:
 800f850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f852:	4606      	mov	r6, r0
 800f854:	460f      	mov	r7, r1
 800f856:	4614      	mov	r4, r2
 800f858:	18d5      	adds	r5, r2, r3
 800f85a:	42ac      	cmp	r4, r5
 800f85c:	d101      	bne.n	800f862 <__sfputs_r+0x12>
 800f85e:	2000      	movs	r0, #0
 800f860:	e007      	b.n	800f872 <__sfputs_r+0x22>
 800f862:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f866:	463a      	mov	r2, r7
 800f868:	4630      	mov	r0, r6
 800f86a:	f7ff ffda 	bl	800f822 <__sfputc_r>
 800f86e:	1c43      	adds	r3, r0, #1
 800f870:	d1f3      	bne.n	800f85a <__sfputs_r+0xa>
 800f872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f874 <_vfiprintf_r>:
 800f874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f878:	460d      	mov	r5, r1
 800f87a:	b09d      	sub	sp, #116	@ 0x74
 800f87c:	4614      	mov	r4, r2
 800f87e:	4698      	mov	r8, r3
 800f880:	4606      	mov	r6, r0
 800f882:	b118      	cbz	r0, 800f88c <_vfiprintf_r+0x18>
 800f884:	6a03      	ldr	r3, [r0, #32]
 800f886:	b90b      	cbnz	r3, 800f88c <_vfiprintf_r+0x18>
 800f888:	f7fd fbe0 	bl	800d04c <__sinit>
 800f88c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f88e:	07d9      	lsls	r1, r3, #31
 800f890:	d405      	bmi.n	800f89e <_vfiprintf_r+0x2a>
 800f892:	89ab      	ldrh	r3, [r5, #12]
 800f894:	059a      	lsls	r2, r3, #22
 800f896:	d402      	bmi.n	800f89e <_vfiprintf_r+0x2a>
 800f898:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f89a:	f7fd fd20 	bl	800d2de <__retarget_lock_acquire_recursive>
 800f89e:	89ab      	ldrh	r3, [r5, #12]
 800f8a0:	071b      	lsls	r3, r3, #28
 800f8a2:	d501      	bpl.n	800f8a8 <_vfiprintf_r+0x34>
 800f8a4:	692b      	ldr	r3, [r5, #16]
 800f8a6:	b99b      	cbnz	r3, 800f8d0 <_vfiprintf_r+0x5c>
 800f8a8:	4629      	mov	r1, r5
 800f8aa:	4630      	mov	r0, r6
 800f8ac:	f000 f938 	bl	800fb20 <__swsetup_r>
 800f8b0:	b170      	cbz	r0, 800f8d0 <_vfiprintf_r+0x5c>
 800f8b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f8b4:	07dc      	lsls	r4, r3, #31
 800f8b6:	d504      	bpl.n	800f8c2 <_vfiprintf_r+0x4e>
 800f8b8:	f04f 30ff 	mov.w	r0, #4294967295
 800f8bc:	b01d      	add	sp, #116	@ 0x74
 800f8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8c2:	89ab      	ldrh	r3, [r5, #12]
 800f8c4:	0598      	lsls	r0, r3, #22
 800f8c6:	d4f7      	bmi.n	800f8b8 <_vfiprintf_r+0x44>
 800f8c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f8ca:	f7fd fd09 	bl	800d2e0 <__retarget_lock_release_recursive>
 800f8ce:	e7f3      	b.n	800f8b8 <_vfiprintf_r+0x44>
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8d4:	2320      	movs	r3, #32
 800f8d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f8da:	f8cd 800c 	str.w	r8, [sp, #12]
 800f8de:	2330      	movs	r3, #48	@ 0x30
 800f8e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fa90 <_vfiprintf_r+0x21c>
 800f8e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f8e8:	f04f 0901 	mov.w	r9, #1
 800f8ec:	4623      	mov	r3, r4
 800f8ee:	469a      	mov	sl, r3
 800f8f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8f4:	b10a      	cbz	r2, 800f8fa <_vfiprintf_r+0x86>
 800f8f6:	2a25      	cmp	r2, #37	@ 0x25
 800f8f8:	d1f9      	bne.n	800f8ee <_vfiprintf_r+0x7a>
 800f8fa:	ebba 0b04 	subs.w	fp, sl, r4
 800f8fe:	d00b      	beq.n	800f918 <_vfiprintf_r+0xa4>
 800f900:	465b      	mov	r3, fp
 800f902:	4622      	mov	r2, r4
 800f904:	4629      	mov	r1, r5
 800f906:	4630      	mov	r0, r6
 800f908:	f7ff ffa2 	bl	800f850 <__sfputs_r>
 800f90c:	3001      	adds	r0, #1
 800f90e:	f000 80a7 	beq.w	800fa60 <_vfiprintf_r+0x1ec>
 800f912:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f914:	445a      	add	r2, fp
 800f916:	9209      	str	r2, [sp, #36]	@ 0x24
 800f918:	f89a 3000 	ldrb.w	r3, [sl]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	f000 809f 	beq.w	800fa60 <_vfiprintf_r+0x1ec>
 800f922:	2300      	movs	r3, #0
 800f924:	f04f 32ff 	mov.w	r2, #4294967295
 800f928:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f92c:	f10a 0a01 	add.w	sl, sl, #1
 800f930:	9304      	str	r3, [sp, #16]
 800f932:	9307      	str	r3, [sp, #28]
 800f934:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f938:	931a      	str	r3, [sp, #104]	@ 0x68
 800f93a:	4654      	mov	r4, sl
 800f93c:	2205      	movs	r2, #5
 800f93e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f942:	4853      	ldr	r0, [pc, #332]	@ (800fa90 <_vfiprintf_r+0x21c>)
 800f944:	f7f0 fc6c 	bl	8000220 <memchr>
 800f948:	9a04      	ldr	r2, [sp, #16]
 800f94a:	b9d8      	cbnz	r0, 800f984 <_vfiprintf_r+0x110>
 800f94c:	06d1      	lsls	r1, r2, #27
 800f94e:	bf44      	itt	mi
 800f950:	2320      	movmi	r3, #32
 800f952:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f956:	0713      	lsls	r3, r2, #28
 800f958:	bf44      	itt	mi
 800f95a:	232b      	movmi	r3, #43	@ 0x2b
 800f95c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f960:	f89a 3000 	ldrb.w	r3, [sl]
 800f964:	2b2a      	cmp	r3, #42	@ 0x2a
 800f966:	d015      	beq.n	800f994 <_vfiprintf_r+0x120>
 800f968:	9a07      	ldr	r2, [sp, #28]
 800f96a:	4654      	mov	r4, sl
 800f96c:	2000      	movs	r0, #0
 800f96e:	f04f 0c0a 	mov.w	ip, #10
 800f972:	4621      	mov	r1, r4
 800f974:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f978:	3b30      	subs	r3, #48	@ 0x30
 800f97a:	2b09      	cmp	r3, #9
 800f97c:	d94b      	bls.n	800fa16 <_vfiprintf_r+0x1a2>
 800f97e:	b1b0      	cbz	r0, 800f9ae <_vfiprintf_r+0x13a>
 800f980:	9207      	str	r2, [sp, #28]
 800f982:	e014      	b.n	800f9ae <_vfiprintf_r+0x13a>
 800f984:	eba0 0308 	sub.w	r3, r0, r8
 800f988:	fa09 f303 	lsl.w	r3, r9, r3
 800f98c:	4313      	orrs	r3, r2
 800f98e:	9304      	str	r3, [sp, #16]
 800f990:	46a2      	mov	sl, r4
 800f992:	e7d2      	b.n	800f93a <_vfiprintf_r+0xc6>
 800f994:	9b03      	ldr	r3, [sp, #12]
 800f996:	1d19      	adds	r1, r3, #4
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	9103      	str	r1, [sp, #12]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	bfbb      	ittet	lt
 800f9a0:	425b      	neglt	r3, r3
 800f9a2:	f042 0202 	orrlt.w	r2, r2, #2
 800f9a6:	9307      	strge	r3, [sp, #28]
 800f9a8:	9307      	strlt	r3, [sp, #28]
 800f9aa:	bfb8      	it	lt
 800f9ac:	9204      	strlt	r2, [sp, #16]
 800f9ae:	7823      	ldrb	r3, [r4, #0]
 800f9b0:	2b2e      	cmp	r3, #46	@ 0x2e
 800f9b2:	d10a      	bne.n	800f9ca <_vfiprintf_r+0x156>
 800f9b4:	7863      	ldrb	r3, [r4, #1]
 800f9b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f9b8:	d132      	bne.n	800fa20 <_vfiprintf_r+0x1ac>
 800f9ba:	9b03      	ldr	r3, [sp, #12]
 800f9bc:	1d1a      	adds	r2, r3, #4
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	9203      	str	r2, [sp, #12]
 800f9c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f9c6:	3402      	adds	r4, #2
 800f9c8:	9305      	str	r3, [sp, #20]
 800f9ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800faa0 <_vfiprintf_r+0x22c>
 800f9ce:	7821      	ldrb	r1, [r4, #0]
 800f9d0:	2203      	movs	r2, #3
 800f9d2:	4650      	mov	r0, sl
 800f9d4:	f7f0 fc24 	bl	8000220 <memchr>
 800f9d8:	b138      	cbz	r0, 800f9ea <_vfiprintf_r+0x176>
 800f9da:	9b04      	ldr	r3, [sp, #16]
 800f9dc:	eba0 000a 	sub.w	r0, r0, sl
 800f9e0:	2240      	movs	r2, #64	@ 0x40
 800f9e2:	4082      	lsls	r2, r0
 800f9e4:	4313      	orrs	r3, r2
 800f9e6:	3401      	adds	r4, #1
 800f9e8:	9304      	str	r3, [sp, #16]
 800f9ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9ee:	4829      	ldr	r0, [pc, #164]	@ (800fa94 <_vfiprintf_r+0x220>)
 800f9f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f9f4:	2206      	movs	r2, #6
 800f9f6:	f7f0 fc13 	bl	8000220 <memchr>
 800f9fa:	2800      	cmp	r0, #0
 800f9fc:	d03f      	beq.n	800fa7e <_vfiprintf_r+0x20a>
 800f9fe:	4b26      	ldr	r3, [pc, #152]	@ (800fa98 <_vfiprintf_r+0x224>)
 800fa00:	bb1b      	cbnz	r3, 800fa4a <_vfiprintf_r+0x1d6>
 800fa02:	9b03      	ldr	r3, [sp, #12]
 800fa04:	3307      	adds	r3, #7
 800fa06:	f023 0307 	bic.w	r3, r3, #7
 800fa0a:	3308      	adds	r3, #8
 800fa0c:	9303      	str	r3, [sp, #12]
 800fa0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa10:	443b      	add	r3, r7
 800fa12:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa14:	e76a      	b.n	800f8ec <_vfiprintf_r+0x78>
 800fa16:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa1a:	460c      	mov	r4, r1
 800fa1c:	2001      	movs	r0, #1
 800fa1e:	e7a8      	b.n	800f972 <_vfiprintf_r+0xfe>
 800fa20:	2300      	movs	r3, #0
 800fa22:	3401      	adds	r4, #1
 800fa24:	9305      	str	r3, [sp, #20]
 800fa26:	4619      	mov	r1, r3
 800fa28:	f04f 0c0a 	mov.w	ip, #10
 800fa2c:	4620      	mov	r0, r4
 800fa2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa32:	3a30      	subs	r2, #48	@ 0x30
 800fa34:	2a09      	cmp	r2, #9
 800fa36:	d903      	bls.n	800fa40 <_vfiprintf_r+0x1cc>
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d0c6      	beq.n	800f9ca <_vfiprintf_r+0x156>
 800fa3c:	9105      	str	r1, [sp, #20]
 800fa3e:	e7c4      	b.n	800f9ca <_vfiprintf_r+0x156>
 800fa40:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa44:	4604      	mov	r4, r0
 800fa46:	2301      	movs	r3, #1
 800fa48:	e7f0      	b.n	800fa2c <_vfiprintf_r+0x1b8>
 800fa4a:	ab03      	add	r3, sp, #12
 800fa4c:	9300      	str	r3, [sp, #0]
 800fa4e:	462a      	mov	r2, r5
 800fa50:	4b12      	ldr	r3, [pc, #72]	@ (800fa9c <_vfiprintf_r+0x228>)
 800fa52:	a904      	add	r1, sp, #16
 800fa54:	4630      	mov	r0, r6
 800fa56:	f7fc fca1 	bl	800c39c <_printf_float>
 800fa5a:	4607      	mov	r7, r0
 800fa5c:	1c78      	adds	r0, r7, #1
 800fa5e:	d1d6      	bne.n	800fa0e <_vfiprintf_r+0x19a>
 800fa60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fa62:	07d9      	lsls	r1, r3, #31
 800fa64:	d405      	bmi.n	800fa72 <_vfiprintf_r+0x1fe>
 800fa66:	89ab      	ldrh	r3, [r5, #12]
 800fa68:	059a      	lsls	r2, r3, #22
 800fa6a:	d402      	bmi.n	800fa72 <_vfiprintf_r+0x1fe>
 800fa6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fa6e:	f7fd fc37 	bl	800d2e0 <__retarget_lock_release_recursive>
 800fa72:	89ab      	ldrh	r3, [r5, #12]
 800fa74:	065b      	lsls	r3, r3, #25
 800fa76:	f53f af1f 	bmi.w	800f8b8 <_vfiprintf_r+0x44>
 800fa7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fa7c:	e71e      	b.n	800f8bc <_vfiprintf_r+0x48>
 800fa7e:	ab03      	add	r3, sp, #12
 800fa80:	9300      	str	r3, [sp, #0]
 800fa82:	462a      	mov	r2, r5
 800fa84:	4b05      	ldr	r3, [pc, #20]	@ (800fa9c <_vfiprintf_r+0x228>)
 800fa86:	a904      	add	r1, sp, #16
 800fa88:	4630      	mov	r0, r6
 800fa8a:	f7fc ff1f 	bl	800c8cc <_printf_i>
 800fa8e:	e7e4      	b.n	800fa5a <_vfiprintf_r+0x1e6>
 800fa90:	080101e1 	.word	0x080101e1
 800fa94:	080101eb 	.word	0x080101eb
 800fa98:	0800c39d 	.word	0x0800c39d
 800fa9c:	0800f851 	.word	0x0800f851
 800faa0:	080101e7 	.word	0x080101e7

0800faa4 <__swbuf_r>:
 800faa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faa6:	460e      	mov	r6, r1
 800faa8:	4614      	mov	r4, r2
 800faaa:	4605      	mov	r5, r0
 800faac:	b118      	cbz	r0, 800fab6 <__swbuf_r+0x12>
 800faae:	6a03      	ldr	r3, [r0, #32]
 800fab0:	b90b      	cbnz	r3, 800fab6 <__swbuf_r+0x12>
 800fab2:	f7fd facb 	bl	800d04c <__sinit>
 800fab6:	69a3      	ldr	r3, [r4, #24]
 800fab8:	60a3      	str	r3, [r4, #8]
 800faba:	89a3      	ldrh	r3, [r4, #12]
 800fabc:	071a      	lsls	r2, r3, #28
 800fabe:	d501      	bpl.n	800fac4 <__swbuf_r+0x20>
 800fac0:	6923      	ldr	r3, [r4, #16]
 800fac2:	b943      	cbnz	r3, 800fad6 <__swbuf_r+0x32>
 800fac4:	4621      	mov	r1, r4
 800fac6:	4628      	mov	r0, r5
 800fac8:	f000 f82a 	bl	800fb20 <__swsetup_r>
 800facc:	b118      	cbz	r0, 800fad6 <__swbuf_r+0x32>
 800face:	f04f 37ff 	mov.w	r7, #4294967295
 800fad2:	4638      	mov	r0, r7
 800fad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fad6:	6823      	ldr	r3, [r4, #0]
 800fad8:	6922      	ldr	r2, [r4, #16]
 800fada:	1a98      	subs	r0, r3, r2
 800fadc:	6963      	ldr	r3, [r4, #20]
 800fade:	b2f6      	uxtb	r6, r6
 800fae0:	4283      	cmp	r3, r0
 800fae2:	4637      	mov	r7, r6
 800fae4:	dc05      	bgt.n	800faf2 <__swbuf_r+0x4e>
 800fae6:	4621      	mov	r1, r4
 800fae8:	4628      	mov	r0, r5
 800faea:	f7ff fdc7 	bl	800f67c <_fflush_r>
 800faee:	2800      	cmp	r0, #0
 800faf0:	d1ed      	bne.n	800face <__swbuf_r+0x2a>
 800faf2:	68a3      	ldr	r3, [r4, #8]
 800faf4:	3b01      	subs	r3, #1
 800faf6:	60a3      	str	r3, [r4, #8]
 800faf8:	6823      	ldr	r3, [r4, #0]
 800fafa:	1c5a      	adds	r2, r3, #1
 800fafc:	6022      	str	r2, [r4, #0]
 800fafe:	701e      	strb	r6, [r3, #0]
 800fb00:	6962      	ldr	r2, [r4, #20]
 800fb02:	1c43      	adds	r3, r0, #1
 800fb04:	429a      	cmp	r2, r3
 800fb06:	d004      	beq.n	800fb12 <__swbuf_r+0x6e>
 800fb08:	89a3      	ldrh	r3, [r4, #12]
 800fb0a:	07db      	lsls	r3, r3, #31
 800fb0c:	d5e1      	bpl.n	800fad2 <__swbuf_r+0x2e>
 800fb0e:	2e0a      	cmp	r6, #10
 800fb10:	d1df      	bne.n	800fad2 <__swbuf_r+0x2e>
 800fb12:	4621      	mov	r1, r4
 800fb14:	4628      	mov	r0, r5
 800fb16:	f7ff fdb1 	bl	800f67c <_fflush_r>
 800fb1a:	2800      	cmp	r0, #0
 800fb1c:	d0d9      	beq.n	800fad2 <__swbuf_r+0x2e>
 800fb1e:	e7d6      	b.n	800face <__swbuf_r+0x2a>

0800fb20 <__swsetup_r>:
 800fb20:	b538      	push	{r3, r4, r5, lr}
 800fb22:	4b29      	ldr	r3, [pc, #164]	@ (800fbc8 <__swsetup_r+0xa8>)
 800fb24:	4605      	mov	r5, r0
 800fb26:	6818      	ldr	r0, [r3, #0]
 800fb28:	460c      	mov	r4, r1
 800fb2a:	b118      	cbz	r0, 800fb34 <__swsetup_r+0x14>
 800fb2c:	6a03      	ldr	r3, [r0, #32]
 800fb2e:	b90b      	cbnz	r3, 800fb34 <__swsetup_r+0x14>
 800fb30:	f7fd fa8c 	bl	800d04c <__sinit>
 800fb34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb38:	0719      	lsls	r1, r3, #28
 800fb3a:	d422      	bmi.n	800fb82 <__swsetup_r+0x62>
 800fb3c:	06da      	lsls	r2, r3, #27
 800fb3e:	d407      	bmi.n	800fb50 <__swsetup_r+0x30>
 800fb40:	2209      	movs	r2, #9
 800fb42:	602a      	str	r2, [r5, #0]
 800fb44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb48:	81a3      	strh	r3, [r4, #12]
 800fb4a:	f04f 30ff 	mov.w	r0, #4294967295
 800fb4e:	e033      	b.n	800fbb8 <__swsetup_r+0x98>
 800fb50:	0758      	lsls	r0, r3, #29
 800fb52:	d512      	bpl.n	800fb7a <__swsetup_r+0x5a>
 800fb54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fb56:	b141      	cbz	r1, 800fb6a <__swsetup_r+0x4a>
 800fb58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fb5c:	4299      	cmp	r1, r3
 800fb5e:	d002      	beq.n	800fb66 <__swsetup_r+0x46>
 800fb60:	4628      	mov	r0, r5
 800fb62:	f7fe fa29 	bl	800dfb8 <_free_r>
 800fb66:	2300      	movs	r3, #0
 800fb68:	6363      	str	r3, [r4, #52]	@ 0x34
 800fb6a:	89a3      	ldrh	r3, [r4, #12]
 800fb6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fb70:	81a3      	strh	r3, [r4, #12]
 800fb72:	2300      	movs	r3, #0
 800fb74:	6063      	str	r3, [r4, #4]
 800fb76:	6923      	ldr	r3, [r4, #16]
 800fb78:	6023      	str	r3, [r4, #0]
 800fb7a:	89a3      	ldrh	r3, [r4, #12]
 800fb7c:	f043 0308 	orr.w	r3, r3, #8
 800fb80:	81a3      	strh	r3, [r4, #12]
 800fb82:	6923      	ldr	r3, [r4, #16]
 800fb84:	b94b      	cbnz	r3, 800fb9a <__swsetup_r+0x7a>
 800fb86:	89a3      	ldrh	r3, [r4, #12]
 800fb88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fb8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fb90:	d003      	beq.n	800fb9a <__swsetup_r+0x7a>
 800fb92:	4621      	mov	r1, r4
 800fb94:	4628      	mov	r0, r5
 800fb96:	f000 f883 	bl	800fca0 <__smakebuf_r>
 800fb9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb9e:	f013 0201 	ands.w	r2, r3, #1
 800fba2:	d00a      	beq.n	800fbba <__swsetup_r+0x9a>
 800fba4:	2200      	movs	r2, #0
 800fba6:	60a2      	str	r2, [r4, #8]
 800fba8:	6962      	ldr	r2, [r4, #20]
 800fbaa:	4252      	negs	r2, r2
 800fbac:	61a2      	str	r2, [r4, #24]
 800fbae:	6922      	ldr	r2, [r4, #16]
 800fbb0:	b942      	cbnz	r2, 800fbc4 <__swsetup_r+0xa4>
 800fbb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fbb6:	d1c5      	bne.n	800fb44 <__swsetup_r+0x24>
 800fbb8:	bd38      	pop	{r3, r4, r5, pc}
 800fbba:	0799      	lsls	r1, r3, #30
 800fbbc:	bf58      	it	pl
 800fbbe:	6962      	ldrpl	r2, [r4, #20]
 800fbc0:	60a2      	str	r2, [r4, #8]
 800fbc2:	e7f4      	b.n	800fbae <__swsetup_r+0x8e>
 800fbc4:	2000      	movs	r0, #0
 800fbc6:	e7f7      	b.n	800fbb8 <__swsetup_r+0x98>
 800fbc8:	20000208 	.word	0x20000208

0800fbcc <_raise_r>:
 800fbcc:	291f      	cmp	r1, #31
 800fbce:	b538      	push	{r3, r4, r5, lr}
 800fbd0:	4605      	mov	r5, r0
 800fbd2:	460c      	mov	r4, r1
 800fbd4:	d904      	bls.n	800fbe0 <_raise_r+0x14>
 800fbd6:	2316      	movs	r3, #22
 800fbd8:	6003      	str	r3, [r0, #0]
 800fbda:	f04f 30ff 	mov.w	r0, #4294967295
 800fbde:	bd38      	pop	{r3, r4, r5, pc}
 800fbe0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fbe2:	b112      	cbz	r2, 800fbea <_raise_r+0x1e>
 800fbe4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fbe8:	b94b      	cbnz	r3, 800fbfe <_raise_r+0x32>
 800fbea:	4628      	mov	r0, r5
 800fbec:	f000 f830 	bl	800fc50 <_getpid_r>
 800fbf0:	4622      	mov	r2, r4
 800fbf2:	4601      	mov	r1, r0
 800fbf4:	4628      	mov	r0, r5
 800fbf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbfa:	f000 b817 	b.w	800fc2c <_kill_r>
 800fbfe:	2b01      	cmp	r3, #1
 800fc00:	d00a      	beq.n	800fc18 <_raise_r+0x4c>
 800fc02:	1c59      	adds	r1, r3, #1
 800fc04:	d103      	bne.n	800fc0e <_raise_r+0x42>
 800fc06:	2316      	movs	r3, #22
 800fc08:	6003      	str	r3, [r0, #0]
 800fc0a:	2001      	movs	r0, #1
 800fc0c:	e7e7      	b.n	800fbde <_raise_r+0x12>
 800fc0e:	2100      	movs	r1, #0
 800fc10:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fc14:	4620      	mov	r0, r4
 800fc16:	4798      	blx	r3
 800fc18:	2000      	movs	r0, #0
 800fc1a:	e7e0      	b.n	800fbde <_raise_r+0x12>

0800fc1c <raise>:
 800fc1c:	4b02      	ldr	r3, [pc, #8]	@ (800fc28 <raise+0xc>)
 800fc1e:	4601      	mov	r1, r0
 800fc20:	6818      	ldr	r0, [r3, #0]
 800fc22:	f7ff bfd3 	b.w	800fbcc <_raise_r>
 800fc26:	bf00      	nop
 800fc28:	20000208 	.word	0x20000208

0800fc2c <_kill_r>:
 800fc2c:	b538      	push	{r3, r4, r5, lr}
 800fc2e:	4d07      	ldr	r5, [pc, #28]	@ (800fc4c <_kill_r+0x20>)
 800fc30:	2300      	movs	r3, #0
 800fc32:	4604      	mov	r4, r0
 800fc34:	4608      	mov	r0, r1
 800fc36:	4611      	mov	r1, r2
 800fc38:	602b      	str	r3, [r5, #0]
 800fc3a:	f7f1 ff95 	bl	8001b68 <_kill>
 800fc3e:	1c43      	adds	r3, r0, #1
 800fc40:	d102      	bne.n	800fc48 <_kill_r+0x1c>
 800fc42:	682b      	ldr	r3, [r5, #0]
 800fc44:	b103      	cbz	r3, 800fc48 <_kill_r+0x1c>
 800fc46:	6023      	str	r3, [r4, #0]
 800fc48:	bd38      	pop	{r3, r4, r5, pc}
 800fc4a:	bf00      	nop
 800fc4c:	20000ae0 	.word	0x20000ae0

0800fc50 <_getpid_r>:
 800fc50:	f7f1 bf82 	b.w	8001b58 <_getpid>

0800fc54 <__swhatbuf_r>:
 800fc54:	b570      	push	{r4, r5, r6, lr}
 800fc56:	460c      	mov	r4, r1
 800fc58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc5c:	2900      	cmp	r1, #0
 800fc5e:	b096      	sub	sp, #88	@ 0x58
 800fc60:	4615      	mov	r5, r2
 800fc62:	461e      	mov	r6, r3
 800fc64:	da0d      	bge.n	800fc82 <__swhatbuf_r+0x2e>
 800fc66:	89a3      	ldrh	r3, [r4, #12]
 800fc68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fc6c:	f04f 0100 	mov.w	r1, #0
 800fc70:	bf14      	ite	ne
 800fc72:	2340      	movne	r3, #64	@ 0x40
 800fc74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fc78:	2000      	movs	r0, #0
 800fc7a:	6031      	str	r1, [r6, #0]
 800fc7c:	602b      	str	r3, [r5, #0]
 800fc7e:	b016      	add	sp, #88	@ 0x58
 800fc80:	bd70      	pop	{r4, r5, r6, pc}
 800fc82:	466a      	mov	r2, sp
 800fc84:	f000 f848 	bl	800fd18 <_fstat_r>
 800fc88:	2800      	cmp	r0, #0
 800fc8a:	dbec      	blt.n	800fc66 <__swhatbuf_r+0x12>
 800fc8c:	9901      	ldr	r1, [sp, #4]
 800fc8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fc92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fc96:	4259      	negs	r1, r3
 800fc98:	4159      	adcs	r1, r3
 800fc9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc9e:	e7eb      	b.n	800fc78 <__swhatbuf_r+0x24>

0800fca0 <__smakebuf_r>:
 800fca0:	898b      	ldrh	r3, [r1, #12]
 800fca2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fca4:	079d      	lsls	r5, r3, #30
 800fca6:	4606      	mov	r6, r0
 800fca8:	460c      	mov	r4, r1
 800fcaa:	d507      	bpl.n	800fcbc <__smakebuf_r+0x1c>
 800fcac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fcb0:	6023      	str	r3, [r4, #0]
 800fcb2:	6123      	str	r3, [r4, #16]
 800fcb4:	2301      	movs	r3, #1
 800fcb6:	6163      	str	r3, [r4, #20]
 800fcb8:	b003      	add	sp, #12
 800fcba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcbc:	ab01      	add	r3, sp, #4
 800fcbe:	466a      	mov	r2, sp
 800fcc0:	f7ff ffc8 	bl	800fc54 <__swhatbuf_r>
 800fcc4:	9f00      	ldr	r7, [sp, #0]
 800fcc6:	4605      	mov	r5, r0
 800fcc8:	4639      	mov	r1, r7
 800fcca:	4630      	mov	r0, r6
 800fccc:	f7fe fd22 	bl	800e714 <_malloc_r>
 800fcd0:	b948      	cbnz	r0, 800fce6 <__smakebuf_r+0x46>
 800fcd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fcd6:	059a      	lsls	r2, r3, #22
 800fcd8:	d4ee      	bmi.n	800fcb8 <__smakebuf_r+0x18>
 800fcda:	f023 0303 	bic.w	r3, r3, #3
 800fcde:	f043 0302 	orr.w	r3, r3, #2
 800fce2:	81a3      	strh	r3, [r4, #12]
 800fce4:	e7e2      	b.n	800fcac <__smakebuf_r+0xc>
 800fce6:	89a3      	ldrh	r3, [r4, #12]
 800fce8:	6020      	str	r0, [r4, #0]
 800fcea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fcee:	81a3      	strh	r3, [r4, #12]
 800fcf0:	9b01      	ldr	r3, [sp, #4]
 800fcf2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fcf6:	b15b      	cbz	r3, 800fd10 <__smakebuf_r+0x70>
 800fcf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fcfc:	4630      	mov	r0, r6
 800fcfe:	f000 f81d 	bl	800fd3c <_isatty_r>
 800fd02:	b128      	cbz	r0, 800fd10 <__smakebuf_r+0x70>
 800fd04:	89a3      	ldrh	r3, [r4, #12]
 800fd06:	f023 0303 	bic.w	r3, r3, #3
 800fd0a:	f043 0301 	orr.w	r3, r3, #1
 800fd0e:	81a3      	strh	r3, [r4, #12]
 800fd10:	89a3      	ldrh	r3, [r4, #12]
 800fd12:	431d      	orrs	r5, r3
 800fd14:	81a5      	strh	r5, [r4, #12]
 800fd16:	e7cf      	b.n	800fcb8 <__smakebuf_r+0x18>

0800fd18 <_fstat_r>:
 800fd18:	b538      	push	{r3, r4, r5, lr}
 800fd1a:	4d07      	ldr	r5, [pc, #28]	@ (800fd38 <_fstat_r+0x20>)
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	4604      	mov	r4, r0
 800fd20:	4608      	mov	r0, r1
 800fd22:	4611      	mov	r1, r2
 800fd24:	602b      	str	r3, [r5, #0]
 800fd26:	f7f1 ff7f 	bl	8001c28 <_fstat>
 800fd2a:	1c43      	adds	r3, r0, #1
 800fd2c:	d102      	bne.n	800fd34 <_fstat_r+0x1c>
 800fd2e:	682b      	ldr	r3, [r5, #0]
 800fd30:	b103      	cbz	r3, 800fd34 <_fstat_r+0x1c>
 800fd32:	6023      	str	r3, [r4, #0]
 800fd34:	bd38      	pop	{r3, r4, r5, pc}
 800fd36:	bf00      	nop
 800fd38:	20000ae0 	.word	0x20000ae0

0800fd3c <_isatty_r>:
 800fd3c:	b538      	push	{r3, r4, r5, lr}
 800fd3e:	4d06      	ldr	r5, [pc, #24]	@ (800fd58 <_isatty_r+0x1c>)
 800fd40:	2300      	movs	r3, #0
 800fd42:	4604      	mov	r4, r0
 800fd44:	4608      	mov	r0, r1
 800fd46:	602b      	str	r3, [r5, #0]
 800fd48:	f7f1 ff7e 	bl	8001c48 <_isatty>
 800fd4c:	1c43      	adds	r3, r0, #1
 800fd4e:	d102      	bne.n	800fd56 <_isatty_r+0x1a>
 800fd50:	682b      	ldr	r3, [r5, #0]
 800fd52:	b103      	cbz	r3, 800fd56 <_isatty_r+0x1a>
 800fd54:	6023      	str	r3, [r4, #0]
 800fd56:	bd38      	pop	{r3, r4, r5, pc}
 800fd58:	20000ae0 	.word	0x20000ae0

0800fd5c <_init>:
 800fd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd5e:	bf00      	nop
 800fd60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd62:	bc08      	pop	{r3}
 800fd64:	469e      	mov	lr, r3
 800fd66:	4770      	bx	lr

0800fd68 <_fini>:
 800fd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd6a:	bf00      	nop
 800fd6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd6e:	bc08      	pop	{r3}
 800fd70:	469e      	mov	lr, r3
 800fd72:	4770      	bx	lr
